// Generated by jextract

package gov.nasa.gsfc.heasarc.cfitsio;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FITSfile {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("filehandle"),
        Constants$root.C_LONG$LAYOUT.withName("driver"),
        Constants$root.C_LONG$LAYOUT.withName("open_count"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("filename"),
        Constants$root.C_LONG$LAYOUT.withName("validcode"),
        Constants$root.C_LONG$LAYOUT.withName("only_one"),
        Constants$root.C_LONG$LAYOUT.withName("noextsyntax"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("filesize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("logfilesize"),
        Constants$root.C_LONG$LAYOUT.withName("lasthdu"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bytepos"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("io_pos"),
        Constants$root.C_LONG$LAYOUT.withName("curbuf"),
        Constants$root.C_LONG$LAYOUT.withName("curhdu"),
        Constants$root.C_LONG$LAYOUT.withName("hdutype"),
        Constants$root.C_LONG$LAYOUT.withName("writemode"),
        Constants$root.C_LONG$LAYOUT.withName("maxhdu"),
        Constants$root.C_LONG$LAYOUT.withName("MAXHDU"),
        Constants$root.C_POINTER$LAYOUT.withName("headstart"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("headend"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ENDpos"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nextkey"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("datastart"),
        Constants$root.C_LONG$LAYOUT.withName("imgdim"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(99, Constants$root.C_LONG_LONG$LAYOUT).withName("imgnaxis"),
        Constants$root.C_LONG$LAYOUT.withName("tfield"),
        Constants$root.C_LONG$LAYOUT.withName("startcol"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("origrows"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("numrows"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("rowlength"),
        Constants$root.C_POINTER$LAYOUT.withName("tableptr"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("heapstart"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("heapsize"),
        Constants$root.C_LONG$LAYOUT.withName("request_compress_type"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_LONG$LAYOUT).withName("request_tilesize"),
        Constants$root.C_FLOAT$LAYOUT.withName("request_quantize_level"),
        Constants$root.C_LONG$LAYOUT.withName("request_quantize_method"),
        Constants$root.C_LONG$LAYOUT.withName("request_dither_seed"),
        Constants$root.C_LONG$LAYOUT.withName("request_lossy_int_compress"),
        Constants$root.C_LONG$LAYOUT.withName("request_huge_hdu"),
        Constants$root.C_FLOAT$LAYOUT.withName("request_hcomp_scale"),
        Constants$root.C_LONG$LAYOUT.withName("request_hcomp_smooth"),
        Constants$root.C_LONG$LAYOUT.withName("compress_type"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_LONG$LAYOUT).withName("tilesize"),
        Constants$root.C_FLOAT$LAYOUT.withName("quantize_level"),
        Constants$root.C_LONG$LAYOUT.withName("quantize_method"),
        Constants$root.C_LONG$LAYOUT.withName("dither_seed"),
        Constants$root.C_LONG$LAYOUT.withName("compressimg"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_CHAR$LAYOUT).withName("zcmptype"),
        Constants$root.C_LONG$LAYOUT.withName("zbitpix"),
        Constants$root.C_LONG$LAYOUT.withName("zndim"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_LONG$LAYOUT).withName("znaxis"),
        Constants$root.C_LONG$LAYOUT.withName("maxtilelen"),
        Constants$root.C_LONG$LAYOUT.withName("maxelem"),
        Constants$root.C_LONG$LAYOUT.withName("cn_compressed"),
        Constants$root.C_LONG$LAYOUT.withName("cn_uncompressed"),
        Constants$root.C_LONG$LAYOUT.withName("cn_gzip_data"),
        Constants$root.C_LONG$LAYOUT.withName("cn_zscale"),
        Constants$root.C_LONG$LAYOUT.withName("cn_zzero"),
        Constants$root.C_LONG$LAYOUT.withName("cn_zblank"),
        Constants$root.C_DOUBLE$LAYOUT.withName("zscale"),
        Constants$root.C_DOUBLE$LAYOUT.withName("zzero"),
        Constants$root.C_DOUBLE$LAYOUT.withName("cn_bscale"),
        Constants$root.C_DOUBLE$LAYOUT.withName("cn_bzero"),
        Constants$root.C_DOUBLE$LAYOUT.withName("cn_actual_bzero"),
        Constants$root.C_LONG$LAYOUT.withName("zblank"),
        Constants$root.C_LONG$LAYOUT.withName("rice_blocksize"),
        Constants$root.C_LONG$LAYOUT.withName("rice_bytepix"),
        Constants$root.C_FLOAT$LAYOUT.withName("hcomp_scale"),
        Constants$root.C_LONG$LAYOUT.withName("hcomp_smooth"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("tilerow"),
        Constants$root.C_POINTER$LAYOUT.withName("tiledatasize"),
        Constants$root.C_POINTER$LAYOUT.withName("tiletype"),
        Constants$root.C_POINTER$LAYOUT.withName("tiledata"),
        Constants$root.C_POINTER$LAYOUT.withName("tilenullarray"),
        Constants$root.C_POINTER$LAYOUT.withName("tileanynull"),
        Constants$root.C_POINTER$LAYOUT.withName("iobuffer"),
        MemoryLayout.sequenceLayout(40, Constants$root.C_LONG$LAYOUT).withName("bufrecnum"),
        MemoryLayout.sequenceLayout(40, Constants$root.C_LONG$LAYOUT).withName("dirty"),
        MemoryLayout.sequenceLayout(40, Constants$root.C_LONG$LAYOUT).withName("ageindex")
    );
    public static MemoryLayout $LAYOUT() {
        return FITSfile.$struct$LAYOUT;
    }
    static final VarHandle filehandle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filehandle"));
    public static VarHandle filehandle$VH() {
        return FITSfile.filehandle$VH;
    }
    public static int filehandle$get(MemorySegment seg) {
        return (int)FITSfile.filehandle$VH.get(seg);
    }
    public static void filehandle$set( MemorySegment seg, int x) {
        FITSfile.filehandle$VH.set(seg, x);
    }
    public static int filehandle$get(MemorySegment seg, long index) {
        return (int)FITSfile.filehandle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filehandle$set(MemorySegment seg, long index, int x) {
        FITSfile.filehandle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle driver$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("driver"));
    public static VarHandle driver$VH() {
        return FITSfile.driver$VH;
    }
    public static int driver$get(MemorySegment seg) {
        return (int)FITSfile.driver$VH.get(seg);
    }
    public static void driver$set( MemorySegment seg, int x) {
        FITSfile.driver$VH.set(seg, x);
    }
    public static int driver$get(MemorySegment seg, long index) {
        return (int)FITSfile.driver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void driver$set(MemorySegment seg, long index, int x) {
        FITSfile.driver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle open_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("open_count"));
    public static VarHandle open_count$VH() {
        return FITSfile.open_count$VH;
    }
    public static int open_count$get(MemorySegment seg) {
        return (int)FITSfile.open_count$VH.get(seg);
    }
    public static void open_count$set( MemorySegment seg, int x) {
        FITSfile.open_count$VH.set(seg, x);
    }
    public static int open_count$get(MemorySegment seg, long index) {
        return (int)FITSfile.open_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void open_count$set(MemorySegment seg, long index, int x) {
        FITSfile.open_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filename"));
    public static VarHandle filename$VH() {
        return FITSfile.filename$VH;
    }
    public static MemoryAddress filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.filename$VH.get(seg);
    }
    public static void filename$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.filename$VH.set(seg, x);
    }
    public static MemoryAddress filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.filename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filename$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.filename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle validcode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("validcode"));
    public static VarHandle validcode$VH() {
        return FITSfile.validcode$VH;
    }
    public static int validcode$get(MemorySegment seg) {
        return (int)FITSfile.validcode$VH.get(seg);
    }
    public static void validcode$set( MemorySegment seg, int x) {
        FITSfile.validcode$VH.set(seg, x);
    }
    public static int validcode$get(MemorySegment seg, long index) {
        return (int)FITSfile.validcode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void validcode$set(MemorySegment seg, long index, int x) {
        FITSfile.validcode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle only_one$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("only_one"));
    public static VarHandle only_one$VH() {
        return FITSfile.only_one$VH;
    }
    public static int only_one$get(MemorySegment seg) {
        return (int)FITSfile.only_one$VH.get(seg);
    }
    public static void only_one$set( MemorySegment seg, int x) {
        FITSfile.only_one$VH.set(seg, x);
    }
    public static int only_one$get(MemorySegment seg, long index) {
        return (int)FITSfile.only_one$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void only_one$set(MemorySegment seg, long index, int x) {
        FITSfile.only_one$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle noextsyntax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("noextsyntax"));
    public static VarHandle noextsyntax$VH() {
        return FITSfile.noextsyntax$VH;
    }
    public static int noextsyntax$get(MemorySegment seg) {
        return (int)FITSfile.noextsyntax$VH.get(seg);
    }
    public static void noextsyntax$set( MemorySegment seg, int x) {
        FITSfile.noextsyntax$VH.set(seg, x);
    }
    public static int noextsyntax$get(MemorySegment seg, long index) {
        return (int)FITSfile.noextsyntax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void noextsyntax$set(MemorySegment seg, long index, int x) {
        FITSfile.noextsyntax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filesize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filesize"));
    public static VarHandle filesize$VH() {
        return FITSfile.filesize$VH;
    }
    public static long filesize$get(MemorySegment seg) {
        return (long)FITSfile.filesize$VH.get(seg);
    }
    public static void filesize$set( MemorySegment seg, long x) {
        FITSfile.filesize$VH.set(seg, x);
    }
    public static long filesize$get(MemorySegment seg, long index) {
        return (long)FITSfile.filesize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filesize$set(MemorySegment seg, long index, long x) {
        FITSfile.filesize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle logfilesize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("logfilesize"));
    public static VarHandle logfilesize$VH() {
        return FITSfile.logfilesize$VH;
    }
    public static long logfilesize$get(MemorySegment seg) {
        return (long)FITSfile.logfilesize$VH.get(seg);
    }
    public static void logfilesize$set( MemorySegment seg, long x) {
        FITSfile.logfilesize$VH.set(seg, x);
    }
    public static long logfilesize$get(MemorySegment seg, long index) {
        return (long)FITSfile.logfilesize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void logfilesize$set(MemorySegment seg, long index, long x) {
        FITSfile.logfilesize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lasthdu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lasthdu"));
    public static VarHandle lasthdu$VH() {
        return FITSfile.lasthdu$VH;
    }
    public static int lasthdu$get(MemorySegment seg) {
        return (int)FITSfile.lasthdu$VH.get(seg);
    }
    public static void lasthdu$set( MemorySegment seg, int x) {
        FITSfile.lasthdu$VH.set(seg, x);
    }
    public static int lasthdu$get(MemorySegment seg, long index) {
        return (int)FITSfile.lasthdu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lasthdu$set(MemorySegment seg, long index, int x) {
        FITSfile.lasthdu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytepos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytepos"));
    public static VarHandle bytepos$VH() {
        return FITSfile.bytepos$VH;
    }
    public static long bytepos$get(MemorySegment seg) {
        return (long)FITSfile.bytepos$VH.get(seg);
    }
    public static void bytepos$set( MemorySegment seg, long x) {
        FITSfile.bytepos$VH.set(seg, x);
    }
    public static long bytepos$get(MemorySegment seg, long index) {
        return (long)FITSfile.bytepos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytepos$set(MemorySegment seg, long index, long x) {
        FITSfile.bytepos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle io_pos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("io_pos"));
    public static VarHandle io_pos$VH() {
        return FITSfile.io_pos$VH;
    }
    public static long io_pos$get(MemorySegment seg) {
        return (long)FITSfile.io_pos$VH.get(seg);
    }
    public static void io_pos$set( MemorySegment seg, long x) {
        FITSfile.io_pos$VH.set(seg, x);
    }
    public static long io_pos$get(MemorySegment seg, long index) {
        return (long)FITSfile.io_pos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void io_pos$set(MemorySegment seg, long index, long x) {
        FITSfile.io_pos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle curbuf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("curbuf"));
    public static VarHandle curbuf$VH() {
        return FITSfile.curbuf$VH;
    }
    public static int curbuf$get(MemorySegment seg) {
        return (int)FITSfile.curbuf$VH.get(seg);
    }
    public static void curbuf$set( MemorySegment seg, int x) {
        FITSfile.curbuf$VH.set(seg, x);
    }
    public static int curbuf$get(MemorySegment seg, long index) {
        return (int)FITSfile.curbuf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void curbuf$set(MemorySegment seg, long index, int x) {
        FITSfile.curbuf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle curhdu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("curhdu"));
    public static VarHandle curhdu$VH() {
        return FITSfile.curhdu$VH;
    }
    public static int curhdu$get(MemorySegment seg) {
        return (int)FITSfile.curhdu$VH.get(seg);
    }
    public static void curhdu$set( MemorySegment seg, int x) {
        FITSfile.curhdu$VH.set(seg, x);
    }
    public static int curhdu$get(MemorySegment seg, long index) {
        return (int)FITSfile.curhdu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void curhdu$set(MemorySegment seg, long index, int x) {
        FITSfile.curhdu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hdutype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hdutype"));
    public static VarHandle hdutype$VH() {
        return FITSfile.hdutype$VH;
    }
    public static int hdutype$get(MemorySegment seg) {
        return (int)FITSfile.hdutype$VH.get(seg);
    }
    public static void hdutype$set( MemorySegment seg, int x) {
        FITSfile.hdutype$VH.set(seg, x);
    }
    public static int hdutype$get(MemorySegment seg, long index) {
        return (int)FITSfile.hdutype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hdutype$set(MemorySegment seg, long index, int x) {
        FITSfile.hdutype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle writemode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("writemode"));
    public static VarHandle writemode$VH() {
        return FITSfile.writemode$VH;
    }
    public static int writemode$get(MemorySegment seg) {
        return (int)FITSfile.writemode$VH.get(seg);
    }
    public static void writemode$set( MemorySegment seg, int x) {
        FITSfile.writemode$VH.set(seg, x);
    }
    public static int writemode$get(MemorySegment seg, long index) {
        return (int)FITSfile.writemode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void writemode$set(MemorySegment seg, long index, int x) {
        FITSfile.writemode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maxhdu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maxhdu"));
    public static VarHandle maxhdu$VH() {
        return FITSfile.maxhdu$VH;
    }
    public static int maxhdu$get(MemorySegment seg) {
        return (int)FITSfile.maxhdu$VH.get(seg);
    }
    public static void maxhdu$set( MemorySegment seg, int x) {
        FITSfile.maxhdu$VH.set(seg, x);
    }
    public static int maxhdu$get(MemorySegment seg, long index) {
        return (int)FITSfile.maxhdu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maxhdu$set(MemorySegment seg, long index, int x) {
        FITSfile.maxhdu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MAXHDU$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MAXHDU"));
    public static VarHandle MAXHDU$VH() {
        return FITSfile.MAXHDU$VH;
    }
    public static int MAXHDU$get(MemorySegment seg) {
        return (int)FITSfile.MAXHDU$VH.get(seg);
    }
    public static void MAXHDU$set( MemorySegment seg, int x) {
        FITSfile.MAXHDU$VH.set(seg, x);
    }
    public static int MAXHDU$get(MemorySegment seg, long index) {
        return (int)FITSfile.MAXHDU$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MAXHDU$set(MemorySegment seg, long index, int x) {
        FITSfile.MAXHDU$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle headstart$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("headstart"));
    public static VarHandle headstart$VH() {
        return FITSfile.headstart$VH;
    }
    public static MemoryAddress headstart$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.headstart$VH.get(seg);
    }
    public static void headstart$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.headstart$VH.set(seg, x);
    }
    public static MemoryAddress headstart$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.headstart$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void headstart$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.headstart$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle headend$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("headend"));
    public static VarHandle headend$VH() {
        return FITSfile.headend$VH;
    }
    public static long headend$get(MemorySegment seg) {
        return (long)FITSfile.headend$VH.get(seg);
    }
    public static void headend$set( MemorySegment seg, long x) {
        FITSfile.headend$VH.set(seg, x);
    }
    public static long headend$get(MemorySegment seg, long index) {
        return (long)FITSfile.headend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void headend$set(MemorySegment seg, long index, long x) {
        FITSfile.headend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ENDpos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ENDpos"));
    public static VarHandle ENDpos$VH() {
        return FITSfile.ENDpos$VH;
    }
    public static long ENDpos$get(MemorySegment seg) {
        return (long)FITSfile.ENDpos$VH.get(seg);
    }
    public static void ENDpos$set( MemorySegment seg, long x) {
        FITSfile.ENDpos$VH.set(seg, x);
    }
    public static long ENDpos$get(MemorySegment seg, long index) {
        return (long)FITSfile.ENDpos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ENDpos$set(MemorySegment seg, long index, long x) {
        FITSfile.ENDpos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nextkey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nextkey"));
    public static VarHandle nextkey$VH() {
        return FITSfile.nextkey$VH;
    }
    public static long nextkey$get(MemorySegment seg) {
        return (long)FITSfile.nextkey$VH.get(seg);
    }
    public static void nextkey$set( MemorySegment seg, long x) {
        FITSfile.nextkey$VH.set(seg, x);
    }
    public static long nextkey$get(MemorySegment seg, long index) {
        return (long)FITSfile.nextkey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nextkey$set(MemorySegment seg, long index, long x) {
        FITSfile.nextkey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle datastart$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("datastart"));
    public static VarHandle datastart$VH() {
        return FITSfile.datastart$VH;
    }
    public static long datastart$get(MemorySegment seg) {
        return (long)FITSfile.datastart$VH.get(seg);
    }
    public static void datastart$set( MemorySegment seg, long x) {
        FITSfile.datastart$VH.set(seg, x);
    }
    public static long datastart$get(MemorySegment seg, long index) {
        return (long)FITSfile.datastart$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void datastart$set(MemorySegment seg, long index, long x) {
        FITSfile.datastart$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle imgdim$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("imgdim"));
    public static VarHandle imgdim$VH() {
        return FITSfile.imgdim$VH;
    }
    public static int imgdim$get(MemorySegment seg) {
        return (int)FITSfile.imgdim$VH.get(seg);
    }
    public static void imgdim$set( MemorySegment seg, int x) {
        FITSfile.imgdim$VH.set(seg, x);
    }
    public static int imgdim$get(MemorySegment seg, long index) {
        return (int)FITSfile.imgdim$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void imgdim$set(MemorySegment seg, long index, int x) {
        FITSfile.imgdim$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment imgnaxis$slice(MemorySegment seg) {
        return seg.asSlice(152, 792);
    }
    static final VarHandle tfield$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tfield"));
    public static VarHandle tfield$VH() {
        return FITSfile.tfield$VH;
    }
    public static int tfield$get(MemorySegment seg) {
        return (int)FITSfile.tfield$VH.get(seg);
    }
    public static void tfield$set( MemorySegment seg, int x) {
        FITSfile.tfield$VH.set(seg, x);
    }
    public static int tfield$get(MemorySegment seg, long index) {
        return (int)FITSfile.tfield$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tfield$set(MemorySegment seg, long index, int x) {
        FITSfile.tfield$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle startcol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("startcol"));
    public static VarHandle startcol$VH() {
        return FITSfile.startcol$VH;
    }
    public static int startcol$get(MemorySegment seg) {
        return (int)FITSfile.startcol$VH.get(seg);
    }
    public static void startcol$set( MemorySegment seg, int x) {
        FITSfile.startcol$VH.set(seg, x);
    }
    public static int startcol$get(MemorySegment seg, long index) {
        return (int)FITSfile.startcol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void startcol$set(MemorySegment seg, long index, int x) {
        FITSfile.startcol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle origrows$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("origrows"));
    public static VarHandle origrows$VH() {
        return FITSfile.origrows$VH;
    }
    public static long origrows$get(MemorySegment seg) {
        return (long)FITSfile.origrows$VH.get(seg);
    }
    public static void origrows$set( MemorySegment seg, long x) {
        FITSfile.origrows$VH.set(seg, x);
    }
    public static long origrows$get(MemorySegment seg, long index) {
        return (long)FITSfile.origrows$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void origrows$set(MemorySegment seg, long index, long x) {
        FITSfile.origrows$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle numrows$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("numrows"));
    public static VarHandle numrows$VH() {
        return FITSfile.numrows$VH;
    }
    public static long numrows$get(MemorySegment seg) {
        return (long)FITSfile.numrows$VH.get(seg);
    }
    public static void numrows$set( MemorySegment seg, long x) {
        FITSfile.numrows$VH.set(seg, x);
    }
    public static long numrows$get(MemorySegment seg, long index) {
        return (long)FITSfile.numrows$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void numrows$set(MemorySegment seg, long index, long x) {
        FITSfile.numrows$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rowlength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rowlength"));
    public static VarHandle rowlength$VH() {
        return FITSfile.rowlength$VH;
    }
    public static long rowlength$get(MemorySegment seg) {
        return (long)FITSfile.rowlength$VH.get(seg);
    }
    public static void rowlength$set( MemorySegment seg, long x) {
        FITSfile.rowlength$VH.set(seg, x);
    }
    public static long rowlength$get(MemorySegment seg, long index) {
        return (long)FITSfile.rowlength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rowlength$set(MemorySegment seg, long index, long x) {
        FITSfile.rowlength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tableptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tableptr"));
    public static VarHandle tableptr$VH() {
        return FITSfile.tableptr$VH;
    }
    public static MemoryAddress tableptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tableptr$VH.get(seg);
    }
    public static void tableptr$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.tableptr$VH.set(seg, x);
    }
    public static MemoryAddress tableptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tableptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tableptr$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.tableptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle heapstart$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("heapstart"));
    public static VarHandle heapstart$VH() {
        return FITSfile.heapstart$VH;
    }
    public static long heapstart$get(MemorySegment seg) {
        return (long)FITSfile.heapstart$VH.get(seg);
    }
    public static void heapstart$set( MemorySegment seg, long x) {
        FITSfile.heapstart$VH.set(seg, x);
    }
    public static long heapstart$get(MemorySegment seg, long index) {
        return (long)FITSfile.heapstart$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void heapstart$set(MemorySegment seg, long index, long x) {
        FITSfile.heapstart$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle heapsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("heapsize"));
    public static VarHandle heapsize$VH() {
        return FITSfile.heapsize$VH;
    }
    public static long heapsize$get(MemorySegment seg) {
        return (long)FITSfile.heapsize$VH.get(seg);
    }
    public static void heapsize$set( MemorySegment seg, long x) {
        FITSfile.heapsize$VH.set(seg, x);
    }
    public static long heapsize$get(MemorySegment seg, long index) {
        return (long)FITSfile.heapsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void heapsize$set(MemorySegment seg, long index, long x) {
        FITSfile.heapsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_compress_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_compress_type"));
    public static VarHandle request_compress_type$VH() {
        return FITSfile.request_compress_type$VH;
    }
    public static int request_compress_type$get(MemorySegment seg) {
        return (int)FITSfile.request_compress_type$VH.get(seg);
    }
    public static void request_compress_type$set( MemorySegment seg, int x) {
        FITSfile.request_compress_type$VH.set(seg, x);
    }
    public static int request_compress_type$get(MemorySegment seg, long index) {
        return (int)FITSfile.request_compress_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_compress_type$set(MemorySegment seg, long index, int x) {
        FITSfile.request_compress_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment request_tilesize$slice(MemorySegment seg) {
        return seg.asSlice(1004, 24);
    }
    static final VarHandle request_quantize_level$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_quantize_level"));
    public static VarHandle request_quantize_level$VH() {
        return FITSfile.request_quantize_level$VH;
    }
    public static float request_quantize_level$get(MemorySegment seg) {
        return (float)FITSfile.request_quantize_level$VH.get(seg);
    }
    public static void request_quantize_level$set( MemorySegment seg, float x) {
        FITSfile.request_quantize_level$VH.set(seg, x);
    }
    public static float request_quantize_level$get(MemorySegment seg, long index) {
        return (float)FITSfile.request_quantize_level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_quantize_level$set(MemorySegment seg, long index, float x) {
        FITSfile.request_quantize_level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_quantize_method$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_quantize_method"));
    public static VarHandle request_quantize_method$VH() {
        return FITSfile.request_quantize_method$VH;
    }
    public static int request_quantize_method$get(MemorySegment seg) {
        return (int)FITSfile.request_quantize_method$VH.get(seg);
    }
    public static void request_quantize_method$set( MemorySegment seg, int x) {
        FITSfile.request_quantize_method$VH.set(seg, x);
    }
    public static int request_quantize_method$get(MemorySegment seg, long index) {
        return (int)FITSfile.request_quantize_method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_quantize_method$set(MemorySegment seg, long index, int x) {
        FITSfile.request_quantize_method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_dither_seed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_dither_seed"));
    public static VarHandle request_dither_seed$VH() {
        return FITSfile.request_dither_seed$VH;
    }
    public static int request_dither_seed$get(MemorySegment seg) {
        return (int)FITSfile.request_dither_seed$VH.get(seg);
    }
    public static void request_dither_seed$set( MemorySegment seg, int x) {
        FITSfile.request_dither_seed$VH.set(seg, x);
    }
    public static int request_dither_seed$get(MemorySegment seg, long index) {
        return (int)FITSfile.request_dither_seed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_dither_seed$set(MemorySegment seg, long index, int x) {
        FITSfile.request_dither_seed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_lossy_int_compress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_lossy_int_compress"));
    public static VarHandle request_lossy_int_compress$VH() {
        return FITSfile.request_lossy_int_compress$VH;
    }
    public static int request_lossy_int_compress$get(MemorySegment seg) {
        return (int)FITSfile.request_lossy_int_compress$VH.get(seg);
    }
    public static void request_lossy_int_compress$set( MemorySegment seg, int x) {
        FITSfile.request_lossy_int_compress$VH.set(seg, x);
    }
    public static int request_lossy_int_compress$get(MemorySegment seg, long index) {
        return (int)FITSfile.request_lossy_int_compress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_lossy_int_compress$set(MemorySegment seg, long index, int x) {
        FITSfile.request_lossy_int_compress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_huge_hdu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_huge_hdu"));
    public static VarHandle request_huge_hdu$VH() {
        return FITSfile.request_huge_hdu$VH;
    }
    public static int request_huge_hdu$get(MemorySegment seg) {
        return (int)FITSfile.request_huge_hdu$VH.get(seg);
    }
    public static void request_huge_hdu$set( MemorySegment seg, int x) {
        FITSfile.request_huge_hdu$VH.set(seg, x);
    }
    public static int request_huge_hdu$get(MemorySegment seg, long index) {
        return (int)FITSfile.request_huge_hdu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_huge_hdu$set(MemorySegment seg, long index, int x) {
        FITSfile.request_huge_hdu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_hcomp_scale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_hcomp_scale"));
    public static VarHandle request_hcomp_scale$VH() {
        return FITSfile.request_hcomp_scale$VH;
    }
    public static float request_hcomp_scale$get(MemorySegment seg) {
        return (float)FITSfile.request_hcomp_scale$VH.get(seg);
    }
    public static void request_hcomp_scale$set( MemorySegment seg, float x) {
        FITSfile.request_hcomp_scale$VH.set(seg, x);
    }
    public static float request_hcomp_scale$get(MemorySegment seg, long index) {
        return (float)FITSfile.request_hcomp_scale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_hcomp_scale$set(MemorySegment seg, long index, float x) {
        FITSfile.request_hcomp_scale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_hcomp_smooth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_hcomp_smooth"));
    public static VarHandle request_hcomp_smooth$VH() {
        return FITSfile.request_hcomp_smooth$VH;
    }
    public static int request_hcomp_smooth$get(MemorySegment seg) {
        return (int)FITSfile.request_hcomp_smooth$VH.get(seg);
    }
    public static void request_hcomp_smooth$set( MemorySegment seg, int x) {
        FITSfile.request_hcomp_smooth$VH.set(seg, x);
    }
    public static int request_hcomp_smooth$get(MemorySegment seg, long index) {
        return (int)FITSfile.request_hcomp_smooth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_hcomp_smooth$set(MemorySegment seg, long index, int x) {
        FITSfile.request_hcomp_smooth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle compress_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("compress_type"));
    public static VarHandle compress_type$VH() {
        return FITSfile.compress_type$VH;
    }
    public static int compress_type$get(MemorySegment seg) {
        return (int)FITSfile.compress_type$VH.get(seg);
    }
    public static void compress_type$set( MemorySegment seg, int x) {
        FITSfile.compress_type$VH.set(seg, x);
    }
    public static int compress_type$get(MemorySegment seg, long index) {
        return (int)FITSfile.compress_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void compress_type$set(MemorySegment seg, long index, int x) {
        FITSfile.compress_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment tilesize$slice(MemorySegment seg) {
        return seg.asSlice(1060, 24);
    }
    static final VarHandle quantize_level$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("quantize_level"));
    public static VarHandle quantize_level$VH() {
        return FITSfile.quantize_level$VH;
    }
    public static float quantize_level$get(MemorySegment seg) {
        return (float)FITSfile.quantize_level$VH.get(seg);
    }
    public static void quantize_level$set( MemorySegment seg, float x) {
        FITSfile.quantize_level$VH.set(seg, x);
    }
    public static float quantize_level$get(MemorySegment seg, long index) {
        return (float)FITSfile.quantize_level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void quantize_level$set(MemorySegment seg, long index, float x) {
        FITSfile.quantize_level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle quantize_method$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("quantize_method"));
    public static VarHandle quantize_method$VH() {
        return FITSfile.quantize_method$VH;
    }
    public static int quantize_method$get(MemorySegment seg) {
        return (int)FITSfile.quantize_method$VH.get(seg);
    }
    public static void quantize_method$set( MemorySegment seg, int x) {
        FITSfile.quantize_method$VH.set(seg, x);
    }
    public static int quantize_method$get(MemorySegment seg, long index) {
        return (int)FITSfile.quantize_method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void quantize_method$set(MemorySegment seg, long index, int x) {
        FITSfile.quantize_method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dither_seed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dither_seed"));
    public static VarHandle dither_seed$VH() {
        return FITSfile.dither_seed$VH;
    }
    public static int dither_seed$get(MemorySegment seg) {
        return (int)FITSfile.dither_seed$VH.get(seg);
    }
    public static void dither_seed$set( MemorySegment seg, int x) {
        FITSfile.dither_seed$VH.set(seg, x);
    }
    public static int dither_seed$get(MemorySegment seg, long index) {
        return (int)FITSfile.dither_seed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dither_seed$set(MemorySegment seg, long index, int x) {
        FITSfile.dither_seed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle compressimg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("compressimg"));
    public static VarHandle compressimg$VH() {
        return FITSfile.compressimg$VH;
    }
    public static int compressimg$get(MemorySegment seg) {
        return (int)FITSfile.compressimg$VH.get(seg);
    }
    public static void compressimg$set( MemorySegment seg, int x) {
        FITSfile.compressimg$VH.set(seg, x);
    }
    public static int compressimg$get(MemorySegment seg, long index) {
        return (int)FITSfile.compressimg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void compressimg$set(MemorySegment seg, long index, int x) {
        FITSfile.compressimg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment zcmptype$slice(MemorySegment seg) {
        return seg.asSlice(1100, 12);
    }
    static final VarHandle zbitpix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("zbitpix"));
    public static VarHandle zbitpix$VH() {
        return FITSfile.zbitpix$VH;
    }
    public static int zbitpix$get(MemorySegment seg) {
        return (int)FITSfile.zbitpix$VH.get(seg);
    }
    public static void zbitpix$set( MemorySegment seg, int x) {
        FITSfile.zbitpix$VH.set(seg, x);
    }
    public static int zbitpix$get(MemorySegment seg, long index) {
        return (int)FITSfile.zbitpix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zbitpix$set(MemorySegment seg, long index, int x) {
        FITSfile.zbitpix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zndim$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("zndim"));
    public static VarHandle zndim$VH() {
        return FITSfile.zndim$VH;
    }
    public static int zndim$get(MemorySegment seg) {
        return (int)FITSfile.zndim$VH.get(seg);
    }
    public static void zndim$set( MemorySegment seg, int x) {
        FITSfile.zndim$VH.set(seg, x);
    }
    public static int zndim$get(MemorySegment seg, long index) {
        return (int)FITSfile.zndim$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zndim$set(MemorySegment seg, long index, int x) {
        FITSfile.zndim$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment znaxis$slice(MemorySegment seg) {
        return seg.asSlice(1120, 24);
    }
    static final VarHandle maxtilelen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maxtilelen"));
    public static VarHandle maxtilelen$VH() {
        return FITSfile.maxtilelen$VH;
    }
    public static int maxtilelen$get(MemorySegment seg) {
        return (int)FITSfile.maxtilelen$VH.get(seg);
    }
    public static void maxtilelen$set( MemorySegment seg, int x) {
        FITSfile.maxtilelen$VH.set(seg, x);
    }
    public static int maxtilelen$get(MemorySegment seg, long index) {
        return (int)FITSfile.maxtilelen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maxtilelen$set(MemorySegment seg, long index, int x) {
        FITSfile.maxtilelen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maxelem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maxelem"));
    public static VarHandle maxelem$VH() {
        return FITSfile.maxelem$VH;
    }
    public static int maxelem$get(MemorySegment seg) {
        return (int)FITSfile.maxelem$VH.get(seg);
    }
    public static void maxelem$set( MemorySegment seg, int x) {
        FITSfile.maxelem$VH.set(seg, x);
    }
    public static int maxelem$get(MemorySegment seg, long index) {
        return (int)FITSfile.maxelem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maxelem$set(MemorySegment seg, long index, int x) {
        FITSfile.maxelem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_compressed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_compressed"));
    public static VarHandle cn_compressed$VH() {
        return FITSfile.cn_compressed$VH;
    }
    public static int cn_compressed$get(MemorySegment seg) {
        return (int)FITSfile.cn_compressed$VH.get(seg);
    }
    public static void cn_compressed$set( MemorySegment seg, int x) {
        FITSfile.cn_compressed$VH.set(seg, x);
    }
    public static int cn_compressed$get(MemorySegment seg, long index) {
        return (int)FITSfile.cn_compressed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_compressed$set(MemorySegment seg, long index, int x) {
        FITSfile.cn_compressed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_uncompressed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_uncompressed"));
    public static VarHandle cn_uncompressed$VH() {
        return FITSfile.cn_uncompressed$VH;
    }
    public static int cn_uncompressed$get(MemorySegment seg) {
        return (int)FITSfile.cn_uncompressed$VH.get(seg);
    }
    public static void cn_uncompressed$set( MemorySegment seg, int x) {
        FITSfile.cn_uncompressed$VH.set(seg, x);
    }
    public static int cn_uncompressed$get(MemorySegment seg, long index) {
        return (int)FITSfile.cn_uncompressed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_uncompressed$set(MemorySegment seg, long index, int x) {
        FITSfile.cn_uncompressed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_gzip_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_gzip_data"));
    public static VarHandle cn_gzip_data$VH() {
        return FITSfile.cn_gzip_data$VH;
    }
    public static int cn_gzip_data$get(MemorySegment seg) {
        return (int)FITSfile.cn_gzip_data$VH.get(seg);
    }
    public static void cn_gzip_data$set( MemorySegment seg, int x) {
        FITSfile.cn_gzip_data$VH.set(seg, x);
    }
    public static int cn_gzip_data$get(MemorySegment seg, long index) {
        return (int)FITSfile.cn_gzip_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_gzip_data$set(MemorySegment seg, long index, int x) {
        FITSfile.cn_gzip_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_zscale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_zscale"));
    public static VarHandle cn_zscale$VH() {
        return FITSfile.cn_zscale$VH;
    }
    public static int cn_zscale$get(MemorySegment seg) {
        return (int)FITSfile.cn_zscale$VH.get(seg);
    }
    public static void cn_zscale$set( MemorySegment seg, int x) {
        FITSfile.cn_zscale$VH.set(seg, x);
    }
    public static int cn_zscale$get(MemorySegment seg, long index) {
        return (int)FITSfile.cn_zscale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_zscale$set(MemorySegment seg, long index, int x) {
        FITSfile.cn_zscale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_zzero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_zzero"));
    public static VarHandle cn_zzero$VH() {
        return FITSfile.cn_zzero$VH;
    }
    public static int cn_zzero$get(MemorySegment seg) {
        return (int)FITSfile.cn_zzero$VH.get(seg);
    }
    public static void cn_zzero$set( MemorySegment seg, int x) {
        FITSfile.cn_zzero$VH.set(seg, x);
    }
    public static int cn_zzero$get(MemorySegment seg, long index) {
        return (int)FITSfile.cn_zzero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_zzero$set(MemorySegment seg, long index, int x) {
        FITSfile.cn_zzero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_zblank$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_zblank"));
    public static VarHandle cn_zblank$VH() {
        return FITSfile.cn_zblank$VH;
    }
    public static int cn_zblank$get(MemorySegment seg) {
        return (int)FITSfile.cn_zblank$VH.get(seg);
    }
    public static void cn_zblank$set( MemorySegment seg, int x) {
        FITSfile.cn_zblank$VH.set(seg, x);
    }
    public static int cn_zblank$get(MemorySegment seg, long index) {
        return (int)FITSfile.cn_zblank$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_zblank$set(MemorySegment seg, long index, int x) {
        FITSfile.cn_zblank$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zscale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("zscale"));
    public static VarHandle zscale$VH() {
        return FITSfile.zscale$VH;
    }
    public static double zscale$get(MemorySegment seg) {
        return (double)FITSfile.zscale$VH.get(seg);
    }
    public static void zscale$set( MemorySegment seg, double x) {
        FITSfile.zscale$VH.set(seg, x);
    }
    public static double zscale$get(MemorySegment seg, long index) {
        return (double)FITSfile.zscale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zscale$set(MemorySegment seg, long index, double x) {
        FITSfile.zscale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zzero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("zzero"));
    public static VarHandle zzero$VH() {
        return FITSfile.zzero$VH;
    }
    public static double zzero$get(MemorySegment seg) {
        return (double)FITSfile.zzero$VH.get(seg);
    }
    public static void zzero$set( MemorySegment seg, double x) {
        FITSfile.zzero$VH.set(seg, x);
    }
    public static double zzero$get(MemorySegment seg, long index) {
        return (double)FITSfile.zzero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zzero$set(MemorySegment seg, long index, double x) {
        FITSfile.zzero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_bscale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_bscale"));
    public static VarHandle cn_bscale$VH() {
        return FITSfile.cn_bscale$VH;
    }
    public static double cn_bscale$get(MemorySegment seg) {
        return (double)FITSfile.cn_bscale$VH.get(seg);
    }
    public static void cn_bscale$set( MemorySegment seg, double x) {
        FITSfile.cn_bscale$VH.set(seg, x);
    }
    public static double cn_bscale$get(MemorySegment seg, long index) {
        return (double)FITSfile.cn_bscale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_bscale$set(MemorySegment seg, long index, double x) {
        FITSfile.cn_bscale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_bzero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_bzero"));
    public static VarHandle cn_bzero$VH() {
        return FITSfile.cn_bzero$VH;
    }
    public static double cn_bzero$get(MemorySegment seg) {
        return (double)FITSfile.cn_bzero$VH.get(seg);
    }
    public static void cn_bzero$set( MemorySegment seg, double x) {
        FITSfile.cn_bzero$VH.set(seg, x);
    }
    public static double cn_bzero$get(MemorySegment seg, long index) {
        return (double)FITSfile.cn_bzero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_bzero$set(MemorySegment seg, long index, double x) {
        FITSfile.cn_bzero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cn_actual_bzero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cn_actual_bzero"));
    public static VarHandle cn_actual_bzero$VH() {
        return FITSfile.cn_actual_bzero$VH;
    }
    public static double cn_actual_bzero$get(MemorySegment seg) {
        return (double)FITSfile.cn_actual_bzero$VH.get(seg);
    }
    public static void cn_actual_bzero$set( MemorySegment seg, double x) {
        FITSfile.cn_actual_bzero$VH.set(seg, x);
    }
    public static double cn_actual_bzero$get(MemorySegment seg, long index) {
        return (double)FITSfile.cn_actual_bzero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cn_actual_bzero$set(MemorySegment seg, long index, double x) {
        FITSfile.cn_actual_bzero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zblank$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("zblank"));
    public static VarHandle zblank$VH() {
        return FITSfile.zblank$VH;
    }
    public static int zblank$get(MemorySegment seg) {
        return (int)FITSfile.zblank$VH.get(seg);
    }
    public static void zblank$set( MemorySegment seg, int x) {
        FITSfile.zblank$VH.set(seg, x);
    }
    public static int zblank$get(MemorySegment seg, long index) {
        return (int)FITSfile.zblank$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zblank$set(MemorySegment seg, long index, int x) {
        FITSfile.zblank$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rice_blocksize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rice_blocksize"));
    public static VarHandle rice_blocksize$VH() {
        return FITSfile.rice_blocksize$VH;
    }
    public static int rice_blocksize$get(MemorySegment seg) {
        return (int)FITSfile.rice_blocksize$VH.get(seg);
    }
    public static void rice_blocksize$set( MemorySegment seg, int x) {
        FITSfile.rice_blocksize$VH.set(seg, x);
    }
    public static int rice_blocksize$get(MemorySegment seg, long index) {
        return (int)FITSfile.rice_blocksize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rice_blocksize$set(MemorySegment seg, long index, int x) {
        FITSfile.rice_blocksize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rice_bytepix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rice_bytepix"));
    public static VarHandle rice_bytepix$VH() {
        return FITSfile.rice_bytepix$VH;
    }
    public static int rice_bytepix$get(MemorySegment seg) {
        return (int)FITSfile.rice_bytepix$VH.get(seg);
    }
    public static void rice_bytepix$set( MemorySegment seg, int x) {
        FITSfile.rice_bytepix$VH.set(seg, x);
    }
    public static int rice_bytepix$get(MemorySegment seg, long index) {
        return (int)FITSfile.rice_bytepix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rice_bytepix$set(MemorySegment seg, long index, int x) {
        FITSfile.rice_bytepix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hcomp_scale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hcomp_scale"));
    public static VarHandle hcomp_scale$VH() {
        return FITSfile.hcomp_scale$VH;
    }
    public static float hcomp_scale$get(MemorySegment seg) {
        return (float)FITSfile.hcomp_scale$VH.get(seg);
    }
    public static void hcomp_scale$set( MemorySegment seg, float x) {
        FITSfile.hcomp_scale$VH.set(seg, x);
    }
    public static float hcomp_scale$get(MemorySegment seg, long index) {
        return (float)FITSfile.hcomp_scale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hcomp_scale$set(MemorySegment seg, long index, float x) {
        FITSfile.hcomp_scale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hcomp_smooth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hcomp_smooth"));
    public static VarHandle hcomp_smooth$VH() {
        return FITSfile.hcomp_smooth$VH;
    }
    public static int hcomp_smooth$get(MemorySegment seg) {
        return (int)FITSfile.hcomp_smooth$VH.get(seg);
    }
    public static void hcomp_smooth$set( MemorySegment seg, int x) {
        FITSfile.hcomp_smooth$VH.set(seg, x);
    }
    public static int hcomp_smooth$get(MemorySegment seg, long index) {
        return (int)FITSfile.hcomp_smooth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hcomp_smooth$set(MemorySegment seg, long index, int x) {
        FITSfile.hcomp_smooth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tilerow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tilerow"));
    public static VarHandle tilerow$VH() {
        return FITSfile.tilerow$VH;
    }
    public static MemoryAddress tilerow$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tilerow$VH.get(seg);
    }
    public static void tilerow$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.tilerow$VH.set(seg, x);
    }
    public static MemoryAddress tilerow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tilerow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tilerow$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.tilerow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiledatasize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tiledatasize"));
    public static VarHandle tiledatasize$VH() {
        return FITSfile.tiledatasize$VH;
    }
    public static MemoryAddress tiledatasize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tiledatasize$VH.get(seg);
    }
    public static void tiledatasize$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.tiledatasize$VH.set(seg, x);
    }
    public static MemoryAddress tiledatasize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tiledatasize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiledatasize$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.tiledatasize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiletype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tiletype"));
    public static VarHandle tiletype$VH() {
        return FITSfile.tiletype$VH;
    }
    public static MemoryAddress tiletype$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tiletype$VH.get(seg);
    }
    public static void tiletype$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.tiletype$VH.set(seg, x);
    }
    public static MemoryAddress tiletype$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tiletype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiletype$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.tiletype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiledata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tiledata"));
    public static VarHandle tiledata$VH() {
        return FITSfile.tiledata$VH;
    }
    public static MemoryAddress tiledata$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tiledata$VH.get(seg);
    }
    public static void tiledata$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.tiledata$VH.set(seg, x);
    }
    public static MemoryAddress tiledata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tiledata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiledata$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.tiledata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tilenullarray$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tilenullarray"));
    public static VarHandle tilenullarray$VH() {
        return FITSfile.tilenullarray$VH;
    }
    public static MemoryAddress tilenullarray$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tilenullarray$VH.get(seg);
    }
    public static void tilenullarray$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.tilenullarray$VH.set(seg, x);
    }
    public static MemoryAddress tilenullarray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tilenullarray$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tilenullarray$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.tilenullarray$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tileanynull$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tileanynull"));
    public static VarHandle tileanynull$VH() {
        return FITSfile.tileanynull$VH;
    }
    public static MemoryAddress tileanynull$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tileanynull$VH.get(seg);
    }
    public static void tileanynull$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.tileanynull$VH.set(seg, x);
    }
    public static MemoryAddress tileanynull$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.tileanynull$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tileanynull$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.tileanynull$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iobuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iobuffer"));
    public static VarHandle iobuffer$VH() {
        return FITSfile.iobuffer$VH;
    }
    public static MemoryAddress iobuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)FITSfile.iobuffer$VH.get(seg);
    }
    public static void iobuffer$set( MemorySegment seg, MemoryAddress x) {
        FITSfile.iobuffer$VH.set(seg, x);
    }
    public static MemoryAddress iobuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)FITSfile.iobuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iobuffer$set(MemorySegment seg, long index, MemoryAddress x) {
        FITSfile.iobuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment bufrecnum$slice(MemorySegment seg) {
        return seg.asSlice(1296, 160);
    }
    public static MemorySegment dirty$slice(MemorySegment seg) {
        return seg.asSlice(1456, 160);
    }
    public static MemorySegment ageindex$slice(MemorySegment seg) {
        return seg.asSlice(1616, 160);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


