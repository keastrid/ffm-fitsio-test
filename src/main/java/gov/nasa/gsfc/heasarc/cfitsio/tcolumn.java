// Generated by jextract

package gov.nasa.gsfc.heasarc.cfitsio;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tcolumn {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(70, Constants$root.C_CHAR$LAYOUT).withName("ttype"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG_LONG$LAYOUT.withName("tbcol"),
        Constants$root.C_LONG$LAYOUT.withName("tdatatype"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("trepeat"),
        Constants$root.C_DOUBLE$LAYOUT.withName("tscale"),
        Constants$root.C_DOUBLE$LAYOUT.withName("tzero"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("tnull"),
        MemoryLayout.sequenceLayout(20, Constants$root.C_CHAR$LAYOUT).withName("strnull"),
        MemoryLayout.sequenceLayout(10, Constants$root.C_CHAR$LAYOUT).withName("tform"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("twidth"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return tcolumn.$struct$LAYOUT;
    }
    public static MemorySegment ttype$slice(MemorySegment seg) {
        return seg.asSlice(0, 70);
    }
    static final VarHandle tbcol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tbcol"));
    public static VarHandle tbcol$VH() {
        return tcolumn.tbcol$VH;
    }
    public static long tbcol$get(MemorySegment seg) {
        return (long)tcolumn.tbcol$VH.get(seg);
    }
    public static void tbcol$set( MemorySegment seg, long x) {
        tcolumn.tbcol$VH.set(seg, x);
    }
    public static long tbcol$get(MemorySegment seg, long index) {
        return (long)tcolumn.tbcol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tbcol$set(MemorySegment seg, long index, long x) {
        tcolumn.tbcol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tdatatype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tdatatype"));
    public static VarHandle tdatatype$VH() {
        return tcolumn.tdatatype$VH;
    }
    public static int tdatatype$get(MemorySegment seg) {
        return (int)tcolumn.tdatatype$VH.get(seg);
    }
    public static void tdatatype$set( MemorySegment seg, int x) {
        tcolumn.tdatatype$VH.set(seg, x);
    }
    public static int tdatatype$get(MemorySegment seg, long index) {
        return (int)tcolumn.tdatatype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tdatatype$set(MemorySegment seg, long index, int x) {
        tcolumn.tdatatype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle trepeat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("trepeat"));
    public static VarHandle trepeat$VH() {
        return tcolumn.trepeat$VH;
    }
    public static long trepeat$get(MemorySegment seg) {
        return (long)tcolumn.trepeat$VH.get(seg);
    }
    public static void trepeat$set( MemorySegment seg, long x) {
        tcolumn.trepeat$VH.set(seg, x);
    }
    public static long trepeat$get(MemorySegment seg, long index) {
        return (long)tcolumn.trepeat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void trepeat$set(MemorySegment seg, long index, long x) {
        tcolumn.trepeat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tscale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tscale"));
    public static VarHandle tscale$VH() {
        return tcolumn.tscale$VH;
    }
    public static double tscale$get(MemorySegment seg) {
        return (double)tcolumn.tscale$VH.get(seg);
    }
    public static void tscale$set( MemorySegment seg, double x) {
        tcolumn.tscale$VH.set(seg, x);
    }
    public static double tscale$get(MemorySegment seg, long index) {
        return (double)tcolumn.tscale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tscale$set(MemorySegment seg, long index, double x) {
        tcolumn.tscale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tzero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tzero"));
    public static VarHandle tzero$VH() {
        return tcolumn.tzero$VH;
    }
    public static double tzero$get(MemorySegment seg) {
        return (double)tcolumn.tzero$VH.get(seg);
    }
    public static void tzero$set( MemorySegment seg, double x) {
        tcolumn.tzero$VH.set(seg, x);
    }
    public static double tzero$get(MemorySegment seg, long index) {
        return (double)tcolumn.tzero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tzero$set(MemorySegment seg, long index, double x) {
        tcolumn.tzero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tnull$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tnull"));
    public static VarHandle tnull$VH() {
        return tcolumn.tnull$VH;
    }
    public static long tnull$get(MemorySegment seg) {
        return (long)tcolumn.tnull$VH.get(seg);
    }
    public static void tnull$set( MemorySegment seg, long x) {
        tcolumn.tnull$VH.set(seg, x);
    }
    public static long tnull$get(MemorySegment seg, long index) {
        return (long)tcolumn.tnull$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tnull$set(MemorySegment seg, long index, long x) {
        tcolumn.tnull$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment strnull$slice(MemorySegment seg) {
        return seg.asSlice(120, 20);
    }
    public static MemorySegment tform$slice(MemorySegment seg) {
        return seg.asSlice(140, 10);
    }
    static final VarHandle twidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("twidth"));
    public static VarHandle twidth$VH() {
        return tcolumn.twidth$VH;
    }
    public static int twidth$get(MemorySegment seg) {
        return (int)tcolumn.twidth$VH.get(seg);
    }
    public static void twidth$set( MemorySegment seg, int x) {
        tcolumn.twidth$VH.set(seg, x);
    }
    public static int twidth$get(MemorySegment seg, long index) {
        return (int)tcolumn.twidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void twidth$set(MemorySegment seg, long index, int x) {
        tcolumn.twidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


