// Generated by jextract

package gov.nasa.gsfc.heasarc.cfitsio;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class fpack_h_1 {

    public static MethodHandle _strtoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$105._strtoul_l$MH,"_strtoul_l");
    }
    public static int _strtoul_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$105.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoull_l$MH() {
        return RuntimeHelper.requireNonNull(constants$105._strtoull_l$MH,"_strtoull_l");
    }
    public static long _strtoull_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoull_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$105._strtoi64$MH,"_strtoi64");
    }
    public static long _strtoi64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _strtoi64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$106._strtoi64_l$MH,"_strtoi64_l");
    }
    public static long _strtoi64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64$MH() {
        return RuntimeHelper.requireNonNull(constants$106._strtoui64$MH,"_strtoui64");
    }
    public static long _strtoui64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _strtoui64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$106._strtoui64_l$MH,"_strtoui64_l");
    }
    public static long _strtoui64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoui64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$106._itoa_s$MH,"_itoa_s");
    }
    public static int _itoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _itoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$106._itoa$MH,"_itoa");
    }
    public static MemoryAddress _itoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _itoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$106._ltoa_s$MH,"_ltoa_s");
    }
    public static int _ltoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ltoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$107._ltoa$MH,"_ltoa");
    }
    public static MemoryAddress _ltoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ltoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$107._ultoa_s$MH,"_ultoa_s");
    }
    public static int _ultoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ultoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$107._ultoa$MH,"_ultoa");
    }
    public static MemoryAddress _ultoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ultoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$107._i64toa_s$MH,"_i64toa_s");
    }
    public static int _i64toa_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _i64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$107._i64toa$MH,"_i64toa");
    }
    public static MemoryAddress _i64toa ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _i64toa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$107._ui64toa_s$MH,"_ui64toa_s");
    }
    public static int _ui64toa_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ui64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$108._ui64toa$MH,"_ui64toa");
    }
    public static MemoryAddress _ui64toa ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ui64toa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$108._ecvt_s$MH,"_ecvt_s");
    }
    public static int _ecvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _ecvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$108._ecvt$MH,"_ecvt");
    }
    public static MemoryAddress _ecvt ( double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$108._fcvt_s$MH,"_fcvt_s");
    }
    public static int _fcvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _fcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$108._fcvt$MH,"_fcvt");
    }
    public static MemoryAddress _fcvt ( double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$108._gcvt_s$MH,"_gcvt_s");
    }
    public static int _gcvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _DigitCount) {
        var mh$ = _gcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$109._gcvt$MH,"_gcvt");
    }
    public static MemoryAddress _gcvt ( double _Value,  int _DigitCount,  Addressable _Buffer) {
        var mh$ = _gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_func$MH() {
        return RuntimeHelper.requireNonNull(constants$109.___mb_cur_max_func$MH,"___mb_cur_max_func");
    }
    public static int ___mb_cur_max_func () {
        var mh$ = ___mb_cur_max_func$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_l_func$MH() {
        return RuntimeHelper.requireNonNull(constants$109.___mb_cur_max_l_func$MH,"___mb_cur_max_l_func");
    }
    public static int ___mb_cur_max_l_func ( Addressable _Locale) {
        var mh$ = ___mb_cur_max_l_func$MH();
        try {
            return (int)mh$.invokeExact(_Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$109.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable _Ch,  long _MaxCount) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mblen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$109._mblen_l$MH,"_mblen_l");
    }
    public static int _mblen_l ( Addressable _Ch,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mblen_l$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen$MH() {
        return RuntimeHelper.requireNonNull(constants$109._mbstrlen$MH,"_mbstrlen");
    }
    public static long _mbstrlen ( Addressable _String) {
        var mh$ = _mbstrlen$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$110._mbstrlen_l$MH,"_mbstrlen_l");
    }
    public static long _mbstrlen_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _mbstrlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$110._mbstrnlen$MH,"_mbstrnlen");
    }
    public static long _mbstrnlen ( Addressable _String,  long _MaxCount) {
        var mh$ = _mbstrnlen$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$110._mbstrnlen_l$MH,"_mbstrnlen_l");
    }
    public static long _mbstrnlen_l ( Addressable _String,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstrnlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$110.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable _DstCh,  Addressable _SrcCh,  long _SrcSizeInBytes) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbtowc_l$MH() {
        return RuntimeHelper.requireNonNull(constants$110._mbtowc_l$MH,"_mbtowc_l");
    }
    public static int _mbtowc_l ( Addressable _DstCh,  Addressable _SrcCh,  long _SrcSizeInBytes,  Addressable _Locale) {
        var mh$ = _mbtowc_l$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$110.mbstowcs_s$MH,"mbstowcs_s");
    }
    public static int mbstowcs_s ( Addressable _PtNumOfCharConverted,  Addressable _DstBuf,  long _SizeInWords,  Addressable _SrcBuf,  long _MaxCount) {
        var mh$ = mbstowcs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$111.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable _Dest,  Addressable _Source,  long _MaxCount) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$111._mbstowcs_s_l$MH,"_mbstowcs_s_l");
    }
    public static int _mbstowcs_s_l ( Addressable _PtNumOfCharConverted,  Addressable _DstBuf,  long _SizeInWords,  Addressable _SrcBuf,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstowcs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$111._mbstowcs_l$MH,"_mbstowcs_l");
    }
    public static long _mbstowcs_l ( Addressable _Dest,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstowcs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$111.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable _MbCh,  short _WCh) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_l$MH() {
        return RuntimeHelper.requireNonNull(constants$111._wctomb_l$MH,"_wctomb_l");
    }
    public static int _wctomb_l ( Addressable _MbCh,  short _WCh,  Addressable _Locale) {
        var mh$ = _wctomb_l$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb_s$MH() {
        return RuntimeHelper.requireNonNull(constants$111.wctomb_s$MH,"wctomb_s");
    }
    public static int wctomb_s ( Addressable _SizeConverted,  Addressable _MbCh,  long _SizeInBytes,  short _WCh) {
        var mh$ = wctomb_s$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$112._wctomb_s_l$MH,"_wctomb_s_l");
    }
    public static int _wctomb_s_l ( Addressable _SizeConverted,  Addressable _MbCh,  long _SizeInBytes,  short _WCh,  Addressable _Locale) {
        var mh$ = _wctomb_s_l$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$112.wcstombs_s$MH,"wcstombs_s");
    }
    public static int wcstombs_s ( Addressable _PtNumOfCharConverted,  Addressable _Dst,  long _DstSizeInBytes,  Addressable _Src,  long _MaxCountInBytes) {
        var mh$ = wcstombs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$112.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable _Dest,  Addressable _Source,  long _MaxCount) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$112._wcstombs_s_l$MH,"_wcstombs_s_l");
    }
    public static int _wcstombs_s_l ( Addressable _PtNumOfCharConverted,  Addressable _Dst,  long _DstSizeInBytes,  Addressable _Src,  long _MaxCountInBytes,  Addressable _Locale) {
        var mh$ = _wcstombs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$112._wcstombs_l$MH,"_wcstombs_l");
    }
    public static long _wcstombs_l ( Addressable _Dest,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _wcstombs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fullpath$MH() {
        return RuntimeHelper.requireNonNull(constants$112._fullpath$MH,"_fullpath");
    }
    public static MemoryAddress _fullpath ( Addressable _Buffer,  Addressable _Path,  long _BufferCount) {
        var mh$ = _fullpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$113._makepath_s$MH,"_makepath_s");
    }
    public static int _makepath_s ( Addressable _Buffer,  long _BufferCount,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _makepath_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath$MH() {
        return RuntimeHelper.requireNonNull(constants$113._makepath$MH,"_makepath");
    }
    public static void _makepath ( Addressable _Buffer,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _makepath$MH();
        try {
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath$MH() {
        return RuntimeHelper.requireNonNull(constants$113._splitpath$MH,"_splitpath");
    }
    public static void _splitpath ( Addressable _FullPath,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _splitpath$MH();
        try {
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$113._splitpath_s$MH,"_splitpath_s");
    }
    public static int _splitpath_s ( Addressable _FullPath,  Addressable _Drive,  long _DriveCount,  Addressable _Dir,  long _DirCount,  Addressable _Filename,  long _FilenameCount,  Addressable _Ext,  long _ExtCount) {
        var mh$ = _splitpath_s$MH();
        try {
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$113.getenv_s$MH,"getenv_s");
    }
    public static int getenv_s ( Addressable _RequiredCount,  Addressable _Buffer,  long _BufferCount,  Addressable _VarName) {
        var mh$ = getenv_s$MH();
        try {
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argc$MH() {
        return RuntimeHelper.requireNonNull(constants$113.__p___argc$MH,"__p___argc");
    }
    public static MemoryAddress __p___argc () {
        var mh$ = __p___argc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__p___argv$MH,"__p___argv");
    }
    public static MemoryAddress __p___argv () {
        var mh$ = __p___argv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___wargv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__p___wargv$MH,"__p___wargv");
    }
    public static MemoryAddress __p___wargv () {
        var mh$ = __p___wargv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__environ$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__p__environ$MH,"__p__environ");
    }
    public static MemoryAddress __p__environ () {
        var mh$ = __p__environ$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__wenviron$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__p__wenviron$MH,"__p__wenviron");
    }
    public static MemoryAddress __p__wenviron () {
        var mh$ = __p__wenviron$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable _VarName) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dupenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$114._dupenv_s$MH,"_dupenv_s");
    }
    public static int _dupenv_s ( Addressable _Buffer,  Addressable _BufferCount,  Addressable _VarName) {
        var mh$ = _dupenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$115.system$MH,"system");
    }
    public static int system ( Addressable _Command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$115._putenv$MH,"_putenv");
    }
    public static int _putenv ( Addressable _EnvString) {
        var mh$ = _putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$115._putenv_s$MH,"_putenv_s");
    }
    public static int _putenv_s ( Addressable _Name,  Addressable _Value) {
        var mh$ = _putenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$115._searchenv_s$MH,"_searchenv_s");
    }
    public static int _searchenv_s ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer,  long _BufferCount) {
        var mh$ = _searchenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv$MH() {
        return RuntimeHelper.requireNonNull(constants$115._searchenv$MH,"_searchenv");
    }
    public static void _searchenv ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer) {
        var mh$ = _searchenv$MH();
        try {
            mh$.invokeExact(_Filename, _VarName, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _seterrormode$MH() {
        return RuntimeHelper.requireNonNull(constants$115._seterrormode$MH,"_seterrormode");
    }
    public static void _seterrormode ( int _Mode) {
        var mh$ = _seterrormode$MH();
        try {
            mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _beep$MH() {
        return RuntimeHelper.requireNonNull(constants$116._beep$MH,"_beep");
    }
    public static void _beep ( int _Frequency,  int _Duration) {
        var mh$ = _beep$MH();
        try {
            mh$.invokeExact(_Frequency, _Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$116._sleep$MH,"_sleep");
    }
    public static void _sleep ( int _Duration) {
        var mh$ = _sleep$MH();
        try {
            mh$.invokeExact(_Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$116.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$116.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$116.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double _Value,  int _DigitCount,  Addressable _DstBuf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _DstBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$116.itoa$MH,"itoa");
    }
    public static MemoryAddress itoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = itoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$117.ltoa$MH,"ltoa");
    }
    public static MemoryAddress ltoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = ltoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$117.swab$MH,"swab");
    }
    public static void swab ( Addressable _Buf1,  Addressable _Buf2,  int _SizeInBytes) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$117.ultoa$MH,"ultoa");
    }
    public static MemoryAddress ultoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = ultoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$117.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable _EnvString) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle onexit$MH() {
        return RuntimeHelper.requireNonNull(constants$117.onexit$MH,"onexit");
    }
    public static MemoryAddress onexit ( Addressable _Func) {
        var mh$ = onexit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong LONGLONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle fits_read_wcstab$MH() {
        return RuntimeHelper.requireNonNull(constants$117.fits_read_wcstab$MH,"fits_read_wcstab");
    }
    public static int fits_read_wcstab ( Addressable fptr,  int nwtb,  Addressable wtb,  Addressable status) {
        var mh$ = fits_read_wcstab$MH();
        try {
            return (int)mh$.invokeExact(fptr, nwtb, wtb, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFITS2Unit$MH() {
        return RuntimeHelper.requireNonNull(constants$118.CFITS2Unit$MH,"CFITS2Unit");
    }
    public static int CFITS2Unit ( Addressable fptr) {
        var mh$ = CFITS2Unit$MH();
        try {
            return (int)mh$.invokeExact(fptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CUnit2FITS$MH() {
        return RuntimeHelper.requireNonNull(constants$118.CUnit2FITS$MH,"CUnit2FITS");
    }
    public static MemoryAddress CUnit2FITS ( int unit) {
        var mh$ = CUnit2FITS$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(unit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_token$MH() {
        return RuntimeHelper.requireNonNull(constants$118.fits_get_token$MH,"fits_get_token");
    }
    public static int fits_get_token ( Addressable ptr,  Addressable delimiter,  Addressable token,  Addressable isanumber) {
        var mh$ = fits_get_token$MH();
        try {
            return (int)mh$.invokeExact(ptr, delimiter, token, isanumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_token2$MH() {
        return RuntimeHelper.requireNonNull(constants$118.fits_get_token2$MH,"fits_get_token2");
    }
    public static int fits_get_token2 ( Addressable ptr,  Addressable delimiter,  Addressable token,  Addressable isanumber,  Addressable status) {
        var mh$ = fits_get_token2$MH();
        try {
            return (int)mh$.invokeExact(ptr, delimiter, token, isanumber, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_split_names$MH() {
        return RuntimeHelper.requireNonNull(constants$118.fits_split_names$MH,"fits_split_names");
    }
    public static MemoryAddress fits_split_names ( Addressable list) {
        var mh$ = fits_split_names$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffiurl$MH() {
        return RuntimeHelper.requireNonNull(constants$118.ffiurl$MH,"ffiurl");
    }
    public static int ffiurl ( Addressable url,  Addressable urltype,  Addressable infile,  Addressable outfile,  Addressable extspec,  Addressable rowfilter,  Addressable binspec,  Addressable colspec,  Addressable status) {
        var mh$ = ffiurl$MH();
        try {
            return (int)mh$.invokeExact(url, urltype, infile, outfile, extspec, rowfilter, binspec, colspec, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffifile$MH() {
        return RuntimeHelper.requireNonNull(constants$119.ffifile$MH,"ffifile");
    }
    public static int ffifile ( Addressable url,  Addressable urltype,  Addressable infile,  Addressable outfile,  Addressable extspec,  Addressable rowfilter,  Addressable binspec,  Addressable colspec,  Addressable pixfilter,  Addressable status) {
        var mh$ = ffifile$MH();
        try {
            return (int)mh$.invokeExact(url, urltype, infile, outfile, extspec, rowfilter, binspec, colspec, pixfilter, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffifile2$MH() {
        return RuntimeHelper.requireNonNull(constants$119.ffifile2$MH,"ffifile2");
    }
    public static int ffifile2 ( Addressable url,  Addressable urltype,  Addressable infile,  Addressable outfile,  Addressable extspec,  Addressable rowfilter,  Addressable binspec,  Addressable colspec,  Addressable pixfilter,  Addressable compspec,  Addressable status) {
        var mh$ = ffifile2$MH();
        try {
            return (int)mh$.invokeExact(url, urltype, infile, outfile, extspec, rowfilter, binspec, colspec, pixfilter, compspec, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrtnm$MH() {
        return RuntimeHelper.requireNonNull(constants$119.ffrtnm$MH,"ffrtnm");
    }
    public static int ffrtnm ( Addressable url,  Addressable rootname,  Addressable status) {
        var mh$ = ffrtnm$MH();
        try {
            return (int)mh$.invokeExact(url, rootname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffexist$MH() {
        return RuntimeHelper.requireNonNull(constants$119.ffexist$MH,"ffexist");
    }
    public static int ffexist ( Addressable infile,  Addressable exists,  Addressable status) {
        var mh$ = ffexist$MH();
        try {
            return (int)mh$.invokeExact(infile, exists, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffexts$MH() {
        return RuntimeHelper.requireNonNull(constants$119.ffexts$MH,"ffexts");
    }
    public static int ffexts ( Addressable extspec,  Addressable extnum,  Addressable extname,  Addressable extvers,  Addressable hdutype,  Addressable colname,  Addressable rowexpress,  Addressable status) {
        var mh$ = ffexts$MH();
        try {
            return (int)mh$.invokeExact(extspec, extnum, extname, extvers, hdutype, colname, rowexpress, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffextn$MH() {
        return RuntimeHelper.requireNonNull(constants$119.ffextn$MH,"ffextn");
    }
    public static int ffextn ( Addressable url,  Addressable extension_num,  Addressable status) {
        var mh$ = ffextn$MH();
        try {
            return (int)mh$.invokeExact(url, extension_num, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffurlt$MH() {
        return RuntimeHelper.requireNonNull(constants$120.ffurlt$MH,"ffurlt");
    }
    public static int ffurlt ( Addressable fptr,  Addressable urlType,  Addressable status) {
        var mh$ = ffurlt$MH();
        try {
            return (int)mh$.invokeExact(fptr, urlType, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffbins$MH() {
        return RuntimeHelper.requireNonNull(constants$120.ffbins$MH,"ffbins");
    }
    public static int ffbins ( Addressable binspec,  Addressable imagetype,  Addressable haxis,  Addressable colname,  Addressable minin,  Addressable maxin,  Addressable binsizein,  Addressable minname,  Addressable maxname,  Addressable binname,  Addressable weight,  Addressable wtname,  Addressable recip,  Addressable status) {
        var mh$ = ffbins$MH();
        try {
            return (int)mh$.invokeExact(binspec, imagetype, haxis, colname, minin, maxin, binsizein, minname, maxname, binname, weight, wtname, recip, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffbinr$MH() {
        return RuntimeHelper.requireNonNull(constants$120.ffbinr$MH,"ffbinr");
    }
    public static int ffbinr ( Addressable binspec,  Addressable colname,  Addressable minin,  Addressable maxin,  Addressable binsizein,  Addressable minname,  Addressable maxname,  Addressable binname,  Addressable status) {
        var mh$ = ffbinr$MH();
        try {
            return (int)mh$.invokeExact(binspec, colname, minin, maxin, binsizein, minname, maxname, binname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_copy_cell2image$MH() {
        return RuntimeHelper.requireNonNull(constants$120.fits_copy_cell2image$MH,"fits_copy_cell2image");
    }
    public static int fits_copy_cell2image ( Addressable fptr,  Addressable newptr,  Addressable colname,  int rownum,  Addressable status) {
        var mh$ = fits_copy_cell2image$MH();
        try {
            return (int)mh$.invokeExact(fptr, newptr, colname, rownum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_copy_image2cell$MH() {
        return RuntimeHelper.requireNonNull(constants$120.fits_copy_image2cell$MH,"fits_copy_image2cell");
    }
    public static int fits_copy_image2cell ( Addressable fptr,  Addressable newptr,  Addressable colname,  int rownum,  int copykeyflag,  Addressable status) {
        var mh$ = fits_copy_image2cell$MH();
        try {
            return (int)mh$.invokeExact(fptr, newptr, colname, rownum, copykeyflag, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_copy_pixlist2image$MH() {
        return RuntimeHelper.requireNonNull(constants$120.fits_copy_pixlist2image$MH,"fits_copy_pixlist2image");
    }
    public static int fits_copy_pixlist2image ( Addressable infptr,  Addressable outfptr,  int firstkey,  int naxis,  Addressable colnum,  Addressable status) {
        var mh$ = fits_copy_pixlist2image$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, firstkey, naxis, colnum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffimport_file$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ffimport_file$MH,"ffimport_file");
    }
    public static int ffimport_file ( Addressable filename,  Addressable contents,  Addressable status) {
        var mh$ = ffimport_file$MH();
        try {
            return (int)mh$.invokeExact(filename, contents, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrwrg$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ffrwrg$MH,"ffrwrg");
    }
    public static int ffrwrg ( Addressable rowlist,  long maxrows,  int maxranges,  Addressable numranges,  Addressable minrow,  Addressable maxrow,  Addressable status) {
        var mh$ = ffrwrg$MH();
        try {
            return (int)mh$.invokeExact(rowlist, maxrows, maxranges, numranges, minrow, maxrow, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrwrgll$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ffrwrgll$MH,"ffrwrgll");
    }
    public static int ffrwrgll ( Addressable rowlist,  long maxrows,  int maxranges,  Addressable numranges,  Addressable minrow,  Addressable maxrow,  Addressable status) {
        var mh$ = ffrwrgll$MH();
        try {
            return (int)mh$.invokeExact(rowlist, maxrows, maxranges, numranges, minrow, maxrow, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_init_cfitsio$MH() {
        return RuntimeHelper.requireNonNull(constants$121.fits_init_cfitsio$MH,"fits_init_cfitsio");
    }
    public static int fits_init_cfitsio () {
        var mh$ = fits_init_cfitsio$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffomem$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ffomem$MH,"ffomem");
    }
    public static int ffomem ( Addressable fptr,  Addressable name,  int mode,  Addressable buffptr,  Addressable buffsize,  long deltasize,  Addressable mem_realloc,  Addressable status) {
        var mh$ = ffomem$MH();
        try {
            return (int)mh$.invokeExact(fptr, name, mode, buffptr, buffsize, deltasize, mem_realloc, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffopen$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ffopen$MH,"ffopen");
    }
    public static int ffopen ( Addressable fptr,  Addressable filename,  int iomode,  Addressable status) {
        var mh$ = ffopen$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, iomode, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffopentest$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ffopentest$MH,"ffopentest");
    }
    public static int ffopentest ( int soname,  Addressable fptr,  Addressable filename,  int iomode,  Addressable status) {
        var mh$ = ffopentest$MH();
        try {
            return (int)mh$.invokeExact(soname, fptr, filename, iomode, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdopn$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ffdopn$MH,"ffdopn");
    }
    public static int ffdopn ( Addressable fptr,  Addressable filename,  int iomode,  Addressable status) {
        var mh$ = ffdopn$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, iomode, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffeopn$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ffeopn$MH,"ffeopn");
    }
    public static int ffeopn ( Addressable fptr,  Addressable filename,  int iomode,  Addressable extlist,  Addressable hdutype,  Addressable status) {
        var mh$ = ffeopn$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, iomode, extlist, hdutype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftopn$MH() {
        return RuntimeHelper.requireNonNull(constants$122.fftopn$MH,"fftopn");
    }
    public static int fftopn ( Addressable fptr,  Addressable filename,  int iomode,  Addressable status) {
        var mh$ = fftopn$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, iomode, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffiopn$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ffiopn$MH,"ffiopn");
    }
    public static int ffiopn ( Addressable fptr,  Addressable filename,  int iomode,  Addressable status) {
        var mh$ = ffiopn$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, iomode, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdkopn$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ffdkopn$MH,"ffdkopn");
    }
    public static int ffdkopn ( Addressable fptr,  Addressable filename,  int iomode,  Addressable status) {
        var mh$ = ffdkopn$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, iomode, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffreopen$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ffreopen$MH,"ffreopen");
    }
    public static int ffreopen ( Addressable openfptr,  Addressable newfptr,  Addressable status) {
        var mh$ = ffreopen$MH();
        try {
            return (int)mh$.invokeExact(openfptr, newfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffinit$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ffinit$MH,"ffinit");
    }
    public static int ffinit ( Addressable fptr,  Addressable filename,  Addressable status) {
        var mh$ = ffinit$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdkinit$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ffdkinit$MH,"ffdkinit");
    }
    public static int ffdkinit ( Addressable fptr,  Addressable filename,  Addressable status) {
        var mh$ = ffdkinit$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffimem$MH() {
        return RuntimeHelper.requireNonNull(constants$124.ffimem$MH,"ffimem");
    }
    public static int ffimem ( Addressable fptr,  Addressable buffptr,  Addressable buffsize,  long deltasize,  Addressable mem_realloc,  Addressable status) {
        var mh$ = ffimem$MH();
        try {
            return (int)mh$.invokeExact(fptr, buffptr, buffsize, deltasize, mem_realloc, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftplt$MH() {
        return RuntimeHelper.requireNonNull(constants$124.fftplt$MH,"fftplt");
    }
    public static int fftplt ( Addressable fptr,  Addressable filename,  Addressable tempname,  Addressable status) {
        var mh$ = fftplt$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, tempname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffflus$MH() {
        return RuntimeHelper.requireNonNull(constants$124.ffflus$MH,"ffflus");
    }
    public static int ffflus ( Addressable fptr,  Addressable status) {
        var mh$ = ffflus$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffflsh$MH() {
        return RuntimeHelper.requireNonNull(constants$124.ffflsh$MH,"ffflsh");
    }
    public static int ffflsh ( Addressable fptr,  int clearbuf,  Addressable status) {
        var mh$ = ffflsh$MH();
        try {
            return (int)mh$.invokeExact(fptr, clearbuf, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffclos$MH() {
        return RuntimeHelper.requireNonNull(constants$124.ffclos$MH,"ffclos");
    }
    public static int ffclos ( Addressable fptr,  Addressable status) {
        var mh$ = ffclos$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdelt$MH() {
        return RuntimeHelper.requireNonNull(constants$125.ffdelt$MH,"ffdelt");
    }
    public static int ffdelt ( Addressable fptr,  Addressable status) {
        var mh$ = ffdelt$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffflnm$MH() {
        return RuntimeHelper.requireNonNull(constants$125.ffflnm$MH,"ffflnm");
    }
    public static int ffflnm ( Addressable fptr,  Addressable filename,  Addressable status) {
        var mh$ = ffflnm$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffflmd$MH() {
        return RuntimeHelper.requireNonNull(constants$125.ffflmd$MH,"ffflmd");
    }
    public static int ffflmd ( Addressable fptr,  Addressable filemode,  Addressable status) {
        var mh$ = ffflmd$MH();
        try {
            return (int)mh$.invokeExact(fptr, filemode, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_delete_iraf_file$MH() {
        return RuntimeHelper.requireNonNull(constants$125.fits_delete_iraf_file$MH,"fits_delete_iraf_file");
    }
    public static int fits_delete_iraf_file ( Addressable filename,  Addressable status) {
        var mh$ = fits_delete_iraf_file$MH();
        try {
            return (int)mh$.invokeExact(filename, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffvers$MH() {
        return RuntimeHelper.requireNonNull(constants$125.ffvers$MH,"ffvers");
    }
    public static float ffvers ( Addressable version) {
        var mh$ = ffvers$MH();
        try {
            return (float)mh$.invokeExact(version);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffupch$MH() {
        return RuntimeHelper.requireNonNull(constants$125.ffupch$MH,"ffupch");
    }
    public static void ffupch ( Addressable string) {
        var mh$ = ffupch$MH();
        try {
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgerr$MH() {
        return RuntimeHelper.requireNonNull(constants$126.ffgerr$MH,"ffgerr");
    }
    public static void ffgerr ( int status,  Addressable errtext) {
        var mh$ = ffgerr$MH();
        try {
            mh$.invokeExact(status, errtext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$126.ffpmsg$MH,"ffpmsg");
    }
    public static void ffpmsg ( Addressable err_message) {
        var mh$ = ffpmsg$MH();
        try {
            mh$.invokeExact(err_message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpmrk$MH() {
        return RuntimeHelper.requireNonNull(constants$126.ffpmrk$MH,"ffpmrk");
    }
    public static void ffpmrk () {
        var mh$ = ffpmrk$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$126.ffgmsg$MH,"ffgmsg");
    }
    public static int ffgmsg ( Addressable err_message) {
        var mh$ = ffgmsg$MH();
        try {
            return (int)mh$.invokeExact(err_message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$126.ffcmsg$MH,"ffcmsg");
    }
    public static void ffcmsg () {
        var mh$ = ffcmsg$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcmrk$MH() {
        return RuntimeHelper.requireNonNull(constants$126.ffcmrk$MH,"ffcmrk");
    }
    public static void ffcmrk () {
        var mh$ = ffcmrk$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrprt$MH() {
        return RuntimeHelper.requireNonNull(constants$127.ffrprt$MH,"ffrprt");
    }
    public static void ffrprt ( Addressable stream,  int status) {
        var mh$ = ffrprt$MH();
        try {
            mh$.invokeExact(stream, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcmps$MH() {
        return RuntimeHelper.requireNonNull(constants$127.ffcmps$MH,"ffcmps");
    }
    public static void ffcmps ( Addressable templt,  Addressable colname,  int casesen,  Addressable match,  Addressable exact) {
        var mh$ = ffcmps$MH();
        try {
            mh$.invokeExact(templt, colname, casesen, match, exact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftkey$MH() {
        return RuntimeHelper.requireNonNull(constants$127.fftkey$MH,"fftkey");
    }
    public static int fftkey ( Addressable keyword,  Addressable status) {
        var mh$ = fftkey$MH();
        try {
            return (int)mh$.invokeExact(keyword, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftrec$MH() {
        return RuntimeHelper.requireNonNull(constants$127.fftrec$MH,"fftrec");
    }
    public static int fftrec ( Addressable card,  Addressable status) {
        var mh$ = fftrec$MH();
        try {
            return (int)mh$.invokeExact(card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffnchk$MH() {
        return RuntimeHelper.requireNonNull(constants$127.ffnchk$MH,"ffnchk");
    }
    public static int ffnchk ( Addressable fptr,  Addressable status) {
        var mh$ = ffnchk$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffkeyn$MH() {
        return RuntimeHelper.requireNonNull(constants$127.ffkeyn$MH,"ffkeyn");
    }
    public static int ffkeyn ( Addressable keyroot,  int value,  Addressable keyname,  Addressable status) {
        var mh$ = ffkeyn$MH();
        try {
            return (int)mh$.invokeExact(keyroot, value, keyname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffnkey$MH() {
        return RuntimeHelper.requireNonNull(constants$128.ffnkey$MH,"ffnkey");
    }
    public static int ffnkey ( int value,  Addressable keyroot,  Addressable keyname,  Addressable status) {
        var mh$ = ffnkey$MH();
        try {
            return (int)mh$.invokeExact(value, keyroot, keyname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkcl$MH() {
        return RuntimeHelper.requireNonNull(constants$128.ffgkcl$MH,"ffgkcl");
    }
    public static int ffgkcl ( Addressable card) {
        var mh$ = ffgkcl$MH();
        try {
            return (int)mh$.invokeExact(card);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdtyp$MH() {
        return RuntimeHelper.requireNonNull(constants$128.ffdtyp$MH,"ffdtyp");
    }
    public static int ffdtyp ( Addressable cval,  Addressable dtype,  Addressable status) {
        var mh$ = ffdtyp$MH();
        try {
            return (int)mh$.invokeExact(cval, dtype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffinttyp$MH() {
        return RuntimeHelper.requireNonNull(constants$128.ffinttyp$MH,"ffinttyp");
    }
    public static int ffinttyp ( Addressable cval,  Addressable datatype,  Addressable negative,  Addressable status) {
        var mh$ = ffinttyp$MH();
        try {
            return (int)mh$.invokeExact(cval, datatype, negative, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpsvc$MH() {
        return RuntimeHelper.requireNonNull(constants$128.ffpsvc$MH,"ffpsvc");
    }
    public static int ffpsvc ( Addressable card,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpsvc$MH();
        try {
            return (int)mh$.invokeExact(card, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgknm$MH() {
        return RuntimeHelper.requireNonNull(constants$128.ffgknm$MH,"ffgknm");
    }
    public static int ffgknm ( Addressable card,  Addressable name,  Addressable length,  Addressable status) {
        var mh$ = ffgknm$MH();
        try {
            return (int)mh$.invokeExact(card, name, length, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgthd$MH() {
        return RuntimeHelper.requireNonNull(constants$129.ffgthd$MH,"ffgthd");
    }
    public static int ffgthd ( Addressable tmplt,  Addressable card,  Addressable hdtype,  Addressable status) {
        var mh$ = ffgthd$MH();
        try {
            return (int)mh$.invokeExact(tmplt, card, hdtype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkky$MH() {
        return RuntimeHelper.requireNonNull(constants$129.ffmkky$MH,"ffmkky");
    }
    public static int ffmkky ( Addressable keyname,  Addressable keyval,  Addressable comm,  Addressable card,  Addressable status) {
        var mh$ = ffmkky$MH();
        try {
            return (int)mh$.invokeExact(keyname, keyval, comm, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_translate_keyword$MH() {
        return RuntimeHelper.requireNonNull(constants$129.fits_translate_keyword$MH,"fits_translate_keyword");
    }
    public static int fits_translate_keyword ( Addressable inrec,  Addressable outrec,  Addressable patterns,  int npat,  int n_value,  int n_offset,  int n_range,  Addressable pat_num,  Addressable i,  Addressable j,  Addressable m,  Addressable n,  Addressable status) {
        var mh$ = fits_translate_keyword$MH();
        try {
            return (int)mh$.invokeExact(inrec, outrec, patterns, npat, n_value, n_offset, n_range, pat_num, i, j, m, n, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_translate_keywords$MH() {
        return RuntimeHelper.requireNonNull(constants$129.fits_translate_keywords$MH,"fits_translate_keywords");
    }
    public static int fits_translate_keywords ( Addressable infptr,  Addressable outfptr,  int firstkey,  Addressable patterns,  int npat,  int n_value,  int n_offset,  int n_range,  Addressable status) {
        var mh$ = fits_translate_keywords$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, firstkey, patterns, npat, n_value, n_offset, n_range, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffasfm$MH() {
        return RuntimeHelper.requireNonNull(constants$129.ffasfm$MH,"ffasfm");
    }
    public static int ffasfm ( Addressable tform,  Addressable datacode,  Addressable width,  Addressable decim,  Addressable status) {
        var mh$ = ffasfm$MH();
        try {
            return (int)mh$.invokeExact(tform, datacode, width, decim, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffbnfm$MH() {
        return RuntimeHelper.requireNonNull(constants$129.ffbnfm$MH,"ffbnfm");
    }
    public static int ffbnfm ( Addressable tform,  Addressable datacode,  Addressable repeat,  Addressable width,  Addressable status) {
        var mh$ = ffbnfm$MH();
        try {
            return (int)mh$.invokeExact(tform, datacode, repeat, width, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffbnfmll$MH() {
        return RuntimeHelper.requireNonNull(constants$130.ffbnfmll$MH,"ffbnfmll");
    }
    public static int ffbnfmll ( Addressable tform,  Addressable datacode,  Addressable repeat,  Addressable width,  Addressable status) {
        var mh$ = ffbnfmll$MH();
        try {
            return (int)mh$.invokeExact(tform, datacode, repeat, width, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgabc$MH() {
        return RuntimeHelper.requireNonNull(constants$130.ffgabc$MH,"ffgabc");
    }
    public static int ffgabc ( int tfields,  Addressable tform,  int space,  Addressable rowlen,  Addressable tbcol,  Addressable status) {
        var mh$ = ffgabc$MH();
        try {
            return (int)mh$.invokeExact(tfields, tform, space, rowlen, tbcol, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_section_range$MH() {
        return RuntimeHelper.requireNonNull(constants$130.fits_get_section_range$MH,"fits_get_section_range");
    }
    public static int fits_get_section_range ( Addressable ptr,  Addressable secmin,  Addressable secmax,  Addressable incre,  Addressable status) {
        var mh$ = fits_get_section_range$MH();
        try {
            return (int)mh$.invokeExact(ptr, secmin, secmax, incre, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmbyt$MH() {
        return RuntimeHelper.requireNonNull(constants$130.ffmbyt$MH,"ffmbyt");
    }
    public static int ffmbyt ( Addressable fptr,  long bytpos,  int ignore_err,  Addressable status) {
        var mh$ = ffmbyt$MH();
        try {
            return (int)mh$.invokeExact(fptr, bytpos, ignore_err, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpky$MH() {
        return RuntimeHelper.requireNonNull(constants$130.ffpky$MH,"ffpky");
    }
    public static int ffpky ( Addressable fptr,  int datatype,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpky$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffprec$MH() {
        return RuntimeHelper.requireNonNull(constants$130.ffprec$MH,"ffprec");
    }
    public static int ffprec ( Addressable fptr,  Addressable card,  Addressable status) {
        var mh$ = ffprec$MH();
        try {
            return (int)mh$.invokeExact(fptr, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcom$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ffpcom$MH,"ffpcom");
    }
    public static int ffpcom ( Addressable fptr,  Addressable comm,  Addressable status) {
        var mh$ = ffpcom$MH();
        try {
            return (int)mh$.invokeExact(fptr, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpunt$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ffpunt$MH,"ffpunt");
    }
    public static int ffpunt ( Addressable fptr,  Addressable keyname,  Addressable unit,  Addressable status) {
        var mh$ = ffpunt$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, unit, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphis$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ffphis$MH,"ffphis");
    }
    public static int ffphis ( Addressable fptr,  Addressable history,  Addressable status) {
        var mh$ = ffphis$MH();
        try {
            return (int)mh$.invokeExact(fptr, history, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpdat$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ffpdat$MH,"ffpdat");
    }
    public static int ffpdat ( Addressable fptr,  Addressable status) {
        var mh$ = ffpdat$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffverifydate$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ffverifydate$MH,"ffverifydate");
    }
    public static int ffverifydate ( int year,  int month,  int day,  Addressable status) {
        var mh$ = ffverifydate$MH();
        try {
            return (int)mh$.invokeExact(year, month, day, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgstm$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ffgstm$MH,"ffgstm");
    }
    public static int ffgstm ( Addressable timestr,  Addressable timeref,  Addressable status) {
        var mh$ = ffgstm$MH();
        try {
            return (int)mh$.invokeExact(timestr, timeref, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsdt$MH() {
        return RuntimeHelper.requireNonNull(constants$132.ffgsdt$MH,"ffgsdt");
    }
    public static int ffgsdt ( Addressable day,  Addressable month,  Addressable year,  Addressable status) {
        var mh$ = ffgsdt$MH();
        try {
            return (int)mh$.invokeExact(day, month, year, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdt2s$MH() {
        return RuntimeHelper.requireNonNull(constants$132.ffdt2s$MH,"ffdt2s");
    }
    public static int ffdt2s ( int year,  int month,  int day,  Addressable datestr,  Addressable status) {
        var mh$ = ffdt2s$MH();
        try {
            return (int)mh$.invokeExact(year, month, day, datestr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftm2s$MH() {
        return RuntimeHelper.requireNonNull(constants$132.fftm2s$MH,"fftm2s");
    }
    public static int fftm2s ( int year,  int month,  int day,  int hour,  int minute,  double second,  int decimals,  Addressable datestr,  Addressable status) {
        var mh$ = fftm2s$MH();
        try {
            return (int)mh$.invokeExact(year, month, day, hour, minute, second, decimals, datestr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs2dt$MH() {
        return RuntimeHelper.requireNonNull(constants$132.ffs2dt$MH,"ffs2dt");
    }
    public static int ffs2dt ( Addressable datestr,  Addressable year,  Addressable month,  Addressable day,  Addressable status) {
        var mh$ = ffs2dt$MH();
        try {
            return (int)mh$.invokeExact(datestr, year, month, day, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs2tm$MH() {
        return RuntimeHelper.requireNonNull(constants$132.ffs2tm$MH,"ffs2tm");
    }
    public static int ffs2tm ( Addressable datestr,  Addressable year,  Addressable month,  Addressable day,  Addressable hour,  Addressable minute,  Addressable second,  Addressable status) {
        var mh$ = ffs2tm$MH();
        try {
            return (int)mh$.invokeExact(datestr, year, month, day, hour, minute, second, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyu$MH() {
        return RuntimeHelper.requireNonNull(constants$132.ffpkyu$MH,"ffpkyu");
    }
    public static int ffpkyu ( Addressable fptr,  Addressable keyname,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyu$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkys$MH() {
        return RuntimeHelper.requireNonNull(constants$133.ffpkys$MH,"ffpkys");
    }
    public static int ffpkys ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpkys$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkls$MH() {
        return RuntimeHelper.requireNonNull(constants$133.ffpkls$MH,"ffpkls");
    }
    public static int ffpkls ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpkls$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffplsw$MH() {
        return RuntimeHelper.requireNonNull(constants$133.ffplsw$MH,"ffplsw");
    }
    public static int ffplsw ( Addressable fptr,  Addressable status) {
        var mh$ = ffplsw$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyl$MH() {
        return RuntimeHelper.requireNonNull(constants$133.ffpkyl$MH,"ffpkyl");
    }
    public static int ffpkyl ( Addressable fptr,  Addressable keyname,  int value,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyj$MH() {
        return RuntimeHelper.requireNonNull(constants$133.ffpkyj$MH,"ffpkyj");
    }
    public static int ffpkyj ( Addressable fptr,  Addressable keyname,  long value,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyuj$MH() {
        return RuntimeHelper.requireNonNull(constants$133.ffpkyuj$MH,"ffpkyuj");
    }
    public static int ffpkyuj ( Addressable fptr,  Addressable keyname,  long value,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.ffpkyf$MH,"ffpkyf");
    }
    public static int ffpkyf ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyf$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkye$MH() {
        return RuntimeHelper.requireNonNull(constants$134.ffpkye$MH,"ffpkye");
    }
    public static int ffpkye ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkye$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyg$MH() {
        return RuntimeHelper.requireNonNull(constants$134.ffpkyg$MH,"ffpkyg");
    }
    public static int ffpkyg ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyg$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyd$MH() {
        return RuntimeHelper.requireNonNull(constants$134.ffpkyd$MH,"ffpkyd");
    }
    public static int ffpkyd ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyc$MH() {
        return RuntimeHelper.requireNonNull(constants$134.ffpkyc$MH,"ffpkyc");
    }
    public static int ffpkyc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkym$MH() {
        return RuntimeHelper.requireNonNull(constants$134.ffpkym$MH,"ffpkym");
    }
    public static int ffpkym ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkym$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkfc$MH() {
        return RuntimeHelper.requireNonNull(constants$135.ffpkfc$MH,"ffpkfc");
    }
    public static int ffpkfc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkfc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkfm$MH() {
        return RuntimeHelper.requireNonNull(constants$135.ffpkfm$MH,"ffpkfm");
    }
    public static int ffpkfm ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkfm$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkyt$MH() {
        return RuntimeHelper.requireNonNull(constants$135.ffpkyt$MH,"ffpkyt");
    }
    public static int ffpkyt ( Addressable fptr,  Addressable keyname,  int intval,  double frac,  Addressable comm,  Addressable status) {
        var mh$ = ffpkyt$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, intval, frac, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffptdm$MH() {
        return RuntimeHelper.requireNonNull(constants$135.ffptdm$MH,"ffptdm");
    }
    public static int ffptdm ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffptdm$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffptdmll$MH() {
        return RuntimeHelper.requireNonNull(constants$135.ffptdmll$MH,"ffptdmll");
    }
    public static int ffptdmll ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffptdmll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkns$MH() {
        return RuntimeHelper.requireNonNull(constants$135.ffpkns$MH,"ffpkns");
    }
    public static int ffpkns ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpkns$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpknl$MH() {
        return RuntimeHelper.requireNonNull(constants$136.ffpknl$MH,"ffpknl");
    }
    public static int ffpknl ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpknl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpknj$MH() {
        return RuntimeHelper.requireNonNull(constants$136.ffpknj$MH,"ffpknj");
    }
    public static int ffpknj ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpknj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpknjj$MH() {
        return RuntimeHelper.requireNonNull(constants$136.ffpknjj$MH,"ffpknjj");
    }
    public static int ffpknjj ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffpknjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpknf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.ffpknf$MH,"ffpknf");
    }
    public static int ffpknf ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpknf$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkne$MH() {
        return RuntimeHelper.requireNonNull(constants$136.ffpkne$MH,"ffpkne");
    }
    public static int ffpkne ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkne$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpkng$MH() {
        return RuntimeHelper.requireNonNull(constants$136.ffpkng$MH,"ffpkng");
    }
    public static int ffpkng ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpkng$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpknd$MH() {
        return RuntimeHelper.requireNonNull(constants$137.ffpknd$MH,"ffpknd");
    }
    public static int ffpknd ( Addressable fptr,  Addressable keyroot,  int nstart,  int nkey,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffpknd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyroot, nstart, nkey, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcpky$MH() {
        return RuntimeHelper.requireNonNull(constants$137.ffcpky$MH,"ffcpky");
    }
    public static int ffcpky ( Addressable infptr,  Addressable outfptr,  int incol,  int outcol,  Addressable rootname,  Addressable status) {
        var mh$ = ffcpky$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, incol, outcol, rootname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphps$MH() {
        return RuntimeHelper.requireNonNull(constants$137.ffphps$MH,"ffphps");
    }
    public static int ffphps ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffphps$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphpsll$MH() {
        return RuntimeHelper.requireNonNull(constants$137.ffphpsll$MH,"ffphpsll");
    }
    public static int ffphpsll ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffphpsll$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphpr$MH() {
        return RuntimeHelper.requireNonNull(constants$137.ffphpr$MH,"ffphpr");
    }
    public static int ffphpr ( Addressable fptr,  int simple,  int bitpix,  int naxis,  Addressable naxes,  long pcount,  long gcount,  int extend,  Addressable status) {
        var mh$ = ffphpr$MH();
        try {
            return (int)mh$.invokeExact(fptr, simple, bitpix, naxis, naxes, pcount, gcount, extend, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphprll$MH() {
        return RuntimeHelper.requireNonNull(constants$137.ffphprll$MH,"ffphprll");
    }
    public static int ffphprll ( Addressable fptr,  int simple,  int bitpix,  int naxis,  Addressable naxes,  long pcount,  long gcount,  int extend,  Addressable status) {
        var mh$ = ffphprll$MH();
        try {
            return (int)mh$.invokeExact(fptr, simple, bitpix, naxis, naxes, pcount, gcount, extend, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphtb$MH() {
        return RuntimeHelper.requireNonNull(constants$138.ffphtb$MH,"ffphtb");
    }
    public static int ffphtb ( Addressable fptr,  long naxis1,  long naxis2,  int tfields,  Addressable ttype,  Addressable tbcol,  Addressable tform,  Addressable tunit,  Addressable extname,  Addressable status) {
        var mh$ = ffphtb$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis1, naxis2, tfields, ttype, tbcol, tform, tunit, extname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphbn$MH() {
        return RuntimeHelper.requireNonNull(constants$138.ffphbn$MH,"ffphbn");
    }
    public static int ffphbn ( Addressable fptr,  long naxis2,  int tfields,  Addressable ttype,  Addressable tform,  Addressable tunit,  Addressable extname,  long pcount,  Addressable status) {
        var mh$ = ffphbn$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis2, tfields, ttype, tform, tunit, extname, pcount, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffphext$MH() {
        return RuntimeHelper.requireNonNull(constants$138.ffphext$MH,"ffphext");
    }
    public static int ffphext ( Addressable fptr,  Addressable xtension,  int bitpix,  int naxis,  Addressable naxes,  long pcount,  long gcount,  Addressable status) {
        var mh$ = ffphext$MH();
        try {
            return (int)mh$.invokeExact(fptr, xtension, bitpix, naxis, naxes, pcount, gcount, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpktp$MH() {
        return RuntimeHelper.requireNonNull(constants$138.ffpktp$MH,"ffpktp");
    }
    public static int ffpktp ( Addressable fptr,  Addressable filename,  Addressable status) {
        var mh$ = ffpktp$MH();
        try {
            return (int)mh$.invokeExact(fptr, filename, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghsp$MH() {
        return RuntimeHelper.requireNonNull(constants$138.ffghsp$MH,"ffghsp");
    }
    public static int ffghsp ( Addressable fptr,  Addressable nexist,  Addressable nmore,  Addressable status) {
        var mh$ = ffghsp$MH();
        try {
            return (int)mh$.invokeExact(fptr, nexist, nmore, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghps$MH() {
        return RuntimeHelper.requireNonNull(constants$138.ffghps$MH,"ffghps");
    }
    public static int ffghps ( Addressable fptr,  Addressable nexist,  Addressable position,  Addressable status) {
        var mh$ = ffghps$MH();
        try {
            return (int)mh$.invokeExact(fptr, nexist, position, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmaky$MH() {
        return RuntimeHelper.requireNonNull(constants$139.ffmaky$MH,"ffmaky");
    }
    public static int ffmaky ( Addressable fptr,  int nrec,  Addressable status) {
        var mh$ = ffmaky$MH();
        try {
            return (int)mh$.invokeExact(fptr, nrec, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmrky$MH() {
        return RuntimeHelper.requireNonNull(constants$139.ffmrky$MH,"ffmrky");
    }
    public static int ffmrky ( Addressable fptr,  int nrec,  Addressable status) {
        var mh$ = ffmrky$MH();
        try {
            return (int)mh$.invokeExact(fptr, nrec, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgnxk$MH() {
        return RuntimeHelper.requireNonNull(constants$139.ffgnxk$MH,"ffgnxk");
    }
    public static int ffgnxk ( Addressable fptr,  Addressable inclist,  int ninc,  Addressable exclist,  int nexc,  Addressable card,  Addressable status) {
        var mh$ = ffgnxk$MH();
        try {
            return (int)mh$.invokeExact(fptr, inclist, ninc, exclist, nexc, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgrec$MH() {
        return RuntimeHelper.requireNonNull(constants$139.ffgrec$MH,"ffgrec");
    }
    public static int ffgrec ( Addressable fptr,  int nrec,  Addressable card,  Addressable status) {
        var mh$ = ffgrec$MH();
        try {
            return (int)mh$.invokeExact(fptr, nrec, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcrd$MH() {
        return RuntimeHelper.requireNonNull(constants$139.ffgcrd$MH,"ffgcrd");
    }
    public static int ffgcrd ( Addressable fptr,  Addressable keyname,  Addressable card,  Addressable status) {
        var mh$ = ffgcrd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgstr$MH() {
        return RuntimeHelper.requireNonNull(constants$139.ffgstr$MH,"ffgstr");
    }
    public static int ffgstr ( Addressable fptr,  Addressable string,  Addressable card,  Addressable status) {
        var mh$ = ffgstr$MH();
        try {
            return (int)mh$.invokeExact(fptr, string, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgunt$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ffgunt$MH,"ffgunt");
    }
    public static int ffgunt ( Addressable fptr,  Addressable keyname,  Addressable unit,  Addressable status) {
        var mh$ = ffgunt$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, unit, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyn$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ffgkyn$MH,"ffgkyn");
    }
    public static int ffgkyn ( Addressable fptr,  int nkey,  Addressable keyname,  Addressable keyval,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyn$MH();
        try {
            return (int)mh$.invokeExact(fptr, nkey, keyname, keyval, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkey$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ffgkey$MH,"ffgkey");
    }
    public static int ffgkey ( Addressable fptr,  Addressable keyname,  Addressable keyval,  Addressable comm,  Addressable status) {
        var mh$ = ffgkey$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, keyval, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgky$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ffgky$MH,"ffgky");
    }
    public static int ffgky ( Addressable fptr,  int datatype,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgky$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkys$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ffgkys$MH,"ffgkys");
    }
    public static int ffgkys ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkys$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgksl$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ffgksl$MH,"ffgksl");
    }
    public static int ffgksl ( Addressable fptr,  Addressable keyname,  Addressable length,  Addressable status) {
        var mh$ = ffgksl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, length, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkls$MH() {
        return RuntimeHelper.requireNonNull(constants$141.ffgkls$MH,"ffgkls");
    }
    public static int ffgkls ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkls$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsky$MH() {
        return RuntimeHelper.requireNonNull(constants$141.ffgsky$MH,"ffgsky");
    }
    public static int ffgsky ( Addressable fptr,  Addressable keyname,  int firstchar,  int maxchar,  Addressable value,  Addressable valuelen,  Addressable comm,  Addressable status) {
        var mh$ = ffgsky$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, firstchar, maxchar, value, valuelen, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fffree$MH() {
        return RuntimeHelper.requireNonNull(constants$141.fffree$MH,"fffree");
    }
    public static int fffree ( Addressable value,  Addressable status) {
        var mh$ = fffree$MH();
        try {
            return (int)mh$.invokeExact(value, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fffkls$MH() {
        return RuntimeHelper.requireNonNull(constants$141.fffkls$MH,"fffkls");
    }
    public static int fffkls ( Addressable value,  Addressable status) {
        var mh$ = fffkls$MH();
        try {
            return (int)mh$.invokeExact(value, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyl$MH() {
        return RuntimeHelper.requireNonNull(constants$141.ffgkyl$MH,"ffgkyl");
    }
    public static int ffgkyl ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyj$MH() {
        return RuntimeHelper.requireNonNull(constants$141.ffgkyj$MH,"ffgkyj");
    }
    public static int ffgkyj ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyjj$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ffgkyjj$MH,"ffgkyjj");
    }
    public static int ffgkyjj ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyujj$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ffgkyujj$MH,"ffgkyujj");
    }
    public static int ffgkyujj ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkye$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ffgkye$MH,"ffgkye");
    }
    public static int ffgkye ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkye$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyd$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ffgkyd$MH,"ffgkyd");
    }
    public static int ffgkyd ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyc$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ffgkyc$MH,"ffgkyc");
    }
    public static int ffgkyc ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkym$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ffgkym$MH,"ffgkym");
    }
    public static int ffgkym ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffgkym$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkyt$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ffgkyt$MH,"ffgkyt");
    }
    public static int ffgkyt ( Addressable fptr,  Addressable keyname,  Addressable ivalue,  Addressable dvalue,  Addressable comm,  Addressable status) {
        var mh$ = ffgkyt$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, ivalue, dvalue, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtdm$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ffgtdm$MH,"ffgtdm");
    }
    public static int ffgtdm ( Addressable fptr,  int colnum,  int maxdim,  Addressable naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffgtdm$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, maxdim, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtdmll$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ffgtdmll$MH,"ffgtdmll");
    }
    public static int ffgtdmll ( Addressable fptr,  int colnum,  int maxdim,  Addressable naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffgtdmll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, maxdim, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdtdm$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ffdtdm$MH,"ffdtdm");
    }
    public static int ffdtdm ( Addressable fptr,  Addressable tdimstr,  int colnum,  int maxdim,  Addressable naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffdtdm$MH();
        try {
            return (int)mh$.invokeExact(fptr, tdimstr, colnum, maxdim, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdtdmll$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ffdtdmll$MH,"ffdtdmll");
    }
    public static int ffdtdmll ( Addressable fptr,  Addressable tdimstr,  int colnum,  int maxdim,  Addressable naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffdtdmll$MH();
        try {
            return (int)mh$.invokeExact(fptr, tdimstr, colnum, maxdim, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkns$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ffgkns$MH,"ffgkns");
    }
    public static int ffgkns ( Addressable fptr,  Addressable keyname,  int nstart,  int nmax,  Addressable value,  Addressable nfound,  Addressable status) {
        var mh$ = ffgkns$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, nstart, nmax, value, nfound, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgknl$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ffgknl$MH,"ffgknl");
    }
    public static int ffgknl ( Addressable fptr,  Addressable keyname,  int nstart,  int nmax,  Addressable value,  Addressable nfound,  Addressable status) {
        var mh$ = ffgknl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, nstart, nmax, value, nfound, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgknj$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ffgknj$MH,"ffgknj");
    }
    public static int ffgknj ( Addressable fptr,  Addressable keyname,  int nstart,  int nmax,  Addressable value,  Addressable nfound,  Addressable status) {
        var mh$ = ffgknj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, nstart, nmax, value, nfound, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgknjj$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ffgknjj$MH,"ffgknjj");
    }
    public static int ffgknjj ( Addressable fptr,  Addressable keyname,  int nstart,  int nmax,  Addressable value,  Addressable nfound,  Addressable status) {
        var mh$ = ffgknjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, nstart, nmax, value, nfound, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgkne$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ffgkne$MH,"ffgkne");
    }
    public static int ffgkne ( Addressable fptr,  Addressable keyname,  int nstart,  int nmax,  Addressable value,  Addressable nfound,  Addressable status) {
        var mh$ = ffgkne$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, nstart, nmax, value, nfound, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgknd$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ffgknd$MH,"ffgknd");
    }
    public static int ffgknd ( Addressable fptr,  Addressable keyname,  int nstart,  int nmax,  Addressable value,  Addressable nfound,  Addressable status) {
        var mh$ = ffgknd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, nstart, nmax, value, nfound, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffh2st$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ffh2st$MH,"ffh2st");
    }
    public static int ffh2st ( Addressable fptr,  Addressable header,  Addressable status) {
        var mh$ = ffh2st$MH();
        try {
            return (int)mh$.invokeExact(fptr, header, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffhdr2str$MH() {
        return RuntimeHelper.requireNonNull(constants$145.ffhdr2str$MH,"ffhdr2str");
    }
    public static int ffhdr2str ( Addressable fptr,  int exclude_comm,  Addressable exclist,  int nexc,  Addressable header,  Addressable nkeys,  Addressable status) {
        var mh$ = ffhdr2str$MH();
        try {
            return (int)mh$.invokeExact(fptr, exclude_comm, exclist, nexc, header, nkeys, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcnvthdr2str$MH() {
        return RuntimeHelper.requireNonNull(constants$145.ffcnvthdr2str$MH,"ffcnvthdr2str");
    }
    public static int ffcnvthdr2str ( Addressable fptr,  int exclude_comm,  Addressable exclist,  int nexc,  Addressable header,  Addressable nkeys,  Addressable status) {
        var mh$ = ffcnvthdr2str$MH();
        try {
            return (int)mh$.invokeExact(fptr, exclude_comm, exclist, nexc, header, nkeys, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghpr$MH() {
        return RuntimeHelper.requireNonNull(constants$145.ffghpr$MH,"ffghpr");
    }
    public static int ffghpr ( Addressable fptr,  int maxdim,  Addressable simple,  Addressable bitpix,  Addressable naxis,  Addressable naxes,  Addressable pcount,  Addressable gcount,  Addressable extend,  Addressable status) {
        var mh$ = ffghpr$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxdim, simple, bitpix, naxis, naxes, pcount, gcount, extend, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghprll$MH() {
        return RuntimeHelper.requireNonNull(constants$145.ffghprll$MH,"ffghprll");
    }
    public static int ffghprll ( Addressable fptr,  int maxdim,  Addressable simple,  Addressable bitpix,  Addressable naxis,  Addressable naxes,  Addressable pcount,  Addressable gcount,  Addressable extend,  Addressable status) {
        var mh$ = ffghprll$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxdim, simple, bitpix, naxis, naxes, pcount, gcount, extend, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghtb$MH() {
        return RuntimeHelper.requireNonNull(constants$145.ffghtb$MH,"ffghtb");
    }
    public static int ffghtb ( Addressable fptr,  int maxfield,  Addressable naxis1,  Addressable naxis2,  Addressable tfields,  Addressable ttype,  Addressable tbcol,  Addressable tform,  Addressable tunit,  Addressable extname,  Addressable status) {
        var mh$ = ffghtb$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxfield, naxis1, naxis2, tfields, ttype, tbcol, tform, tunit, extname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghtbll$MH() {
        return RuntimeHelper.requireNonNull(constants$145.ffghtbll$MH,"ffghtbll");
    }
    public static int ffghtbll ( Addressable fptr,  int maxfield,  Addressable naxis1,  Addressable naxis2,  Addressable tfields,  Addressable ttype,  Addressable tbcol,  Addressable tform,  Addressable tunit,  Addressable extname,  Addressable status) {
        var mh$ = ffghtbll$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxfield, naxis1, naxis2, tfields, ttype, tbcol, tform, tunit, extname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghbn$MH() {
        return RuntimeHelper.requireNonNull(constants$146.ffghbn$MH,"ffghbn");
    }
    public static int ffghbn ( Addressable fptr,  int maxfield,  Addressable naxis2,  Addressable tfields,  Addressable ttype,  Addressable tform,  Addressable tunit,  Addressable extname,  Addressable pcount,  Addressable status) {
        var mh$ = ffghbn$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxfield, naxis2, tfields, ttype, tform, tunit, extname, pcount, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghbnll$MH() {
        return RuntimeHelper.requireNonNull(constants$146.ffghbnll$MH,"ffghbnll");
    }
    public static int ffghbnll ( Addressable fptr,  int maxfield,  Addressable naxis2,  Addressable tfields,  Addressable ttype,  Addressable tform,  Addressable tunit,  Addressable extname,  Addressable pcount,  Addressable status) {
        var mh$ = ffghbnll$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxfield, naxis2, tfields, ttype, tform, tunit, extname, pcount, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffuky$MH() {
        return RuntimeHelper.requireNonNull(constants$146.ffuky$MH,"ffuky");
    }
    public static int ffuky ( Addressable fptr,  int datatype,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffuky$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffucrd$MH() {
        return RuntimeHelper.requireNonNull(constants$146.ffucrd$MH,"ffucrd");
    }
    public static int ffucrd ( Addressable fptr,  Addressable keyname,  Addressable card,  Addressable status) {
        var mh$ = ffucrd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukyu$MH() {
        return RuntimeHelper.requireNonNull(constants$146.ffukyu$MH,"ffukyu");
    }
    public static int ffukyu ( Addressable fptr,  Addressable keyname,  Addressable comm,  Addressable status) {
        var mh$ = ffukyu$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukys$MH() {
        return RuntimeHelper.requireNonNull(constants$146.ffukys$MH,"ffukys");
    }
    public static int ffukys ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffukys$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukls$MH() {
        return RuntimeHelper.requireNonNull(constants$147.ffukls$MH,"ffukls");
    }
    public static int ffukls ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffukls$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukyl$MH() {
        return RuntimeHelper.requireNonNull(constants$147.ffukyl$MH,"ffukyl");
    }
    public static int ffukyl ( Addressable fptr,  Addressable keyname,  int value,  Addressable comm,  Addressable status) {
        var mh$ = ffukyl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukyj$MH() {
        return RuntimeHelper.requireNonNull(constants$147.ffukyj$MH,"ffukyj");
    }
    public static int ffukyj ( Addressable fptr,  Addressable keyname,  long value,  Addressable comm,  Addressable status) {
        var mh$ = ffukyj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukyf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.ffukyf$MH,"ffukyf");
    }
    public static int ffukyf ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukyf$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukye$MH() {
        return RuntimeHelper.requireNonNull(constants$147.ffukye$MH,"ffukye");
    }
    public static int ffukye ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukye$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukyg$MH() {
        return RuntimeHelper.requireNonNull(constants$147.ffukyg$MH,"ffukyg");
    }
    public static int ffukyg ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukyg$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukyd$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ffukyd$MH,"ffukyd");
    }
    public static int ffukyd ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukyd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukyc$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ffukyc$MH,"ffukyc");
    }
    public static int ffukyc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukyc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukym$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ffukym$MH,"ffukym");
    }
    public static int ffukym ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukym$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukfc$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ffukfc$MH,"ffukfc");
    }
    public static int ffukfc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukfc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffukfm$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ffukfm$MH,"ffukfm");
    }
    public static int ffukfm ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffukfm$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmrec$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ffmrec$MH,"ffmrec");
    }
    public static int ffmrec ( Addressable fptr,  int nkey,  Addressable card,  Addressable status) {
        var mh$ = ffmrec$MH();
        try {
            return (int)mh$.invokeExact(fptr, nkey, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmcrd$MH() {
        return RuntimeHelper.requireNonNull(constants$149.ffmcrd$MH,"ffmcrd");
    }
    public static int ffmcrd ( Addressable fptr,  Addressable keyname,  Addressable card,  Addressable status) {
        var mh$ = ffmcrd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmnam$MH() {
        return RuntimeHelper.requireNonNull(constants$149.ffmnam$MH,"ffmnam");
    }
    public static int ffmnam ( Addressable fptr,  Addressable oldname,  Addressable newname,  Addressable status) {
        var mh$ = ffmnam$MH();
        try {
            return (int)mh$.invokeExact(fptr, oldname, newname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmcom$MH() {
        return RuntimeHelper.requireNonNull(constants$149.ffmcom$MH,"ffmcom");
    }
    public static int ffmcom ( Addressable fptr,  Addressable keyname,  Addressable comm,  Addressable status) {
        var mh$ = ffmcom$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkyu$MH() {
        return RuntimeHelper.requireNonNull(constants$149.ffmkyu$MH,"ffmkyu");
    }
    public static int ffmkyu ( Addressable fptr,  Addressable keyname,  Addressable comm,  Addressable status) {
        var mh$ = ffmkyu$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkys$MH() {
        return RuntimeHelper.requireNonNull(constants$149.ffmkys$MH,"ffmkys");
    }
    public static int ffmkys ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffmkys$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkls$MH() {
        return RuntimeHelper.requireNonNull(constants$149.ffmkls$MH,"ffmkls");
    }
    public static int ffmkls ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffmkls$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkyl$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ffmkyl$MH,"ffmkyl");
    }
    public static int ffmkyl ( Addressable fptr,  Addressable keyname,  int value,  Addressable comm,  Addressable status) {
        var mh$ = ffmkyl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkyj$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ffmkyj$MH,"ffmkyj");
    }
    public static int ffmkyj ( Addressable fptr,  Addressable keyname,  long value,  Addressable comm,  Addressable status) {
        var mh$ = ffmkyj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkyf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ffmkyf$MH,"ffmkyf");
    }
    public static int ffmkyf ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkyf$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkye$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ffmkye$MH,"ffmkye");
    }
    public static int ffmkye ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkye$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkyg$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ffmkyg$MH,"ffmkyg");
    }
    public static int ffmkyg ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkyg$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkyd$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ffmkyd$MH,"ffmkyd");
    }
    public static int ffmkyd ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkyd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkyc$MH() {
        return RuntimeHelper.requireNonNull(constants$151.ffmkyc$MH,"ffmkyc");
    }
    public static int ffmkyc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkyc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkym$MH() {
        return RuntimeHelper.requireNonNull(constants$151.ffmkym$MH,"ffmkym");
    }
    public static int ffmkym ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkym$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkfc$MH() {
        return RuntimeHelper.requireNonNull(constants$151.ffmkfc$MH,"ffmkfc");
    }
    public static int ffmkfc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkfc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmkfm$MH() {
        return RuntimeHelper.requireNonNull(constants$151.ffmkfm$MH,"ffmkfm");
    }
    public static int ffmkfm ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffmkfm$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffirec$MH() {
        return RuntimeHelper.requireNonNull(constants$151.ffirec$MH,"ffirec");
    }
    public static int ffirec ( Addressable fptr,  int nkey,  Addressable card,  Addressable status) {
        var mh$ = ffirec$MH();
        try {
            return (int)mh$.invokeExact(fptr, nkey, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikey$MH() {
        return RuntimeHelper.requireNonNull(constants$151.ffikey$MH,"ffikey");
    }
    public static int ffikey ( Addressable fptr,  Addressable card,  Addressable status) {
        var mh$ = ffikey$MH();
        try {
            return (int)mh$.invokeExact(fptr, card, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikyu$MH() {
        return RuntimeHelper.requireNonNull(constants$152.ffikyu$MH,"ffikyu");
    }
    public static int ffikyu ( Addressable fptr,  Addressable keyname,  Addressable comm,  Addressable status) {
        var mh$ = ffikyu$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikys$MH() {
        return RuntimeHelper.requireNonNull(constants$152.ffikys$MH,"ffikys");
    }
    public static int ffikys ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffikys$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikls$MH() {
        return RuntimeHelper.requireNonNull(constants$152.ffikls$MH,"ffikls");
    }
    public static int ffikls ( Addressable fptr,  Addressable keyname,  Addressable value,  Addressable comm,  Addressable status) {
        var mh$ = ffikls$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikyl$MH() {
        return RuntimeHelper.requireNonNull(constants$152.ffikyl$MH,"ffikyl");
    }
    public static int ffikyl ( Addressable fptr,  Addressable keyname,  int value,  Addressable comm,  Addressable status) {
        var mh$ = ffikyl$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikyj$MH() {
        return RuntimeHelper.requireNonNull(constants$152.ffikyj$MH,"ffikyj");
    }
    public static int ffikyj ( Addressable fptr,  Addressable keyname,  long value,  Addressable comm,  Addressable status) {
        var mh$ = ffikyj$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikyf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.ffikyf$MH,"ffikyf");
    }
    public static int ffikyf ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikyf$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikye$MH() {
        return RuntimeHelper.requireNonNull(constants$153.ffikye$MH,"ffikye");
    }
    public static int ffikye ( Addressable fptr,  Addressable keyname,  float value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikye$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikyg$MH() {
        return RuntimeHelper.requireNonNull(constants$153.ffikyg$MH,"ffikyg");
    }
    public static int ffikyg ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikyg$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikyd$MH() {
        return RuntimeHelper.requireNonNull(constants$153.ffikyd$MH,"ffikyd");
    }
    public static int ffikyd ( Addressable fptr,  Addressable keyname,  double value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikyd$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikyc$MH() {
        return RuntimeHelper.requireNonNull(constants$153.ffikyc$MH,"ffikyc");
    }
    public static int ffikyc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikyc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikym$MH() {
        return RuntimeHelper.requireNonNull(constants$153.ffikym$MH,"ffikym");
    }
    public static int ffikym ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikym$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikfc$MH() {
        return RuntimeHelper.requireNonNull(constants$153.ffikfc$MH,"ffikfc");
    }
    public static int ffikfc ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikfc$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffikfm$MH() {
        return RuntimeHelper.requireNonNull(constants$154.ffikfm$MH,"ffikfm");
    }
    public static int ffikfm ( Addressable fptr,  Addressable keyname,  Addressable value,  int decim,  Addressable comm,  Addressable status) {
        var mh$ = ffikfm$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, value, decim, comm, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdkey$MH() {
        return RuntimeHelper.requireNonNull(constants$154.ffdkey$MH,"ffdkey");
    }
    public static int ffdkey ( Addressable fptr,  Addressable keyname,  Addressable status) {
        var mh$ = ffdkey$MH();
        try {
            return (int)mh$.invokeExact(fptr, keyname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdstr$MH() {
        return RuntimeHelper.requireNonNull(constants$154.ffdstr$MH,"ffdstr");
    }
    public static int ffdstr ( Addressable fptr,  Addressable string,  Addressable status) {
        var mh$ = ffdstr$MH();
        try {
            return (int)mh$.invokeExact(fptr, string, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdrec$MH() {
        return RuntimeHelper.requireNonNull(constants$154.ffdrec$MH,"ffdrec");
    }
    public static int ffdrec ( Addressable fptr,  int keypos,  Addressable status) {
        var mh$ = ffdrec$MH();
        try {
            return (int)mh$.invokeExact(fptr, keypos, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghdn$MH() {
        return RuntimeHelper.requireNonNull(constants$154.ffghdn$MH,"ffghdn");
    }
    public static int ffghdn ( Addressable fptr,  Addressable chdunum) {
        var mh$ = ffghdn$MH();
        try {
            return (int)mh$.invokeExact(fptr, chdunum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghdt$MH() {
        return RuntimeHelper.requireNonNull(constants$154.ffghdt$MH,"ffghdt");
    }
    public static int ffghdt ( Addressable fptr,  Addressable exttype,  Addressable status) {
        var mh$ = ffghdt$MH();
        try {
            return (int)mh$.invokeExact(fptr, exttype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghad$MH() {
        return RuntimeHelper.requireNonNull(constants$155.ffghad$MH,"ffghad");
    }
    public static int ffghad ( Addressable fptr,  Addressable headstart,  Addressable datastart,  Addressable dataend,  Addressable status) {
        var mh$ = ffghad$MH();
        try {
            return (int)mh$.invokeExact(fptr, headstart, datastart, dataend, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghadll$MH() {
        return RuntimeHelper.requireNonNull(constants$155.ffghadll$MH,"ffghadll");
    }
    public static int ffghadll ( Addressable fptr,  Addressable headstart,  Addressable datastart,  Addressable dataend,  Addressable status) {
        var mh$ = ffghadll$MH();
        try {
            return (int)mh$.invokeExact(fptr, headstart, datastart, dataend, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffghof$MH() {
        return RuntimeHelper.requireNonNull(constants$155.ffghof$MH,"ffghof");
    }
    public static int ffghof ( Addressable fptr,  Addressable headstart,  Addressable datastart,  Addressable dataend,  Addressable status) {
        var mh$ = ffghof$MH();
        try {
            return (int)mh$.invokeExact(fptr, headstart, datastart, dataend, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgipr$MH() {
        return RuntimeHelper.requireNonNull(constants$155.ffgipr$MH,"ffgipr");
    }
    public static int ffgipr ( Addressable fptr,  int maxaxis,  Addressable imgtype,  Addressable naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffgipr$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxaxis, imgtype, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgiprll$MH() {
        return RuntimeHelper.requireNonNull(constants$155.ffgiprll$MH,"ffgiprll");
    }
    public static int ffgiprll ( Addressable fptr,  int maxaxis,  Addressable imgtype,  Addressable naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffgiprll$MH();
        try {
            return (int)mh$.invokeExact(fptr, maxaxis, imgtype, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgidt$MH() {
        return RuntimeHelper.requireNonNull(constants$155.ffgidt$MH,"ffgidt");
    }
    public static int ffgidt ( Addressable fptr,  Addressable imgtype,  Addressable status) {
        var mh$ = ffgidt$MH();
        try {
            return (int)mh$.invokeExact(fptr, imgtype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgiet$MH() {
        return RuntimeHelper.requireNonNull(constants$156.ffgiet$MH,"ffgiet");
    }
    public static int ffgiet ( Addressable fptr,  Addressable imgtype,  Addressable status) {
        var mh$ = ffgiet$MH();
        try {
            return (int)mh$.invokeExact(fptr, imgtype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgidm$MH() {
        return RuntimeHelper.requireNonNull(constants$156.ffgidm$MH,"ffgidm");
    }
    public static int ffgidm ( Addressable fptr,  Addressable naxis,  Addressable status) {
        var mh$ = ffgidm$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgisz$MH() {
        return RuntimeHelper.requireNonNull(constants$156.ffgisz$MH,"ffgisz");
    }
    public static int ffgisz ( Addressable fptr,  int nlen,  Addressable naxes,  Addressable status) {
        var mh$ = ffgisz$MH();
        try {
            return (int)mh$.invokeExact(fptr, nlen, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgiszll$MH() {
        return RuntimeHelper.requireNonNull(constants$156.ffgiszll$MH,"ffgiszll");
    }
    public static int ffgiszll ( Addressable fptr,  int nlen,  Addressable naxes,  Addressable status) {
        var mh$ = ffgiszll$MH();
        try {
            return (int)mh$.invokeExact(fptr, nlen, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmahd$MH() {
        return RuntimeHelper.requireNonNull(constants$156.ffmahd$MH,"ffmahd");
    }
    public static int ffmahd ( Addressable fptr,  int hdunum,  Addressable exttype,  Addressable status) {
        var mh$ = ffmahd$MH();
        try {
            return (int)mh$.invokeExact(fptr, hdunum, exttype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmrhd$MH() {
        return RuntimeHelper.requireNonNull(constants$156.ffmrhd$MH,"ffmrhd");
    }
    public static int ffmrhd ( Addressable fptr,  int hdumov,  Addressable exttype,  Addressable status) {
        var mh$ = ffmrhd$MH();
        try {
            return (int)mh$.invokeExact(fptr, hdumov, exttype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmnhd$MH() {
        return RuntimeHelper.requireNonNull(constants$157.ffmnhd$MH,"ffmnhd");
    }
    public static int ffmnhd ( Addressable fptr,  int exttype,  Addressable hduname,  int hduvers,  Addressable status) {
        var mh$ = ffmnhd$MH();
        try {
            return (int)mh$.invokeExact(fptr, exttype, hduname, hduvers, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffthdu$MH() {
        return RuntimeHelper.requireNonNull(constants$157.ffthdu$MH,"ffthdu");
    }
    public static int ffthdu ( Addressable fptr,  Addressable nhdu,  Addressable status) {
        var mh$ = ffthdu$MH();
        try {
            return (int)mh$.invokeExact(fptr, nhdu, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcrhd$MH() {
        return RuntimeHelper.requireNonNull(constants$157.ffcrhd$MH,"ffcrhd");
    }
    public static int ffcrhd ( Addressable fptr,  Addressable status) {
        var mh$ = ffcrhd$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcrim$MH() {
        return RuntimeHelper.requireNonNull(constants$157.ffcrim$MH,"ffcrim");
    }
    public static int ffcrim ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffcrim$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcrimll$MH() {
        return RuntimeHelper.requireNonNull(constants$157.ffcrimll$MH,"ffcrimll");
    }
    public static int ffcrimll ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffcrimll$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcrtb$MH() {
        return RuntimeHelper.requireNonNull(constants$157.ffcrtb$MH,"ffcrtb");
    }
    public static int ffcrtb ( Addressable fptr,  int tbltype,  long naxis2,  int tfields,  Addressable ttype,  Addressable tform,  Addressable tunit,  Addressable extname,  Addressable status) {
        var mh$ = ffcrtb$MH();
        try {
            return (int)mh$.invokeExact(fptr, tbltype, naxis2, tfields, ttype, tform, tunit, extname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffiimg$MH() {
        return RuntimeHelper.requireNonNull(constants$158.ffiimg$MH,"ffiimg");
    }
    public static int ffiimg ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffiimg$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffiimgll$MH() {
        return RuntimeHelper.requireNonNull(constants$158.ffiimgll$MH,"ffiimgll");
    }
    public static int ffiimgll ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffiimgll$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffitab$MH() {
        return RuntimeHelper.requireNonNull(constants$158.ffitab$MH,"ffitab");
    }
    public static int ffitab ( Addressable fptr,  long naxis1,  long naxis2,  int tfields,  Addressable ttype,  Addressable tbcol,  Addressable tform,  Addressable tunit,  Addressable extname,  Addressable status) {
        var mh$ = ffitab$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis1, naxis2, tfields, ttype, tbcol, tform, tunit, extname, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffibin$MH() {
        return RuntimeHelper.requireNonNull(constants$158.ffibin$MH,"ffibin");
    }
    public static int ffibin ( Addressable fptr,  long naxis2,  int tfields,  Addressable ttype,  Addressable tform,  Addressable tunit,  Addressable extname,  long pcount,  Addressable status) {
        var mh$ = ffibin$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis2, tfields, ttype, tform, tunit, extname, pcount, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrsim$MH() {
        return RuntimeHelper.requireNonNull(constants$158.ffrsim$MH,"ffrsim");
    }
    public static int ffrsim ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffrsim$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrsimll$MH() {
        return RuntimeHelper.requireNonNull(constants$158.ffrsimll$MH,"ffrsimll");
    }
    public static int ffrsimll ( Addressable fptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable status) {
        var mh$ = ffrsimll$MH();
        try {
            return (int)mh$.invokeExact(fptr, bitpix, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdhdu$MH() {
        return RuntimeHelper.requireNonNull(constants$159.ffdhdu$MH,"ffdhdu");
    }
    public static int ffdhdu ( Addressable fptr,  Addressable hdutype,  Addressable status) {
        var mh$ = ffdhdu$MH();
        try {
            return (int)mh$.invokeExact(fptr, hdutype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$159.ffcopy$MH,"ffcopy");
    }
    public static int ffcopy ( Addressable infptr,  Addressable outfptr,  int morekeys,  Addressable status) {
        var mh$ = ffcopy$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, morekeys, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcpfl$MH() {
        return RuntimeHelper.requireNonNull(constants$159.ffcpfl$MH,"ffcpfl");
    }
    public static int ffcpfl ( Addressable infptr,  Addressable outfptr,  int prev,  int cur,  int follow,  Addressable status) {
        var mh$ = ffcpfl$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, prev, cur, follow, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcphd$MH() {
        return RuntimeHelper.requireNonNull(constants$159.ffcphd$MH,"ffcphd");
    }
    public static int ffcphd ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = ffcphd$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcpdt$MH() {
        return RuntimeHelper.requireNonNull(constants$159.ffcpdt$MH,"ffcpdt");
    }
    public static int ffcpdt ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = ffcpdt$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffchfl$MH() {
        return RuntimeHelper.requireNonNull(constants$159.ffchfl$MH,"ffchfl");
    }
    public static int ffchfl ( Addressable fptr,  Addressable status) {
        var mh$ = ffchfl$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcdfl$MH() {
        return RuntimeHelper.requireNonNull(constants$160.ffcdfl$MH,"ffcdfl");
    }
    public static int ffcdfl ( Addressable fptr,  Addressable status) {
        var mh$ = ffcdfl$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffwrhdu$MH() {
        return RuntimeHelper.requireNonNull(constants$160.ffwrhdu$MH,"ffwrhdu");
    }
    public static int ffwrhdu ( Addressable fptr,  Addressable outstream,  Addressable status) {
        var mh$ = ffwrhdu$MH();
        try {
            return (int)mh$.invokeExact(fptr, outstream, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrdef$MH() {
        return RuntimeHelper.requireNonNull(constants$160.ffrdef$MH,"ffrdef");
    }
    public static int ffrdef ( Addressable fptr,  Addressable status) {
        var mh$ = ffrdef$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffrhdu$MH() {
        return RuntimeHelper.requireNonNull(constants$160.ffrhdu$MH,"ffrhdu");
    }
    public static int ffrhdu ( Addressable fptr,  Addressable hdutype,  Addressable status) {
        var mh$ = ffrhdu$MH();
        try {
            return (int)mh$.invokeExact(fptr, hdutype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffhdef$MH() {
        return RuntimeHelper.requireNonNull(constants$160.ffhdef$MH,"ffhdef");
    }
    public static int ffhdef ( Addressable fptr,  int morekeys,  Addressable status) {
        var mh$ = ffhdef$MH();
        try {
            return (int)mh$.invokeExact(fptr, morekeys, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpthp$MH() {
        return RuntimeHelper.requireNonNull(constants$160.ffpthp$MH,"ffpthp");
    }
    public static int ffpthp ( Addressable fptr,  int theap,  Addressable status) {
        var mh$ = ffpthp$MH();
        try {
            return (int)mh$.invokeExact(fptr, theap, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcsum$MH() {
        return RuntimeHelper.requireNonNull(constants$161.ffcsum$MH,"ffcsum");
    }
    public static int ffcsum ( Addressable fptr,  int nrec,  Addressable sum,  Addressable status) {
        var mh$ = ffcsum$MH();
        try {
            return (int)mh$.invokeExact(fptr, nrec, sum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffesum$MH() {
        return RuntimeHelper.requireNonNull(constants$161.ffesum$MH,"ffesum");
    }
    public static void ffesum ( int sum,  int complm,  Addressable ascii) {
        var mh$ = ffesum$MH();
        try {
            mh$.invokeExact(sum, complm, ascii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdsum$MH() {
        return RuntimeHelper.requireNonNull(constants$161.ffdsum$MH,"ffdsum");
    }
    public static int ffdsum ( Addressable ascii,  int complm,  Addressable sum) {
        var mh$ = ffdsum$MH();
        try {
            return (int)mh$.invokeExact(ascii, complm, sum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcks$MH() {
        return RuntimeHelper.requireNonNull(constants$161.ffpcks$MH,"ffpcks");
    }
    public static int ffpcks ( Addressable fptr,  Addressable status) {
        var mh$ = ffpcks$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffupck$MH() {
        return RuntimeHelper.requireNonNull(constants$161.ffupck$MH,"ffupck");
    }
    public static int ffupck ( Addressable fptr,  Addressable status) {
        var mh$ = ffupck$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffvcks$MH() {
        return RuntimeHelper.requireNonNull(constants$161.ffvcks$MH,"ffvcks");
    }
    public static int ffvcks ( Addressable fptr,  Addressable datastatus,  Addressable hdustatus,  Addressable status) {
        var mh$ = ffvcks$MH();
        try {
            return (int)mh$.invokeExact(fptr, datastatus, hdustatus, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcks$MH() {
        return RuntimeHelper.requireNonNull(constants$162.ffgcks$MH,"ffgcks");
    }
    public static int ffgcks ( Addressable fptr,  Addressable datasum,  Addressable hdusum,  Addressable status) {
        var mh$ = ffgcks$MH();
        try {
            return (int)mh$.invokeExact(fptr, datasum, hdusum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpscl$MH() {
        return RuntimeHelper.requireNonNull(constants$162.ffpscl$MH,"ffpscl");
    }
    public static int ffpscl ( Addressable fptr,  double scale,  double zeroval,  Addressable status) {
        var mh$ = ffpscl$MH();
        try {
            return (int)mh$.invokeExact(fptr, scale, zeroval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpnul$MH() {
        return RuntimeHelper.requireNonNull(constants$162.ffpnul$MH,"ffpnul");
    }
    public static int ffpnul ( Addressable fptr,  long nulvalue,  Addressable status) {
        var mh$ = ffpnul$MH();
        try {
            return (int)mh$.invokeExact(fptr, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftscl$MH() {
        return RuntimeHelper.requireNonNull(constants$162.fftscl$MH,"fftscl");
    }
    public static int fftscl ( Addressable fptr,  int colnum,  double scale,  double zeroval,  Addressable status) {
        var mh$ = fftscl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, scale, zeroval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftnul$MH() {
        return RuntimeHelper.requireNonNull(constants$162.fftnul$MH,"fftnul");
    }
    public static int fftnul ( Addressable fptr,  int colnum,  long nulvalue,  Addressable status) {
        var mh$ = fftnul$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsnul$MH() {
        return RuntimeHelper.requireNonNull(constants$162.ffsnul$MH,"ffsnul");
    }
    public static int ffsnul ( Addressable fptr,  int colnum,  Addressable nulstring,  Addressable status) {
        var mh$ = ffsnul$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, nulstring, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcno$MH() {
        return RuntimeHelper.requireNonNull(constants$163.ffgcno$MH,"ffgcno");
    }
    public static int ffgcno ( Addressable fptr,  int casesen,  Addressable templt,  Addressable colnum,  Addressable status) {
        var mh$ = ffgcno$MH();
        try {
            return (int)mh$.invokeExact(fptr, casesen, templt, colnum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcnn$MH() {
        return RuntimeHelper.requireNonNull(constants$163.ffgcnn$MH,"ffgcnn");
    }
    public static int ffgcnn ( Addressable fptr,  int casesen,  Addressable templt,  Addressable colname,  Addressable colnum,  Addressable status) {
        var mh$ = ffgcnn$MH();
        try {
            return (int)mh$.invokeExact(fptr, casesen, templt, colname, colnum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtcl$MH() {
        return RuntimeHelper.requireNonNull(constants$163.ffgtcl$MH,"ffgtcl");
    }
    public static int ffgtcl ( Addressable fptr,  int colnum,  Addressable typecode,  Addressable repeat,  Addressable width,  Addressable status) {
        var mh$ = ffgtcl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, typecode, repeat, width, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtclll$MH() {
        return RuntimeHelper.requireNonNull(constants$163.ffgtclll$MH,"ffgtclll");
    }
    public static int ffgtclll ( Addressable fptr,  int colnum,  Addressable typecode,  Addressable repeat,  Addressable width,  Addressable status) {
        var mh$ = ffgtclll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, typecode, repeat, width, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffeqty$MH() {
        return RuntimeHelper.requireNonNull(constants$163.ffeqty$MH,"ffeqty");
    }
    public static int ffeqty ( Addressable fptr,  int colnum,  Addressable typecode,  Addressable repeat,  Addressable width,  Addressable status) {
        var mh$ = ffeqty$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, typecode, repeat, width, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffeqtyll$MH() {
        return RuntimeHelper.requireNonNull(constants$163.ffeqtyll$MH,"ffeqtyll");
    }
    public static int ffeqtyll ( Addressable fptr,  int colnum,  Addressable typecode,  Addressable repeat,  Addressable width,  Addressable status) {
        var mh$ = ffeqtyll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, typecode, repeat, width, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgncl$MH() {
        return RuntimeHelper.requireNonNull(constants$164.ffgncl$MH,"ffgncl");
    }
    public static int ffgncl ( Addressable fptr,  Addressable ncols,  Addressable status) {
        var mh$ = ffgncl$MH();
        try {
            return (int)mh$.invokeExact(fptr, ncols, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgnrw$MH() {
        return RuntimeHelper.requireNonNull(constants$164.ffgnrw$MH,"ffgnrw");
    }
    public static int ffgnrw ( Addressable fptr,  Addressable nrows,  Addressable status) {
        var mh$ = ffgnrw$MH();
        try {
            return (int)mh$.invokeExact(fptr, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgnrwll$MH() {
        return RuntimeHelper.requireNonNull(constants$164.ffgnrwll$MH,"ffgnrwll");
    }
    public static int ffgnrwll ( Addressable fptr,  Addressable nrows,  Addressable status) {
        var mh$ = ffgnrwll$MH();
        try {
            return (int)mh$.invokeExact(fptr, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgacl$MH() {
        return RuntimeHelper.requireNonNull(constants$164.ffgacl$MH,"ffgacl");
    }
    public static int ffgacl ( Addressable fptr,  int colnum,  Addressable ttype,  Addressable tbcol,  Addressable tunit,  Addressable tform,  Addressable tscal,  Addressable tzero,  Addressable tnull,  Addressable tdisp,  Addressable status) {
        var mh$ = ffgacl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, ttype, tbcol, tunit, tform, tscal, tzero, tnull, tdisp, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgbcl$MH() {
        return RuntimeHelper.requireNonNull(constants$164.ffgbcl$MH,"ffgbcl");
    }
    public static int ffgbcl ( Addressable fptr,  int colnum,  Addressable ttype,  Addressable tunit,  Addressable dtype,  Addressable repeat,  Addressable tscal,  Addressable tzero,  Addressable tnull,  Addressable tdisp,  Addressable status) {
        var mh$ = ffgbcl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, ttype, tunit, dtype, repeat, tscal, tzero, tnull, tdisp, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgbclll$MH() {
        return RuntimeHelper.requireNonNull(constants$164.ffgbclll$MH,"ffgbclll");
    }
    public static int ffgbclll ( Addressable fptr,  int colnum,  Addressable ttype,  Addressable tunit,  Addressable dtype,  Addressable repeat,  Addressable tscal,  Addressable tzero,  Addressable tnull,  Addressable tdisp,  Addressable status) {
        var mh$ = ffgbclll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, ttype, tunit, dtype, repeat, tscal, tzero, tnull, tdisp, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgrsz$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ffgrsz$MH,"ffgrsz");
    }
    public static int ffgrsz ( Addressable fptr,  Addressable nrows,  Addressable status) {
        var mh$ = ffgrsz$MH();
        try {
            return (int)mh$.invokeExact(fptr, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcdw$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ffgcdw$MH,"ffgcdw");
    }
    public static int ffgcdw ( Addressable fptr,  int colnum,  Addressable width,  Addressable status) {
        var mh$ = ffgcdw$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, width, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpxv$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ffgpxv$MH,"ffgpxv");
    }
    public static int ffgpxv ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpxv$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpxvll$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ffgpxvll$MH,"ffgpxvll");
    }
    public static int ffgpxvll ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpxvll$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpxf$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ffgpxf$MH,"ffgpxf");
    }
    public static int ffgpxf ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable array,  Addressable nullarray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpxf$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, array, nullarray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpxfll$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ffgpxfll$MH,"ffgpxfll");
    }
    public static int ffgpxfll ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable array,  Addressable nullarray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpxfll$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, array, nullarray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsv$MH() {
        return RuntimeHelper.requireNonNull(constants$166.ffgsv$MH,"ffgsv");
    }
    public static int ffgsv ( Addressable fptr,  int datatype,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsv$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpv$MH() {
        return RuntimeHelper.requireNonNull(constants$166.ffgpv$MH,"ffgpv");
    }
    public static int ffgpv ( Addressable fptr,  int datatype,  long firstelem,  long nelem,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpv$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpf$MH() {
        return RuntimeHelper.requireNonNull(constants$166.ffgpf$MH,"ffgpf");
    }
    public static int ffgpf ( Addressable fptr,  int datatype,  long firstelem,  long nelem,  Addressable array,  Addressable nullarray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpf$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstelem, nelem, array, nullarray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvb$MH() {
        return RuntimeHelper.requireNonNull(constants$166.ffgpvb$MH,"ffgpvb");
    }
    public static int ffgpvb ( Addressable fptr,  int group,  long firstelem,  long nelem,  byte nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvsb$MH() {
        return RuntimeHelper.requireNonNull(constants$166.ffgpvsb$MH,"ffgpvsb");
    }
    public static int ffgpvsb ( Addressable fptr,  int group,  long firstelem,  long nelem,  byte nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvui$MH() {
        return RuntimeHelper.requireNonNull(constants$166.ffgpvui$MH,"ffgpvui");
    }
    public static int ffgpvui ( Addressable fptr,  int group,  long firstelem,  long nelem,  short nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvi$MH() {
        return RuntimeHelper.requireNonNull(constants$167.ffgpvi$MH,"ffgpvi");
    }
    public static int ffgpvi ( Addressable fptr,  int group,  long firstelem,  long nelem,  short nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvi$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvuj$MH() {
        return RuntimeHelper.requireNonNull(constants$167.ffgpvuj$MH,"ffgpvuj");
    }
    public static int ffgpvuj ( Addressable fptr,  int group,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvj$MH() {
        return RuntimeHelper.requireNonNull(constants$167.ffgpvj$MH,"ffgpvj");
    }
    public static int ffgpvj ( Addressable fptr,  int group,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvujj$MH() {
        return RuntimeHelper.requireNonNull(constants$167.ffgpvujj$MH,"ffgpvujj");
    }
    public static int ffgpvujj ( Addressable fptr,  int group,  long firstelem,  long nelem,  long nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvjj$MH() {
        return RuntimeHelper.requireNonNull(constants$167.ffgpvjj$MH,"ffgpvjj");
    }
    public static int ffgpvjj ( Addressable fptr,  int group,  long firstelem,  long nelem,  long nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvuk$MH() {
        return RuntimeHelper.requireNonNull(constants$167.ffgpvuk$MH,"ffgpvuk");
    }
    public static int ffgpvuk ( Addressable fptr,  int group,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvk$MH() {
        return RuntimeHelper.requireNonNull(constants$168.ffgpvk$MH,"ffgpvk");
    }
    public static int ffgpvk ( Addressable fptr,  int group,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpve$MH() {
        return RuntimeHelper.requireNonNull(constants$168.ffgpve$MH,"ffgpve");
    }
    public static int ffgpve ( Addressable fptr,  int group,  long firstelem,  long nelem,  float nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpve$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpvd$MH() {
        return RuntimeHelper.requireNonNull(constants$168.ffgpvd$MH,"ffgpvd");
    }
    public static int ffgpvd ( Addressable fptr,  int group,  long firstelem,  long nelem,  double nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpvd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfb$MH() {
        return RuntimeHelper.requireNonNull(constants$168.ffgpfb$MH,"ffgpfb");
    }
    public static int ffgpfb ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfsb$MH() {
        return RuntimeHelper.requireNonNull(constants$168.ffgpfsb$MH,"ffgpfsb");
    }
    public static int ffgpfsb ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfui$MH() {
        return RuntimeHelper.requireNonNull(constants$168.ffgpfui$MH,"ffgpfui");
    }
    public static int ffgpfui ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfi$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ffgpfi$MH,"ffgpfi");
    }
    public static int ffgpfi ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfi$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfuj$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ffgpfuj$MH,"ffgpfuj");
    }
    public static int ffgpfuj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfj$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ffgpfj$MH,"ffgpfj");
    }
    public static int ffgpfj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfujj$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ffgpfujj$MH,"ffgpfujj");
    }
    public static int ffgpfujj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfjj$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ffgpfjj$MH,"ffgpfjj");
    }
    public static int ffgpfjj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfuk$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ffgpfuk$MH,"ffgpfuk");
    }
    public static int ffgpfuk ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfk$MH() {
        return RuntimeHelper.requireNonNull(constants$170.ffgpfk$MH,"ffgpfk");
    }
    public static int ffgpfk ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfe$MH() {
        return RuntimeHelper.requireNonNull(constants$170.ffgpfe$MH,"ffgpfe");
    }
    public static int ffgpfe ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfe$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgpfd$MH() {
        return RuntimeHelper.requireNonNull(constants$170.ffgpfd$MH,"ffgpfd");
    }
    public static int ffgpfd ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgpfd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2db$MH() {
        return RuntimeHelper.requireNonNull(constants$170.ffg2db$MH,"ffg2db");
    }
    public static int ffg2db ( Addressable fptr,  int group,  byte nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2db$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2dsb$MH() {
        return RuntimeHelper.requireNonNull(constants$170.ffg2dsb$MH,"ffg2dsb");
    }
    public static int ffg2dsb ( Addressable fptr,  int group,  byte nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2dsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2dui$MH() {
        return RuntimeHelper.requireNonNull(constants$170.ffg2dui$MH,"ffg2dui");
    }
    public static int ffg2dui ( Addressable fptr,  int group,  short nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2dui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2di$MH() {
        return RuntimeHelper.requireNonNull(constants$171.ffg2di$MH,"ffg2di");
    }
    public static int ffg2di ( Addressable fptr,  int group,  short nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2di$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2duj$MH() {
        return RuntimeHelper.requireNonNull(constants$171.ffg2duj$MH,"ffg2duj");
    }
    public static int ffg2duj ( Addressable fptr,  int group,  int nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2duj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2dj$MH() {
        return RuntimeHelper.requireNonNull(constants$171.ffg2dj$MH,"ffg2dj");
    }
    public static int ffg2dj ( Addressable fptr,  int group,  int nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2dj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2dujj$MH() {
        return RuntimeHelper.requireNonNull(constants$171.ffg2dujj$MH,"ffg2dujj");
    }
    public static int ffg2dujj ( Addressable fptr,  int group,  long nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2dujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2djj$MH() {
        return RuntimeHelper.requireNonNull(constants$171.ffg2djj$MH,"ffg2djj");
    }
    public static int ffg2djj ( Addressable fptr,  int group,  long nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2djj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2duk$MH() {
        return RuntimeHelper.requireNonNull(constants$171.ffg2duk$MH,"ffg2duk");
    }
    public static int ffg2duk ( Addressable fptr,  int group,  int nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2duk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2dk$MH() {
        return RuntimeHelper.requireNonNull(constants$172.ffg2dk$MH,"ffg2dk");
    }
    public static int ffg2dk ( Addressable fptr,  int group,  int nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2dk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2de$MH() {
        return RuntimeHelper.requireNonNull(constants$172.ffg2de$MH,"ffg2de");
    }
    public static int ffg2de ( Addressable fptr,  int group,  float nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2de$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg2dd$MH() {
        return RuntimeHelper.requireNonNull(constants$172.ffg2dd$MH,"ffg2dd");
    }
    public static int ffg2dd ( Addressable fptr,  int group,  double nulval,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg2dd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, naxis1, naxis2, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3db$MH() {
        return RuntimeHelper.requireNonNull(constants$172.ffg3db$MH,"ffg3db");
    }
    public static int ffg3db ( Addressable fptr,  int group,  byte nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3db$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3dsb$MH() {
        return RuntimeHelper.requireNonNull(constants$172.ffg3dsb$MH,"ffg3dsb");
    }
    public static int ffg3dsb ( Addressable fptr,  int group,  byte nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3dsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3dui$MH() {
        return RuntimeHelper.requireNonNull(constants$172.ffg3dui$MH,"ffg3dui");
    }
    public static int ffg3dui ( Addressable fptr,  int group,  short nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3dui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3di$MH() {
        return RuntimeHelper.requireNonNull(constants$173.ffg3di$MH,"ffg3di");
    }
    public static int ffg3di ( Addressable fptr,  int group,  short nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3di$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3duj$MH() {
        return RuntimeHelper.requireNonNull(constants$173.ffg3duj$MH,"ffg3duj");
    }
    public static int ffg3duj ( Addressable fptr,  int group,  int nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3duj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3dj$MH() {
        return RuntimeHelper.requireNonNull(constants$173.ffg3dj$MH,"ffg3dj");
    }
    public static int ffg3dj ( Addressable fptr,  int group,  int nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3dj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3dujj$MH() {
        return RuntimeHelper.requireNonNull(constants$173.ffg3dujj$MH,"ffg3dujj");
    }
    public static int ffg3dujj ( Addressable fptr,  int group,  long nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3dujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3djj$MH() {
        return RuntimeHelper.requireNonNull(constants$173.ffg3djj$MH,"ffg3djj");
    }
    public static int ffg3djj ( Addressable fptr,  int group,  long nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3djj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3duk$MH() {
        return RuntimeHelper.requireNonNull(constants$173.ffg3duk$MH,"ffg3duk");
    }
    public static int ffg3duk ( Addressable fptr,  int group,  int nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3duk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3dk$MH() {
        return RuntimeHelper.requireNonNull(constants$174.ffg3dk$MH,"ffg3dk");
    }
    public static int ffg3dk ( Addressable fptr,  int group,  int nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3dk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3de$MH() {
        return RuntimeHelper.requireNonNull(constants$174.ffg3de$MH,"ffg3de");
    }
    public static int ffg3de ( Addressable fptr,  int group,  float nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3de$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffg3dd$MH() {
        return RuntimeHelper.requireNonNull(constants$174.ffg3dd$MH,"ffg3dd");
    }
    public static int ffg3dd ( Addressable fptr,  int group,  double nulval,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffg3dd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, nulval, ncols, nrows, naxis1, naxis2, naxis3, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvb$MH() {
        return RuntimeHelper.requireNonNull(constants$174.ffgsvb$MH,"ffgsvb");
    }
    public static int ffgsvb ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  byte nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvsb$MH() {
        return RuntimeHelper.requireNonNull(constants$174.ffgsvsb$MH,"ffgsvsb");
    }
    public static int ffgsvsb ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  byte nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvui$MH() {
        return RuntimeHelper.requireNonNull(constants$174.ffgsvui$MH,"ffgsvui");
    }
    public static int ffgsvui ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  short nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvui$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvi$MH() {
        return RuntimeHelper.requireNonNull(constants$175.ffgsvi$MH,"ffgsvi");
    }
    public static int ffgsvi ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  short nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvi$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvuj$MH() {
        return RuntimeHelper.requireNonNull(constants$175.ffgsvuj$MH,"ffgsvuj");
    }
    public static int ffgsvuj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvj$MH() {
        return RuntimeHelper.requireNonNull(constants$175.ffgsvj$MH,"ffgsvj");
    }
    public static int ffgsvj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvujj$MH() {
        return RuntimeHelper.requireNonNull(constants$175.ffgsvujj$MH,"ffgsvujj");
    }
    public static int ffgsvujj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  long nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvjj$MH() {
        return RuntimeHelper.requireNonNull(constants$175.ffgsvjj$MH,"ffgsvjj");
    }
    public static int ffgsvjj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  long nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvuk$MH() {
        return RuntimeHelper.requireNonNull(constants$175.ffgsvuk$MH,"ffgsvuk");
    }
    public static int ffgsvuk ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvk$MH() {
        return RuntimeHelper.requireNonNull(constants$176.ffgsvk$MH,"ffgsvk");
    }
    public static int ffgsvk ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsve$MH() {
        return RuntimeHelper.requireNonNull(constants$176.ffgsve$MH,"ffgsve");
    }
    public static int ffgsve ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  float nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsve$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsvd$MH() {
        return RuntimeHelper.requireNonNull(constants$176.ffgsvd$MH,"ffgsvd");
    }
    public static int ffgsvd ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  double nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsvd$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfb$MH() {
        return RuntimeHelper.requireNonNull(constants$176.ffgsfb$MH,"ffgsfb");
    }
    public static int ffgsfb ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfsb$MH() {
        return RuntimeHelper.requireNonNull(constants$176.ffgsfsb$MH,"ffgsfsb");
    }
    public static int ffgsfsb ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfui$MH() {
        return RuntimeHelper.requireNonNull(constants$176.ffgsfui$MH,"ffgsfui");
    }
    public static int ffgsfui ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfui$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfi$MH() {
        return RuntimeHelper.requireNonNull(constants$177.ffgsfi$MH,"ffgsfi");
    }
    public static int ffgsfi ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfi$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfuj$MH() {
        return RuntimeHelper.requireNonNull(constants$177.ffgsfuj$MH,"ffgsfuj");
    }
    public static int ffgsfuj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfj$MH() {
        return RuntimeHelper.requireNonNull(constants$177.ffgsfj$MH,"ffgsfj");
    }
    public static int ffgsfj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfujj$MH() {
        return RuntimeHelper.requireNonNull(constants$177.ffgsfujj$MH,"ffgsfujj");
    }
    public static int ffgsfujj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfjj$MH() {
        return RuntimeHelper.requireNonNull(constants$177.ffgsfjj$MH,"ffgsfjj");
    }
    public static int ffgsfjj ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfuk$MH() {
        return RuntimeHelper.requireNonNull(constants$177.ffgsfuk$MH,"ffgsfuk");
    }
    public static int ffgsfuk ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfk$MH() {
        return RuntimeHelper.requireNonNull(constants$178.ffgsfk$MH,"ffgsfk");
    }
    public static int ffgsfk ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfe$MH() {
        return RuntimeHelper.requireNonNull(constants$178.ffgsfe$MH,"ffgsfe");
    }
    public static int ffgsfe ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfe$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgsfd$MH() {
        return RuntimeHelper.requireNonNull(constants$178.ffgsfd$MH,"ffgsfd");
    }
    public static int ffgsfd ( Addressable fptr,  int colnum,  int naxis,  Addressable naxes,  Addressable blc,  Addressable trc,  Addressable inc,  Addressable array,  Addressable flagval,  Addressable anynul,  Addressable status) {
        var mh$ = ffgsfd$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, naxis, naxes, blc, trc, inc, array, flagval, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpb$MH() {
        return RuntimeHelper.requireNonNull(constants$178.ffggpb$MH,"ffggpb");
    }
    public static int ffggpb ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpsb$MH() {
        return RuntimeHelper.requireNonNull(constants$178.ffggpsb$MH,"ffggpsb");
    }
    public static int ffggpsb ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpui$MH() {
        return RuntimeHelper.requireNonNull(constants$178.ffggpui$MH,"ffggpui");
    }
    public static int ffggpui ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpi$MH() {
        return RuntimeHelper.requireNonNull(constants$179.ffggpi$MH,"ffggpi");
    }
    public static int ffggpi ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpi$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpuj$MH() {
        return RuntimeHelper.requireNonNull(constants$179.ffggpuj$MH,"ffggpuj");
    }
    public static int ffggpuj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpj$MH() {
        return RuntimeHelper.requireNonNull(constants$179.ffggpj$MH,"ffggpj");
    }
    public static int ffggpj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpujj$MH() {
        return RuntimeHelper.requireNonNull(constants$179.ffggpujj$MH,"ffggpujj");
    }
    public static int ffggpujj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpjj$MH() {
        return RuntimeHelper.requireNonNull(constants$179.ffggpjj$MH,"ffggpjj");
    }
    public static int ffggpjj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpuk$MH() {
        return RuntimeHelper.requireNonNull(constants$179.ffggpuk$MH,"ffggpuk");
    }
    public static int ffggpuk ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpk$MH() {
        return RuntimeHelper.requireNonNull(constants$180.ffggpk$MH,"ffggpk");
    }
    public static int ffggpk ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpe$MH() {
        return RuntimeHelper.requireNonNull(constants$180.ffggpe$MH,"ffggpe");
    }
    public static int ffggpe ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpe$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffggpd$MH() {
        return RuntimeHelper.requireNonNull(constants$180.ffggpd$MH,"ffggpd");
    }
    public static int ffggpd ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffggpd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcv$MH() {
        return RuntimeHelper.requireNonNull(constants$180.ffgcv$MH,"ffgcv");
    }
    public static int ffgcv ( Addressable fptr,  int datatype,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcv$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvn$MH() {
        return RuntimeHelper.requireNonNull(constants$180.ffgcvn$MH,"ffgcvn");
    }
    public static int ffgcvn ( Addressable fptr,  int ncols,  Addressable datatype,  Addressable colnum,  long firstrow,  long nrows,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvn$MH();
        try {
            return (int)mh$.invokeExact(fptr, ncols, datatype, colnum, firstrow, nrows, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcf$MH() {
        return RuntimeHelper.requireNonNull(constants$180.ffgcf$MH,"ffgcf");
    }
    public static int ffgcf ( Addressable fptr,  int datatype,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nullarray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcf$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, colnum, firstrow, firstelem, nelem, array, nullarray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvs$MH() {
        return RuntimeHelper.requireNonNull(constants$181.ffgcvs$MH,"ffgcvs");
    }
    public static int ffgcvs ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvs$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcl$MH() {
        return RuntimeHelper.requireNonNull(constants$181.ffgcl$MH,"ffgcl");
    }
    public static int ffgcl ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffgcl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvl$MH() {
        return RuntimeHelper.requireNonNull(constants$181.ffgcvl$MH,"ffgcvl");
    }
    public static int ffgcvl ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  byte nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvb$MH() {
        return RuntimeHelper.requireNonNull(constants$181.ffgcvb$MH,"ffgcvb");
    }
    public static int ffgcvb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  byte nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvsb$MH() {
        return RuntimeHelper.requireNonNull(constants$181.ffgcvsb$MH,"ffgcvsb");
    }
    public static int ffgcvsb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  byte nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvui$MH() {
        return RuntimeHelper.requireNonNull(constants$181.ffgcvui$MH,"ffgcvui");
    }
    public static int ffgcvui ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  short nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvui$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvi$MH() {
        return RuntimeHelper.requireNonNull(constants$182.ffgcvi$MH,"ffgcvi");
    }
    public static int ffgcvi ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  short nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvi$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvuj$MH() {
        return RuntimeHelper.requireNonNull(constants$182.ffgcvuj$MH,"ffgcvuj");
    }
    public static int ffgcvuj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvj$MH() {
        return RuntimeHelper.requireNonNull(constants$182.ffgcvj$MH,"ffgcvj");
    }
    public static int ffgcvj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvujj$MH() {
        return RuntimeHelper.requireNonNull(constants$182.ffgcvujj$MH,"ffgcvujj");
    }
    public static int ffgcvujj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  long nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvjj$MH() {
        return RuntimeHelper.requireNonNull(constants$182.ffgcvjj$MH,"ffgcvjj");
    }
    public static int ffgcvjj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  long nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvuk$MH() {
        return RuntimeHelper.requireNonNull(constants$182.ffgcvuk$MH,"ffgcvuk");
    }
    public static int ffgcvuk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvk$MH() {
        return RuntimeHelper.requireNonNull(constants$183.ffgcvk$MH,"ffgcvk");
    }
    public static int ffgcvk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  int nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcve$MH() {
        return RuntimeHelper.requireNonNull(constants$183.ffgcve$MH,"ffgcve");
    }
    public static int ffgcve ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  float nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcve$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvd$MH() {
        return RuntimeHelper.requireNonNull(constants$183.ffgcvd$MH,"ffgcvd");
    }
    public static int ffgcvd ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  double nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvd$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvc$MH() {
        return RuntimeHelper.requireNonNull(constants$183.ffgcvc$MH,"ffgcvc");
    }
    public static int ffgcvc ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  float nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvc$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcvm$MH() {
        return RuntimeHelper.requireNonNull(constants$183.ffgcvm$MH,"ffgcvm");
    }
    public static int ffgcvm ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  double nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcvm$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcx$MH() {
        return RuntimeHelper.requireNonNull(constants$183.ffgcx$MH,"ffgcx");
    }
    public static int ffgcx ( Addressable fptr,  int colnum,  long firstrow,  long firstbit,  long nbits,  Addressable larray,  Addressable status) {
        var mh$ = ffgcx$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstbit, nbits, larray, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcxui$MH() {
        return RuntimeHelper.requireNonNull(constants$184.ffgcxui$MH,"ffgcxui");
    }
    public static int ffgcxui ( Addressable fptr,  int colnum,  long firstrow,  long nrows,  int firstbit,  int nbits,  Addressable array,  Addressable status) {
        var mh$ = ffgcxui$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, nrows, firstbit, nbits, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcxuk$MH() {
        return RuntimeHelper.requireNonNull(constants$184.ffgcxuk$MH,"ffgcxuk");
    }
    public static int ffgcxuk ( Addressable fptr,  int colnum,  long firstrow,  long nrows,  int firstbit,  int nbits,  Addressable array,  Addressable status) {
        var mh$ = ffgcxuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, nrows, firstbit, nbits, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfs$MH() {
        return RuntimeHelper.requireNonNull(constants$184.ffgcfs$MH,"ffgcfs");
    }
    public static int ffgcfs ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfs$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfl$MH() {
        return RuntimeHelper.requireNonNull(constants$184.ffgcfl$MH,"ffgcfl");
    }
    public static int ffgcfl ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfb$MH() {
        return RuntimeHelper.requireNonNull(constants$184.ffgcfb$MH,"ffgcfb");
    }
    public static int ffgcfb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfsb$MH() {
        return RuntimeHelper.requireNonNull(constants$184.ffgcfsb$MH,"ffgcfsb");
    }
    public static int ffgcfsb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfui$MH() {
        return RuntimeHelper.requireNonNull(constants$185.ffgcfui$MH,"ffgcfui");
    }
    public static int ffgcfui ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfui$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfi$MH() {
        return RuntimeHelper.requireNonNull(constants$185.ffgcfi$MH,"ffgcfi");
    }
    public static int ffgcfi ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfi$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfuj$MH() {
        return RuntimeHelper.requireNonNull(constants$185.ffgcfuj$MH,"ffgcfuj");
    }
    public static int ffgcfuj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfj$MH() {
        return RuntimeHelper.requireNonNull(constants$185.ffgcfj$MH,"ffgcfj");
    }
    public static int ffgcfj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfujj$MH() {
        return RuntimeHelper.requireNonNull(constants$185.ffgcfujj$MH,"ffgcfujj");
    }
    public static int ffgcfujj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfjj$MH() {
        return RuntimeHelper.requireNonNull(constants$185.ffgcfjj$MH,"ffgcfjj");
    }
    public static int ffgcfjj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfuk$MH() {
        return RuntimeHelper.requireNonNull(constants$186.ffgcfuk$MH,"ffgcfuk");
    }
    public static int ffgcfuk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfk$MH() {
        return RuntimeHelper.requireNonNull(constants$186.ffgcfk$MH,"ffgcfk");
    }
    public static int ffgcfk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfe$MH() {
        return RuntimeHelper.requireNonNull(constants$186.ffgcfe$MH,"ffgcfe");
    }
    public static int ffgcfe ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfe$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfd$MH() {
        return RuntimeHelper.requireNonNull(constants$186.ffgcfd$MH,"ffgcfd");
    }
    public static int ffgcfd ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfd$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfc$MH() {
        return RuntimeHelper.requireNonNull(constants$186.ffgcfc$MH,"ffgcfc");
    }
    public static int ffgcfc ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfc$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgcfm$MH() {
        return RuntimeHelper.requireNonNull(constants$186.ffgcfm$MH,"ffgcfm");
    }
    public static int ffgcfm ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nularray,  Addressable anynul,  Addressable status) {
        var mh$ = ffgcfm$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nularray, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgdes$MH() {
        return RuntimeHelper.requireNonNull(constants$187.ffgdes$MH,"ffgdes");
    }
    public static int ffgdes ( Addressable fptr,  int colnum,  long rownum,  Addressable length,  Addressable heapaddr,  Addressable status) {
        var mh$ = ffgdes$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, rownum, length, heapaddr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgdesll$MH() {
        return RuntimeHelper.requireNonNull(constants$187.ffgdesll$MH,"ffgdesll");
    }
    public static int ffgdesll ( Addressable fptr,  int colnum,  long rownum,  Addressable length,  Addressable heapaddr,  Addressable status) {
        var mh$ = ffgdesll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, rownum, length, heapaddr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgdess$MH() {
        return RuntimeHelper.requireNonNull(constants$187.ffgdess$MH,"ffgdess");
    }
    public static int ffgdess ( Addressable fptr,  int colnum,  long firstrow,  long nrows,  Addressable length,  Addressable heapaddr,  Addressable status) {
        var mh$ = ffgdess$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, nrows, length, heapaddr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgdessll$MH() {
        return RuntimeHelper.requireNonNull(constants$187.ffgdessll$MH,"ffgdessll");
    }
    public static int ffgdessll ( Addressable fptr,  int colnum,  long firstrow,  long nrows,  Addressable length,  Addressable heapaddr,  Addressable status) {
        var mh$ = ffgdessll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, nrows, length, heapaddr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpdes$MH() {
        return RuntimeHelper.requireNonNull(constants$187.ffpdes$MH,"ffpdes");
    }
    public static int ffpdes ( Addressable fptr,  int colnum,  long rownum,  long length,  long heapaddr,  Addressable status) {
        var mh$ = ffpdes$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, rownum, length, heapaddr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftheap$MH() {
        return RuntimeHelper.requireNonNull(constants$187.fftheap$MH,"fftheap");
    }
    public static int fftheap ( Addressable fptr,  Addressable heapsize,  Addressable unused,  Addressable overlap,  Addressable valid,  Addressable status) {
        var mh$ = fftheap$MH();
        try {
            return (int)mh$.invokeExact(fptr, heapsize, unused, overlap, valid, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcmph$MH() {
        return RuntimeHelper.requireNonNull(constants$188.ffcmph$MH,"ffcmph");
    }
    public static int ffcmph ( Addressable fptr,  Addressable status) {
        var mh$ = ffcmph$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtbb$MH() {
        return RuntimeHelper.requireNonNull(constants$188.ffgtbb$MH,"ffgtbb");
    }
    public static int ffgtbb ( Addressable fptr,  long firstrow,  long firstchar,  long nchars,  Addressable values,  Addressable status) {
        var mh$ = ffgtbb$MH();
        try {
            return (int)mh$.invokeExact(fptr, firstrow, firstchar, nchars, values, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgextn$MH() {
        return RuntimeHelper.requireNonNull(constants$188.ffgextn$MH,"ffgextn");
    }
    public static int ffgextn ( Addressable fptr,  long offset,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffgextn$MH();
        try {
            return (int)mh$.invokeExact(fptr, offset, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpextn$MH() {
        return RuntimeHelper.requireNonNull(constants$188.ffpextn$MH,"ffpextn");
    }
    public static int ffpextn ( Addressable fptr,  long offset,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpextn$MH();
        try {
            return (int)mh$.invokeExact(fptr, offset, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppx$MH() {
        return RuntimeHelper.requireNonNull(constants$188.ffppx$MH,"ffppx");
    }
    public static int ffppx ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffppx$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppxll$MH() {
        return RuntimeHelper.requireNonNull(constants$188.ffppxll$MH,"ffppxll");
    }
    public static int ffppxll ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffppxll$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppxn$MH() {
        return RuntimeHelper.requireNonNull(constants$189.ffppxn$MH,"ffppxn");
    }
    public static int ffppxn ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable array,  Addressable nulval,  Addressable status) {
        var mh$ = ffppxn$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppxnll$MH() {
        return RuntimeHelper.requireNonNull(constants$189.ffppxnll$MH,"ffppxnll");
    }
    public static int ffppxnll ( Addressable fptr,  int datatype,  Addressable firstpix,  long nelem,  Addressable array,  Addressable nulval,  Addressable status) {
        var mh$ = ffppxnll$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstpix, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppr$MH() {
        return RuntimeHelper.requireNonNull(constants$189.ffppr$MH,"ffppr");
    }
    public static int ffppr ( Addressable fptr,  int datatype,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffppr$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprb$MH() {
        return RuntimeHelper.requireNonNull(constants$189.ffpprb$MH,"ffpprb");
    }
    public static int ffpprb ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprsb$MH() {
        return RuntimeHelper.requireNonNull(constants$189.ffpprsb$MH,"ffpprsb");
    }
    public static int ffpprsb ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprui$MH() {
        return RuntimeHelper.requireNonNull(constants$189.ffpprui$MH,"ffpprui");
    }
    public static int ffpprui ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppri$MH() {
        return RuntimeHelper.requireNonNull(constants$190.ffppri$MH,"ffppri");
    }
    public static int ffppri ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffppri$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppruj$MH() {
        return RuntimeHelper.requireNonNull(constants$190.ffppruj$MH,"ffppruj");
    }
    public static int ffppruj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffppruj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprj$MH() {
        return RuntimeHelper.requireNonNull(constants$190.ffpprj$MH,"ffpprj");
    }
    public static int ffpprj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppruk$MH() {
        return RuntimeHelper.requireNonNull(constants$190.ffppruk$MH,"ffppruk");
    }
    public static int ffppruk ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffppruk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprk$MH() {
        return RuntimeHelper.requireNonNull(constants$190.ffpprk$MH,"ffpprk");
    }
    public static int ffpprk ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppre$MH() {
        return RuntimeHelper.requireNonNull(constants$190.ffppre$MH,"ffppre");
    }
    public static int ffppre ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffppre$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprd$MH() {
        return RuntimeHelper.requireNonNull(constants$191.ffpprd$MH,"ffpprd");
    }
    public static int ffpprd ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprjj$MH() {
        return RuntimeHelper.requireNonNull(constants$191.ffpprjj$MH,"ffpprjj");
    }
    public static int ffpprjj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprujj$MH() {
        return RuntimeHelper.requireNonNull(constants$191.ffpprujj$MH,"ffpprujj");
    }
    public static int ffpprujj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpprujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppru$MH() {
        return RuntimeHelper.requireNonNull(constants$191.ffppru$MH,"ffppru");
    }
    public static int ffppru ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable status) {
        var mh$ = ffppru$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpprn$MH() {
        return RuntimeHelper.requireNonNull(constants$191.ffpprn$MH,"ffpprn");
    }
    public static int ffpprn ( Addressable fptr,  long firstelem,  long nelem,  Addressable status) {
        var mh$ = ffpprn$MH();
        try {
            return (int)mh$.invokeExact(fptr, firstelem, nelem, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppn$MH() {
        return RuntimeHelper.requireNonNull(constants$191.ffppn$MH,"ffppn");
    }
    public static int ffppn ( Addressable fptr,  int datatype,  long firstelem,  long nelem,  Addressable array,  Addressable nulval,  Addressable status) {
        var mh$ = ffppn$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnb$MH() {
        return RuntimeHelper.requireNonNull(constants$192.ffppnb$MH,"ffppnb");
    }
    public static int ffppnb ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  byte nulval,  Addressable status) {
        var mh$ = ffppnb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnsb$MH() {
        return RuntimeHelper.requireNonNull(constants$192.ffppnsb$MH,"ffppnsb");
    }
    public static int ffppnsb ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  byte nulval,  Addressable status) {
        var mh$ = ffppnsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnui$MH() {
        return RuntimeHelper.requireNonNull(constants$192.ffppnui$MH,"ffppnui");
    }
    public static int ffppnui ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  short nulval,  Addressable status) {
        var mh$ = ffppnui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppni$MH() {
        return RuntimeHelper.requireNonNull(constants$192.ffppni$MH,"ffppni");
    }
    public static int ffppni ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  short nulval,  Addressable status) {
        var mh$ = ffppni$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnj$MH() {
        return RuntimeHelper.requireNonNull(constants$192.ffppnj$MH,"ffppnj");
    }
    public static int ffppnj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  int nulval,  Addressable status) {
        var mh$ = ffppnj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnuj$MH() {
        return RuntimeHelper.requireNonNull(constants$192.ffppnuj$MH,"ffppnuj");
    }
    public static int ffppnuj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  int nulval,  Addressable status) {
        var mh$ = ffppnuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnuk$MH() {
        return RuntimeHelper.requireNonNull(constants$193.ffppnuk$MH,"ffppnuk");
    }
    public static int ffppnuk ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  int nulval,  Addressable status) {
        var mh$ = ffppnuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnk$MH() {
        return RuntimeHelper.requireNonNull(constants$193.ffppnk$MH,"ffppnk");
    }
    public static int ffppnk ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  int nulval,  Addressable status) {
        var mh$ = ffppnk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppne$MH() {
        return RuntimeHelper.requireNonNull(constants$193.ffppne$MH,"ffppne");
    }
    public static int ffppne ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  float nulval,  Addressable status) {
        var mh$ = ffppne$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnd$MH() {
        return RuntimeHelper.requireNonNull(constants$193.ffppnd$MH,"ffppnd");
    }
    public static int ffppnd ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  double nulval,  Addressable status) {
        var mh$ = ffppnd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnjj$MH() {
        return RuntimeHelper.requireNonNull(constants$193.ffppnjj$MH,"ffppnjj");
    }
    public static int ffppnjj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  long nulval,  Addressable status) {
        var mh$ = ffppnjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffppnujj$MH() {
        return RuntimeHelper.requireNonNull(constants$193.ffppnujj$MH,"ffppnujj");
    }
    public static int ffppnujj ( Addressable fptr,  int group,  long firstelem,  long nelem,  Addressable array,  long nulval,  Addressable status) {
        var mh$ = ffppnujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2db$MH() {
        return RuntimeHelper.requireNonNull(constants$194.ffp2db$MH,"ffp2db");
    }
    public static int ffp2db ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2db$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2dsb$MH() {
        return RuntimeHelper.requireNonNull(constants$194.ffp2dsb$MH,"ffp2dsb");
    }
    public static int ffp2dsb ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2dsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2dui$MH() {
        return RuntimeHelper.requireNonNull(constants$194.ffp2dui$MH,"ffp2dui");
    }
    public static int ffp2dui ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2dui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2di$MH() {
        return RuntimeHelper.requireNonNull(constants$194.ffp2di$MH,"ffp2di");
    }
    public static int ffp2di ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2di$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2duj$MH() {
        return RuntimeHelper.requireNonNull(constants$194.ffp2duj$MH,"ffp2duj");
    }
    public static int ffp2duj ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2duj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2dj$MH() {
        return RuntimeHelper.requireNonNull(constants$194.ffp2dj$MH,"ffp2dj");
    }
    public static int ffp2dj ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2dj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2duk$MH() {
        return RuntimeHelper.requireNonNull(constants$195.ffp2duk$MH,"ffp2duk");
    }
    public static int ffp2duk ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2duk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2dk$MH() {
        return RuntimeHelper.requireNonNull(constants$195.ffp2dk$MH,"ffp2dk");
    }
    public static int ffp2dk ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2dk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2de$MH() {
        return RuntimeHelper.requireNonNull(constants$195.ffp2de$MH,"ffp2de");
    }
    public static int ffp2de ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2de$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2dd$MH() {
        return RuntimeHelper.requireNonNull(constants$195.ffp2dd$MH,"ffp2dd");
    }
    public static int ffp2dd ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2dd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2djj$MH() {
        return RuntimeHelper.requireNonNull(constants$195.ffp2djj$MH,"ffp2djj");
    }
    public static int ffp2djj ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2djj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp2dujj$MH() {
        return RuntimeHelper.requireNonNull(constants$195.ffp2dujj$MH,"ffp2dujj");
    }
    public static int ffp2dujj ( Addressable fptr,  int group,  long ncols,  long naxis1,  long naxis2,  Addressable array,  Addressable status) {
        var mh$ = ffp2dujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, naxis1, naxis2, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3db$MH() {
        return RuntimeHelper.requireNonNull(constants$196.ffp3db$MH,"ffp3db");
    }
    public static int ffp3db ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3db$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3dsb$MH() {
        return RuntimeHelper.requireNonNull(constants$196.ffp3dsb$MH,"ffp3dsb");
    }
    public static int ffp3dsb ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3dsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3dui$MH() {
        return RuntimeHelper.requireNonNull(constants$196.ffp3dui$MH,"ffp3dui");
    }
    public static int ffp3dui ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3dui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3di$MH() {
        return RuntimeHelper.requireNonNull(constants$196.ffp3di$MH,"ffp3di");
    }
    public static int ffp3di ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3di$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3duj$MH() {
        return RuntimeHelper.requireNonNull(constants$196.ffp3duj$MH,"ffp3duj");
    }
    public static int ffp3duj ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3duj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3dj$MH() {
        return RuntimeHelper.requireNonNull(constants$196.ffp3dj$MH,"ffp3dj");
    }
    public static int ffp3dj ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3dj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3duk$MH() {
        return RuntimeHelper.requireNonNull(constants$197.ffp3duk$MH,"ffp3duk");
    }
    public static int ffp3duk ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3duk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3dk$MH() {
        return RuntimeHelper.requireNonNull(constants$197.ffp3dk$MH,"ffp3dk");
    }
    public static int ffp3dk ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3dk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3de$MH() {
        return RuntimeHelper.requireNonNull(constants$197.ffp3de$MH,"ffp3de");
    }
    public static int ffp3de ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3de$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3dd$MH() {
        return RuntimeHelper.requireNonNull(constants$197.ffp3dd$MH,"ffp3dd");
    }
    public static int ffp3dd ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3dd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3djj$MH() {
        return RuntimeHelper.requireNonNull(constants$197.ffp3djj$MH,"ffp3djj");
    }
    public static int ffp3djj ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3djj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffp3dujj$MH() {
        return RuntimeHelper.requireNonNull(constants$197.ffp3dujj$MH,"ffp3dujj");
    }
    public static int ffp3dujj ( Addressable fptr,  int group,  long ncols,  long nrows,  long naxis1,  long naxis2,  long naxis3,  Addressable array,  Addressable status) {
        var mh$ = ffp3dujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, ncols, nrows, naxis1, naxis2, naxis3, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpss$MH() {
        return RuntimeHelper.requireNonNull(constants$198.ffpss$MH,"ffpss");
    }
    public static int ffpss ( Addressable fptr,  int datatype,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpss$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssb$MH() {
        return RuntimeHelper.requireNonNull(constants$198.ffpssb$MH,"ffpssb");
    }
    public static int ffpssb ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpsssb$MH() {
        return RuntimeHelper.requireNonNull(constants$198.ffpsssb$MH,"ffpsssb");
    }
    public static int ffpsssb ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpsssb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssui$MH() {
        return RuntimeHelper.requireNonNull(constants$198.ffpssui$MH,"ffpssui");
    }
    public static int ffpssui ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssi$MH() {
        return RuntimeHelper.requireNonNull(constants$198.ffpssi$MH,"ffpssi");
    }
    public static int ffpssi ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssi$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssuj$MH() {
        return RuntimeHelper.requireNonNull(constants$198.ffpssuj$MH,"ffpssuj");
    }
    public static int ffpssuj ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssj$MH() {
        return RuntimeHelper.requireNonNull(constants$199.ffpssj$MH,"ffpssj");
    }
    public static int ffpssj ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssuk$MH() {
        return RuntimeHelper.requireNonNull(constants$199.ffpssuk$MH,"ffpssuk");
    }
    public static int ffpssuk ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssk$MH() {
        return RuntimeHelper.requireNonNull(constants$199.ffpssk$MH,"ffpssk");
    }
    public static int ffpssk ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpsse$MH() {
        return RuntimeHelper.requireNonNull(constants$199.ffpsse$MH,"ffpsse");
    }
    public static int ffpsse ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpsse$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssd$MH() {
        return RuntimeHelper.requireNonNull(constants$199.ffpssd$MH,"ffpssd");
    }
    public static int ffpssd ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssjj$MH() {
        return RuntimeHelper.requireNonNull(constants$199.ffpssjj$MH,"ffpssjj");
    }
    public static int ffpssjj ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpssujj$MH() {
        return RuntimeHelper.requireNonNull(constants$200.ffpssujj$MH,"ffpssujj");
    }
    public static int ffpssujj ( Addressable fptr,  int group,  int naxis,  Addressable naxes,  Addressable fpixel,  Addressable lpixel,  Addressable array,  Addressable status) {
        var mh$ = ffpssujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, naxis, naxes, fpixel, lpixel, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpb$MH() {
        return RuntimeHelper.requireNonNull(constants$200.ffpgpb$MH,"ffpgpb");
    }
    public static int ffpgpb ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpsb$MH() {
        return RuntimeHelper.requireNonNull(constants$200.ffpgpsb$MH,"ffpgpsb");
    }
    public static int ffpgpsb ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpui$MH() {
        return RuntimeHelper.requireNonNull(constants$200.ffpgpui$MH,"ffpgpui");
    }
    public static int ffpgpui ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpui$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpi$MH() {
        return RuntimeHelper.requireNonNull(constants$200.ffpgpi$MH,"ffpgpi");
    }
    public static int ffpgpi ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpi$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpuj$MH() {
        return RuntimeHelper.requireNonNull(constants$200.ffpgpuj$MH,"ffpgpuj");
    }
    public static int ffpgpuj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpj$MH() {
        return RuntimeHelper.requireNonNull(constants$201.ffpgpj$MH,"ffpgpj");
    }
    public static int ffpgpj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpuk$MH() {
        return RuntimeHelper.requireNonNull(constants$201.ffpgpuk$MH,"ffpgpuk");
    }
    public static int ffpgpuk ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpk$MH() {
        return RuntimeHelper.requireNonNull(constants$201.ffpgpk$MH,"ffpgpk");
    }
    public static int ffpgpk ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpk$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpe$MH() {
        return RuntimeHelper.requireNonNull(constants$201.ffpgpe$MH,"ffpgpe");
    }
    public static int ffpgpe ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpe$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpd$MH() {
        return RuntimeHelper.requireNonNull(constants$201.ffpgpd$MH,"ffpgpd");
    }
    public static int ffpgpd ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpd$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpjj$MH() {
        return RuntimeHelper.requireNonNull(constants$201.ffpgpjj$MH,"ffpgpjj");
    }
    public static int ffpgpjj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpgpujj$MH() {
        return RuntimeHelper.requireNonNull(constants$202.ffpgpujj$MH,"ffpgpujj");
    }
    public static int ffpgpujj ( Addressable fptr,  int group,  int firstelem,  int nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpgpujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, group, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_set_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$202.fits_iter_set_by_name$MH,"fits_iter_set_by_name");
    }
    public static int fits_iter_set_by_name ( Addressable col,  Addressable fptr,  Addressable colname,  int datatype,  int iotype) {
        var mh$ = fits_iter_set_by_name$MH();
        try {
            return (int)mh$.invokeExact(col, fptr, colname, datatype, iotype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_set_by_num$MH() {
        return RuntimeHelper.requireNonNull(constants$202.fits_iter_set_by_num$MH,"fits_iter_set_by_num");
    }
    public static int fits_iter_set_by_num ( Addressable col,  Addressable fptr,  int colnum,  int datatype,  int iotype) {
        var mh$ = fits_iter_set_by_num$MH();
        try {
            return (int)mh$.invokeExact(col, fptr, colnum, datatype, iotype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_set_file$MH() {
        return RuntimeHelper.requireNonNull(constants$202.fits_iter_set_file$MH,"fits_iter_set_file");
    }
    public static int fits_iter_set_file ( Addressable col,  Addressable fptr) {
        var mh$ = fits_iter_set_file$MH();
        try {
            return (int)mh$.invokeExact(col, fptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_set_colname$MH() {
        return RuntimeHelper.requireNonNull(constants$202.fits_iter_set_colname$MH,"fits_iter_set_colname");
    }
    public static int fits_iter_set_colname ( Addressable col,  Addressable colname) {
        var mh$ = fits_iter_set_colname$MH();
        try {
            return (int)mh$.invokeExact(col, colname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_set_colnum$MH() {
        return RuntimeHelper.requireNonNull(constants$202.fits_iter_set_colnum$MH,"fits_iter_set_colnum");
    }
    public static int fits_iter_set_colnum ( Addressable col,  int colnum) {
        var mh$ = fits_iter_set_colnum$MH();
        try {
            return (int)mh$.invokeExact(col, colnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_set_datatype$MH() {
        return RuntimeHelper.requireNonNull(constants$203.fits_iter_set_datatype$MH,"fits_iter_set_datatype");
    }
    public static int fits_iter_set_datatype ( Addressable col,  int datatype) {
        var mh$ = fits_iter_set_datatype$MH();
        try {
            return (int)mh$.invokeExact(col, datatype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_set_iotype$MH() {
        return RuntimeHelper.requireNonNull(constants$203.fits_iter_set_iotype$MH,"fits_iter_set_iotype");
    }
    public static int fits_iter_set_iotype ( Addressable col,  int iotype) {
        var mh$ = fits_iter_set_iotype$MH();
        try {
            return (int)mh$.invokeExact(col, iotype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_file$MH() {
        return RuntimeHelper.requireNonNull(constants$203.fits_iter_get_file$MH,"fits_iter_get_file");
    }
    public static MemoryAddress fits_iter_get_file ( Addressable col) {
        var mh$ = fits_iter_get_file$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_colname$MH() {
        return RuntimeHelper.requireNonNull(constants$203.fits_iter_get_colname$MH,"fits_iter_get_colname");
    }
    public static MemoryAddress fits_iter_get_colname ( Addressable col) {
        var mh$ = fits_iter_get_colname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_colnum$MH() {
        return RuntimeHelper.requireNonNull(constants$203.fits_iter_get_colnum$MH,"fits_iter_get_colnum");
    }
    public static int fits_iter_get_colnum ( Addressable col) {
        var mh$ = fits_iter_get_colnum$MH();
        try {
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_datatype$MH() {
        return RuntimeHelper.requireNonNull(constants$203.fits_iter_get_datatype$MH,"fits_iter_get_datatype");
    }
    public static int fits_iter_get_datatype ( Addressable col) {
        var mh$ = fits_iter_get_datatype$MH();
        try {
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_iotype$MH() {
        return RuntimeHelper.requireNonNull(constants$204.fits_iter_get_iotype$MH,"fits_iter_get_iotype");
    }
    public static int fits_iter_get_iotype ( Addressable col) {
        var mh$ = fits_iter_get_iotype$MH();
        try {
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_array$MH() {
        return RuntimeHelper.requireNonNull(constants$204.fits_iter_get_array$MH,"fits_iter_get_array");
    }
    public static MemoryAddress fits_iter_get_array ( Addressable col) {
        var mh$ = fits_iter_get_array$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_tlmin$MH() {
        return RuntimeHelper.requireNonNull(constants$204.fits_iter_get_tlmin$MH,"fits_iter_get_tlmin");
    }
    public static int fits_iter_get_tlmin ( Addressable col) {
        var mh$ = fits_iter_get_tlmin$MH();
        try {
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_tlmax$MH() {
        return RuntimeHelper.requireNonNull(constants$204.fits_iter_get_tlmax$MH,"fits_iter_get_tlmax");
    }
    public static int fits_iter_get_tlmax ( Addressable col) {
        var mh$ = fits_iter_get_tlmax$MH();
        try {
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_repeat$MH() {
        return RuntimeHelper.requireNonNull(constants$204.fits_iter_get_repeat$MH,"fits_iter_get_repeat");
    }
    public static int fits_iter_get_repeat ( Addressable col) {
        var mh$ = fits_iter_get_repeat$MH();
        try {
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_tunit$MH() {
        return RuntimeHelper.requireNonNull(constants$204.fits_iter_get_tunit$MH,"fits_iter_get_tunit");
    }
    public static MemoryAddress fits_iter_get_tunit ( Addressable col) {
        var mh$ = fits_iter_get_tunit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_iter_get_tdisp$MH() {
        return RuntimeHelper.requireNonNull(constants$205.fits_iter_get_tdisp$MH,"fits_iter_get_tdisp");
    }
    public static MemoryAddress fits_iter_get_tdisp ( Addressable col) {
        var mh$ = fits_iter_get_tdisp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffiter$MH() {
        return RuntimeHelper.requireNonNull(constants$205.ffiter$MH,"ffiter");
    }
    public static int ffiter ( int ncols,  Addressable data,  int offset,  int nPerLoop,  Addressable workFn,  Addressable userPointer,  Addressable status) {
        var mh$ = ffiter$MH();
        try {
            return (int)mh$.invokeExact(ncols, data, offset, nPerLoop, workFn, userPointer, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcl$MH() {
        return RuntimeHelper.requireNonNull(constants$205.ffpcl$MH,"ffpcl");
    }
    public static int ffpcl ( Addressable fptr,  int datatype,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcl$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcln$MH() {
        return RuntimeHelper.requireNonNull(constants$205.ffpcln$MH,"ffpcln");
    }
    public static int ffpcln ( Addressable fptr,  int ncols,  Addressable datatype,  Addressable colnum,  long firstrow,  long nrows,  Addressable array,  Addressable nulval,  Addressable status) {
        var mh$ = ffpcln$MH();
        try {
            return (int)mh$.invokeExact(fptr, ncols, datatype, colnum, firstrow, nrows, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcls$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ffpcls$MH,"ffpcls");
    }
    public static int ffpcls ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcls$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcll$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ffpcll$MH,"ffpcll");
    }
    public static int ffpcll ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcll$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclb$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ffpclb$MH,"ffpclb");
    }
    public static int ffpclb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclsb$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ffpclsb$MH,"ffpclsb");
    }
    public static int ffpclsb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclui$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ffpclui$MH,"ffpclui");
    }
    public static int ffpclui ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclui$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcli$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ffpcli$MH,"ffpcli");
    }
    public static int ffpcli ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcli$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcluj$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ffpcluj$MH,"ffpcluj");
    }
    public static int ffpcluj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcluj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclj$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ffpclj$MH,"ffpclj");
    }
    public static int ffpclj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcluk$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ffpcluk$MH,"ffpcluk");
    }
    public static int ffpcluk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcluk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclk$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ffpclk$MH,"ffpclk");
    }
    public static int ffpclk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcle$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ffpcle$MH,"ffpcle");
    }
    public static int ffpcle ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcle$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcld$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ffpcld$MH,"ffpcld");
    }
    public static int ffpcld ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcld$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclc$MH() {
        return RuntimeHelper.requireNonNull(constants$208.ffpclc$MH,"ffpclc");
    }
    public static int ffpclc ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclc$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclm$MH() {
        return RuntimeHelper.requireNonNull(constants$208.ffpclm$MH,"ffpclm");
    }
    public static int ffpclm ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclm$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclu$MH() {
        return RuntimeHelper.requireNonNull(constants$208.ffpclu$MH,"ffpclu");
    }
    public static int ffpclu ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable status) {
        var mh$ = ffpclu$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffprwu$MH() {
        return RuntimeHelper.requireNonNull(constants$208.ffprwu$MH,"ffprwu");
    }
    public static int ffprwu ( Addressable fptr,  long firstrow,  long nrows,  Addressable status) {
        var mh$ = ffprwu$MH();
        try {
            return (int)mh$.invokeExact(fptr, firstrow, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcljj$MH() {
        return RuntimeHelper.requireNonNull(constants$208.ffpcljj$MH,"ffpcljj");
    }
    public static int ffpcljj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpcljj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclujj$MH() {
        return RuntimeHelper.requireNonNull(constants$208.ffpclujj$MH,"ffpclujj");
    }
    public static int ffpclujj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable status) {
        var mh$ = ffpclujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpclx$MH() {
        return RuntimeHelper.requireNonNull(constants$209.ffpclx$MH,"ffpclx");
    }
    public static int ffpclx ( Addressable fptr,  int colnum,  long frow,  int fbit,  int nbit,  Addressable larray,  Addressable status) {
        var mh$ = ffpclx$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, frow, fbit, nbit, larray, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcn$MH() {
        return RuntimeHelper.requireNonNull(constants$209.ffpcn$MH,"ffpcn");
    }
    public static int ffpcn ( Addressable fptr,  int datatype,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nulval,  Addressable status) {
        var mh$ = ffpcn$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, colnum, firstrow, firstelem, nelem, array, nulval, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcns$MH() {
        return RuntimeHelper.requireNonNull(constants$209.ffpcns$MH,"ffpcns");
    }
    public static int ffpcns ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  Addressable nulvalue,  Addressable status) {
        var mh$ = ffpcns$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnl$MH() {
        return RuntimeHelper.requireNonNull(constants$209.ffpcnl$MH,"ffpcnl");
    }
    public static int ffpcnl ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  byte nulvalue,  Addressable status) {
        var mh$ = ffpcnl$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnb$MH() {
        return RuntimeHelper.requireNonNull(constants$209.ffpcnb$MH,"ffpcnb");
    }
    public static int ffpcnb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  byte nulvalue,  Addressable status) {
        var mh$ = ffpcnb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnsb$MH() {
        return RuntimeHelper.requireNonNull(constants$209.ffpcnsb$MH,"ffpcnsb");
    }
    public static int ffpcnsb ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  byte nulvalue,  Addressable status) {
        var mh$ = ffpcnsb$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnui$MH() {
        return RuntimeHelper.requireNonNull(constants$210.ffpcnui$MH,"ffpcnui");
    }
    public static int ffpcnui ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  short nulvalue,  Addressable status) {
        var mh$ = ffpcnui$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcni$MH() {
        return RuntimeHelper.requireNonNull(constants$210.ffpcni$MH,"ffpcni");
    }
    public static int ffpcni ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  short nulvalue,  Addressable status) {
        var mh$ = ffpcni$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnuj$MH() {
        return RuntimeHelper.requireNonNull(constants$210.ffpcnuj$MH,"ffpcnuj");
    }
    public static int ffpcnuj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  int nulvalue,  Addressable status) {
        var mh$ = ffpcnuj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnj$MH() {
        return RuntimeHelper.requireNonNull(constants$210.ffpcnj$MH,"ffpcnj");
    }
    public static int ffpcnj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  int nulvalue,  Addressable status) {
        var mh$ = ffpcnj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnuk$MH() {
        return RuntimeHelper.requireNonNull(constants$210.ffpcnuk$MH,"ffpcnuk");
    }
    public static int ffpcnuk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  int nulvalue,  Addressable status) {
        var mh$ = ffpcnuk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnk$MH() {
        return RuntimeHelper.requireNonNull(constants$210.ffpcnk$MH,"ffpcnk");
    }
    public static int ffpcnk ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  int nulvalue,  Addressable status) {
        var mh$ = ffpcnk$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcne$MH() {
        return RuntimeHelper.requireNonNull(constants$211.ffpcne$MH,"ffpcne");
    }
    public static int ffpcne ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  float nulvalue,  Addressable status) {
        var mh$ = ffpcne$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnd$MH() {
        return RuntimeHelper.requireNonNull(constants$211.ffpcnd$MH,"ffpcnd");
    }
    public static int ffpcnd ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  double nulvalue,  Addressable status) {
        var mh$ = ffpcnd$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnjj$MH() {
        return RuntimeHelper.requireNonNull(constants$211.ffpcnjj$MH,"ffpcnjj");
    }
    public static int ffpcnjj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  long nulvalue,  Addressable status) {
        var mh$ = ffpcnjj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffpcnujj$MH() {
        return RuntimeHelper.requireNonNull(constants$211.ffpcnujj$MH,"ffpcnujj");
    }
    public static int ffpcnujj ( Addressable fptr,  int colnum,  long firstrow,  long firstelem,  long nelem,  Addressable array,  long nulvalue,  Addressable status) {
        var mh$ = ffpcnujj$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, firstrow, firstelem, nelem, array, nulvalue, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffptbb$MH() {
        return RuntimeHelper.requireNonNull(constants$211.ffptbb$MH,"ffptbb");
    }
    public static int ffptbb ( Addressable fptr,  long firstrow,  long firstchar,  long nchars,  Addressable values,  Addressable status) {
        var mh$ = ffptbb$MH();
        try {
            return (int)mh$.invokeExact(fptr, firstrow, firstchar, nchars, values, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffirow$MH() {
        return RuntimeHelper.requireNonNull(constants$211.ffirow$MH,"ffirow");
    }
    public static int ffirow ( Addressable fptr,  long firstrow,  long nrows,  Addressable status) {
        var mh$ = ffirow$MH();
        try {
            return (int)mh$.invokeExact(fptr, firstrow, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdrow$MH() {
        return RuntimeHelper.requireNonNull(constants$212.ffdrow$MH,"ffdrow");
    }
    public static int ffdrow ( Addressable fptr,  long firstrow,  long nrows,  Addressable status) {
        var mh$ = ffdrow$MH();
        try {
            return (int)mh$.invokeExact(fptr, firstrow, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdrrg$MH() {
        return RuntimeHelper.requireNonNull(constants$212.ffdrrg$MH,"ffdrrg");
    }
    public static int ffdrrg ( Addressable fptr,  Addressable ranges,  Addressable status) {
        var mh$ = ffdrrg$MH();
        try {
            return (int)mh$.invokeExact(fptr, ranges, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdrws$MH() {
        return RuntimeHelper.requireNonNull(constants$212.ffdrws$MH,"ffdrws");
    }
    public static int ffdrws ( Addressable fptr,  Addressable rownum,  int nrows,  Addressable status) {
        var mh$ = ffdrws$MH();
        try {
            return (int)mh$.invokeExact(fptr, rownum, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdrwsll$MH() {
        return RuntimeHelper.requireNonNull(constants$212.ffdrwsll$MH,"ffdrwsll");
    }
    public static int ffdrwsll ( Addressable fptr,  Addressable rownum,  long nrows,  Addressable status) {
        var mh$ = ffdrwsll$MH();
        try {
            return (int)mh$.invokeExact(fptr, rownum, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fficol$MH() {
        return RuntimeHelper.requireNonNull(constants$212.fficol$MH,"fficol");
    }
    public static int fficol ( Addressable fptr,  int numcol,  Addressable ttype,  Addressable tform,  Addressable status) {
        var mh$ = fficol$MH();
        try {
            return (int)mh$.invokeExact(fptr, numcol, ttype, tform, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fficls$MH() {
        return RuntimeHelper.requireNonNull(constants$212.fficls$MH,"fficls");
    }
    public static int fficls ( Addressable fptr,  int firstcol,  int ncols,  Addressable ttype,  Addressable tform,  Addressable status) {
        var mh$ = fficls$MH();
        try {
            return (int)mh$.invokeExact(fptr, firstcol, ncols, ttype, tform, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffmvec$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ffmvec$MH,"ffmvec");
    }
    public static int ffmvec ( Addressable fptr,  int colnum,  long newveclen,  Addressable status) {
        var mh$ = ffmvec$MH();
        try {
            return (int)mh$.invokeExact(fptr, colnum, newveclen, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffdcol$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ffdcol$MH,"ffdcol");
    }
    public static int ffdcol ( Addressable fptr,  int numcol,  Addressable status) {
        var mh$ = ffdcol$MH();
        try {
            return (int)mh$.invokeExact(fptr, numcol, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcpcl$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ffcpcl$MH,"ffcpcl");
    }
    public static int ffcpcl ( Addressable infptr,  Addressable outfptr,  int incol,  int outcol,  int create_col,  Addressable status) {
        var mh$ = ffcpcl$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, incol, outcol, create_col, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffccls$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ffccls$MH,"ffccls");
    }
    public static int ffccls ( Addressable infptr,  Addressable outfptr,  int incol,  int outcol,  int ncols,  int create_col,  Addressable status) {
        var mh$ = ffccls$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, incol, outcol, ncols, create_col, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcprw$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ffcprw$MH,"ffcprw");
    }
    public static int ffcprw ( Addressable infptr,  Addressable outfptr,  long firstrow,  long nrows,  Addressable status) {
        var mh$ = ffcprw$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, firstrow, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcpsr$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ffcpsr$MH,"ffcpsr");
    }
    public static int ffcpsr ( Addressable infptr,  Addressable outfptr,  long firstrow,  long nrows,  Addressable row_status,  Addressable status) {
        var mh$ = ffcpsr$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, firstrow, nrows, row_status, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcpht$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ffcpht$MH,"ffcpht");
    }
    public static int ffcpht ( Addressable infptr,  Addressable outfptr,  long firstrow,  long nrows,  Addressable status) {
        var mh$ = ffcpht$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, firstrow, nrows, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgics$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ffgics$MH,"ffgics");
    }
    public static int ffgics ( Addressable fptr,  Addressable xrval,  Addressable yrval,  Addressable xrpix,  Addressable yrpix,  Addressable xinc,  Addressable yinc,  Addressable rot,  Addressable type,  Addressable status) {
        var mh$ = ffgics$MH();
        try {
            return (int)mh$.invokeExact(fptr, xrval, yrval, xrpix, yrpix, xinc, yinc, rot, type, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgicsa$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ffgicsa$MH,"ffgicsa");
    }
    public static int ffgicsa ( Addressable fptr,  byte version,  Addressable xrval,  Addressable yrval,  Addressable xrpix,  Addressable yrpix,  Addressable xinc,  Addressable yinc,  Addressable rot,  Addressable type,  Addressable status) {
        var mh$ = ffgicsa$MH();
        try {
            return (int)mh$.invokeExact(fptr, version, xrval, yrval, xrpix, yrpix, xinc, yinc, rot, type, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtcs$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ffgtcs$MH,"ffgtcs");
    }
    public static int ffgtcs ( Addressable fptr,  int xcol,  int ycol,  Addressable xrval,  Addressable yrval,  Addressable xrpix,  Addressable yrpix,  Addressable xinc,  Addressable yinc,  Addressable rot,  Addressable type,  Addressable status) {
        var mh$ = ffgtcs$MH();
        try {
            return (int)mh$.invokeExact(fptr, xcol, ycol, xrval, yrval, xrpix, yrpix, xinc, yinc, rot, type, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffwldp$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ffwldp$MH,"ffwldp");
    }
    public static int ffwldp ( double xpix,  double ypix,  double xref,  double yref,  double xrefpix,  double yrefpix,  double xinc,  double yinc,  double rot,  Addressable type,  Addressable xpos,  Addressable ypos,  Addressable status) {
        var mh$ = ffwldp$MH();
        try {
            return (int)mh$.invokeExact(xpix, ypix, xref, yref, xrefpix, yrefpix, xinc, yinc, rot, type, xpos, ypos, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffxypx$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ffxypx$MH,"ffxypx");
    }
    public static int ffxypx ( double xpos,  double ypos,  double xref,  double yref,  double xrefpix,  double yrefpix,  double xinc,  double yinc,  double rot,  Addressable type,  Addressable xpix,  Addressable ypix,  Addressable status) {
        var mh$ = ffxypx$MH();
        try {
            return (int)mh$.invokeExact(xpos, ypos, xref, yref, xrefpix, yrefpix, xinc, yinc, rot, type, xpix, ypix, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgiwcs$MH() {
        return RuntimeHelper.requireNonNull(constants$215.ffgiwcs$MH,"ffgiwcs");
    }
    public static int ffgiwcs ( Addressable fptr,  Addressable header,  Addressable status) {
        var mh$ = ffgiwcs$MH();
        try {
            return (int)mh$.invokeExact(fptr, header, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtwcs$MH() {
        return RuntimeHelper.requireNonNull(constants$215.ffgtwcs$MH,"ffgtwcs");
    }
    public static int ffgtwcs ( Addressable fptr,  int xcol,  int ycol,  Addressable header,  Addressable status) {
        var mh$ = ffgtwcs$MH();
        try {
            return (int)mh$.invokeExact(fptr, xcol, ycol, header, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fftexp$MH() {
        return RuntimeHelper.requireNonNull(constants$215.fftexp$MH,"fftexp");
    }
    public static int fftexp ( Addressable fptr,  Addressable expr,  int maxdim,  Addressable datatype,  Addressable nelem,  Addressable naxis,  Addressable naxes,  Addressable status) {
        var mh$ = fftexp$MH();
        try {
            return (int)mh$.invokeExact(fptr, expr, maxdim, datatype, nelem, naxis, naxes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fffrow$MH() {
        return RuntimeHelper.requireNonNull(constants$215.fffrow$MH,"fffrow");
    }
    public static int fffrow ( Addressable infptr,  Addressable expr,  int firstrow,  int nrows,  Addressable n_good_rows,  Addressable row_status,  Addressable status) {
        var mh$ = fffrow$MH();
        try {
            return (int)mh$.invokeExact(infptr, expr, firstrow, nrows, n_good_rows, row_status, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffffrw$MH() {
        return RuntimeHelper.requireNonNull(constants$215.ffffrw$MH,"ffffrw");
    }
    public static int ffffrw ( Addressable fptr,  Addressable expr,  Addressable rownum,  Addressable status) {
        var mh$ = ffffrw$MH();
        try {
            return (int)mh$.invokeExact(fptr, expr, rownum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fffrwc$MH() {
        return RuntimeHelper.requireNonNull(constants$215.fffrwc$MH,"fffrwc");
    }
    public static int fffrwc ( Addressable fptr,  Addressable expr,  Addressable timeCol,  Addressable parCol,  Addressable valCol,  int ntimes,  Addressable times,  Addressable time_status,  Addressable status) {
        var mh$ = fffrwc$MH();
        try {
            return (int)mh$.invokeExact(fptr, expr, timeCol, parCol, valCol, ntimes, times, time_status, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsrow$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ffsrow$MH,"ffsrow");
    }
    public static int ffsrow ( Addressable infptr,  Addressable outfptr,  Addressable expr,  Addressable status) {
        var mh$ = ffsrow$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, expr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcrow$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ffcrow$MH,"ffcrow");
    }
    public static int ffcrow ( Addressable fptr,  int datatype,  Addressable expr,  int firstrow,  int nelements,  Addressable nulval,  Addressable array,  Addressable anynul,  Addressable status) {
        var mh$ = ffcrow$MH();
        try {
            return (int)mh$.invokeExact(fptr, datatype, expr, firstrow, nelements, nulval, array, anynul, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcalc_rng$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ffcalc_rng$MH,"ffcalc_rng");
    }
    public static int ffcalc_rng ( Addressable infptr,  Addressable expr,  Addressable outfptr,  Addressable parName,  Addressable parInfo,  int nRngs,  Addressable start,  Addressable end,  Addressable status) {
        var mh$ = ffcalc_rng$MH();
        try {
            return (int)mh$.invokeExact(infptr, expr, outfptr, parName, parInfo, nRngs, start, end, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffcalc$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ffcalc$MH,"ffcalc");
    }
    public static int ffcalc ( Addressable infptr,  Addressable expr,  Addressable outfptr,  Addressable parName,  Addressable parInfo,  Addressable status) {
        var mh$ = ffcalc$MH();
        try {
            return (int)mh$.invokeExact(infptr, expr, outfptr, parName, parInfo, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffhist$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ffhist$MH,"ffhist");
    }
    public static int ffhist ( Addressable fptr,  Addressable outfile,  int imagetype,  int naxis,  Addressable colname,  Addressable minin,  Addressable maxin,  Addressable binsizein,  Addressable minname,  Addressable maxname,  Addressable binname,  double weightin,  Addressable wtcol,  int recip,  Addressable rowselect,  Addressable status) {
        var mh$ = ffhist$MH();
        try {
            return (int)mh$.invokeExact(fptr, outfile, imagetype, naxis, colname, minin, maxin, binsizein, minname, maxname, binname, weightin, wtcol, recip, rowselect, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffhist2$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ffhist2$MH,"ffhist2");
    }
    public static int ffhist2 ( Addressable fptr,  Addressable outfile,  int imagetype,  int naxis,  Addressable colname,  Addressable minin,  Addressable maxin,  Addressable binsizein,  Addressable minname,  Addressable maxname,  Addressable binname,  double weightin,  Addressable wtcol,  int recip,  Addressable rowselect,  Addressable status) {
        var mh$ = ffhist2$MH();
        try {
            return (int)mh$.invokeExact(fptr, outfile, imagetype, naxis, colname, minin, maxin, binsizein, minname, maxname, binname, weightin, wtcol, recip, rowselect, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffhist3$MH() {
        return RuntimeHelper.requireNonNull(constants$217.ffhist3$MH,"ffhist3");
    }
    public static MemoryAddress ffhist3 ( Addressable fptr,  Addressable outfile,  int imagetype,  int naxis,  Addressable colname,  Addressable minin,  Addressable maxin,  Addressable binsizein,  Addressable minname,  Addressable maxname,  Addressable binname,  double weightin,  Addressable wtcol,  int recip,  Addressable selectrow,  Addressable status) {
        var mh$ = ffhist3$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fptr, outfile, imagetype, naxis, colname, minin, maxin, binsizein, minname, maxname, binname, weightin, wtcol, recip, selectrow, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_select_image_section$MH() {
        return RuntimeHelper.requireNonNull(constants$217.fits_select_image_section$MH,"fits_select_image_section");
    }
    public static int fits_select_image_section ( Addressable fptr,  Addressable outfile,  Addressable imagesection,  Addressable status) {
        var mh$ = fits_select_image_section$MH();
        try {
            return (int)mh$.invokeExact(fptr, outfile, imagesection, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_copy_image_section$MH() {
        return RuntimeHelper.requireNonNull(constants$217.fits_copy_image_section$MH,"fits_copy_image_section");
    }
    public static int fits_copy_image_section ( Addressable infptr,  Addressable outfile,  Addressable imagesection,  Addressable status) {
        var mh$ = fits_copy_image_section$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfile, imagesection, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_calc_binning$MH() {
        return RuntimeHelper.requireNonNull(constants$217.fits_calc_binning$MH,"fits_calc_binning");
    }
    public static int fits_calc_binning ( Addressable fptr,  int naxis,  Addressable colname,  Addressable minin,  Addressable maxin,  Addressable binsizein,  Addressable minname,  Addressable maxname,  Addressable binname,  Addressable colnum,  Addressable haxes,  Addressable amin,  Addressable amax,  Addressable binsize,  Addressable status) {
        var mh$ = fits_calc_binning$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis, colname, minin, maxin, binsizein, minname, maxname, binname, colnum, haxes, amin, amax, binsize, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_calc_binningd$MH() {
        return RuntimeHelper.requireNonNull(constants$217.fits_calc_binningd$MH,"fits_calc_binningd");
    }
    public static int fits_calc_binningd ( Addressable fptr,  int naxis,  Addressable colname,  Addressable minin,  Addressable maxin,  Addressable binsizein,  Addressable minname,  Addressable maxname,  Addressable binname,  Addressable colnum,  Addressable haxes,  Addressable amin,  Addressable amax,  Addressable binsize,  Addressable status) {
        var mh$ = fits_calc_binningd$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis, colname, minin, maxin, binsizein, minname, maxname, binname, colnum, haxes, amin, amax, binsize, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_write_keys_histo$MH() {
        return RuntimeHelper.requireNonNull(constants$217.fits_write_keys_histo$MH,"fits_write_keys_histo");
    }
    public static int fits_write_keys_histo ( Addressable fptr,  Addressable histptr,  int naxis,  Addressable colnum,  Addressable status) {
        var mh$ = fits_write_keys_histo$MH();
        try {
            return (int)mh$.invokeExact(fptr, histptr, naxis, colnum, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_rebin_wcs$MH() {
        return RuntimeHelper.requireNonNull(constants$218.fits_rebin_wcs$MH,"fits_rebin_wcs");
    }
    public static int fits_rebin_wcs ( Addressable fptr,  int naxis,  Addressable amin,  Addressable binsize,  Addressable status) {
        var mh$ = fits_rebin_wcs$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis, amin, binsize, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_rebin_wcsd$MH() {
        return RuntimeHelper.requireNonNull(constants$218.fits_rebin_wcsd$MH,"fits_rebin_wcsd");
    }
    public static int fits_rebin_wcsd ( Addressable fptr,  int naxis,  Addressable amin,  Addressable binsize,  Addressable status) {
        var mh$ = fits_rebin_wcsd$MH();
        try {
            return (int)mh$.invokeExact(fptr, naxis, amin, binsize, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_make_hist$MH() {
        return RuntimeHelper.requireNonNull(constants$218.fits_make_hist$MH,"fits_make_hist");
    }
    public static int fits_make_hist ( Addressable fptr,  Addressable histptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable colnum,  Addressable amin,  Addressable amax,  Addressable binsize,  float weight,  int wtcolnum,  int recip,  Addressable selectrow,  Addressable status) {
        var mh$ = fits_make_hist$MH();
        try {
            return (int)mh$.invokeExact(fptr, histptr, bitpix, naxis, naxes, colnum, amin, amax, binsize, weight, wtcolnum, recip, selectrow, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_make_histd$MH() {
        return RuntimeHelper.requireNonNull(constants$218.fits_make_histd$MH,"fits_make_histd");
    }
    public static int fits_make_histd ( Addressable fptr,  Addressable histptr,  int bitpix,  int naxis,  Addressable naxes,  Addressable colnum,  Addressable amin,  Addressable amax,  Addressable binsize,  double weight,  int wtcolnum,  int recip,  Addressable selectrow,  Addressable status) {
        var mh$ = fits_make_histd$MH();
        try {
            return (int)mh$.invokeExact(fptr, histptr, bitpix, naxis, naxes, colnum, amin, amax, binsize, weight, wtcolnum, recip, selectrow, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_pixel_filter$MH() {
        return RuntimeHelper.requireNonNull(constants$218.fits_pixel_filter$MH,"fits_pixel_filter");
    }
    public static int fits_pixel_filter ( Addressable filter,  Addressable status) {
        var mh$ = fits_pixel_filter$MH();
        try {
            return (int)mh$.invokeExact(filter, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtcr$MH() {
        return RuntimeHelper.requireNonNull(constants$218.ffgtcr$MH,"ffgtcr");
    }
    public static int ffgtcr ( Addressable fptr,  Addressable grpname,  int grouptype,  Addressable status) {
        var mh$ = ffgtcr$MH();
        try {
            return (int)mh$.invokeExact(fptr, grpname, grouptype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtis$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ffgtis$MH,"ffgtis");
    }
    public static int ffgtis ( Addressable fptr,  Addressable grpname,  int grouptype,  Addressable status) {
        var mh$ = ffgtis$MH();
        try {
            return (int)mh$.invokeExact(fptr, grpname, grouptype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtch$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ffgtch$MH,"ffgtch");
    }
    public static int ffgtch ( Addressable gfptr,  int grouptype,  Addressable status) {
        var mh$ = ffgtch$MH();
        try {
            return (int)mh$.invokeExact(gfptr, grouptype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtrm$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ffgtrm$MH,"ffgtrm");
    }
    public static int ffgtrm ( Addressable gfptr,  int rmopt,  Addressable status) {
        var mh$ = ffgtrm$MH();
        try {
            return (int)mh$.invokeExact(gfptr, rmopt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtcp$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ffgtcp$MH,"ffgtcp");
    }
    public static int ffgtcp ( Addressable infptr,  Addressable outfptr,  int cpopt,  Addressable status) {
        var mh$ = ffgtcp$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, cpopt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtmg$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ffgtmg$MH,"ffgtmg");
    }
    public static int ffgtmg ( Addressable infptr,  Addressable outfptr,  int mgopt,  Addressable status) {
        var mh$ = ffgtmg$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, mgopt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtcm$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ffgtcm$MH,"ffgtcm");
    }
    public static int ffgtcm ( Addressable gfptr,  int cmopt,  Addressable status) {
        var mh$ = ffgtcm$MH();
        try {
            return (int)mh$.invokeExact(gfptr, cmopt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtvf$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ffgtvf$MH,"ffgtvf");
    }
    public static int ffgtvf ( Addressable gfptr,  Addressable firstfailed,  Addressable status) {
        var mh$ = ffgtvf$MH();
        try {
            return (int)mh$.invokeExact(gfptr, firstfailed, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtop$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ffgtop$MH,"ffgtop");
    }
    public static int ffgtop ( Addressable mfptr,  int group,  Addressable gfptr,  Addressable status) {
        var mh$ = ffgtop$MH();
        try {
            return (int)mh$.invokeExact(mfptr, group, gfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtam$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ffgtam$MH,"ffgtam");
    }
    public static int ffgtam ( Addressable gfptr,  Addressable mfptr,  int hdupos,  Addressable status) {
        var mh$ = ffgtam$MH();
        try {
            return (int)mh$.invokeExact(gfptr, mfptr, hdupos, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtnm$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ffgtnm$MH,"ffgtnm");
    }
    public static int ffgtnm ( Addressable gfptr,  Addressable nmembers,  Addressable status) {
        var mh$ = ffgtnm$MH();
        try {
            return (int)mh$.invokeExact(gfptr, nmembers, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgmng$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ffgmng$MH,"ffgmng");
    }
    public static int ffgmng ( Addressable mfptr,  Addressable nmembers,  Addressable status) {
        var mh$ = ffgmng$MH();
        try {
            return (int)mh$.invokeExact(mfptr, nmembers, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgmop$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ffgmop$MH,"ffgmop");
    }
    public static int ffgmop ( Addressable gfptr,  int member,  Addressable mfptr,  Addressable status) {
        var mh$ = ffgmop$MH();
        try {
            return (int)mh$.invokeExact(gfptr, member, mfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgmcp$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ffgmcp$MH,"ffgmcp");
    }
    public static int ffgmcp ( Addressable gfptr,  Addressable mfptr,  int member,  int cpopt,  Addressable status) {
        var mh$ = ffgmcp$MH();
        try {
            return (int)mh$.invokeExact(gfptr, mfptr, member, cpopt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgmtf$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ffgmtf$MH,"ffgmtf");
    }
    public static int ffgmtf ( Addressable infptr,  Addressable outfptr,  int member,  int tfopt,  Addressable status) {
        var mh$ = ffgmtf$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, member, tfopt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgmrm$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ffgmrm$MH,"ffgmrm");
    }
    public static int ffgmrm ( Addressable fptr,  int member,  int rmopt,  Addressable status) {
        var mh$ = ffgmrm$MH();
        try {
            return (int)mh$.invokeExact(fptr, member, rmopt, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_execute_template$MH() {
        return RuntimeHelper.requireNonNull(constants$221.fits_execute_template$MH,"fits_execute_template");
    }
    public static int fits_execute_template ( Addressable ff,  Addressable ngp_template,  Addressable status) {
        var mh$ = fits_execute_template$MH();
        try {
            return (int)mh$.invokeExact(ff, ngp_template, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_img_stats_short$MH() {
        return RuntimeHelper.requireNonNull(constants$221.fits_img_stats_short$MH,"fits_img_stats_short");
    }
    public static int fits_img_stats_short ( Addressable array,  int nx,  int ny,  int nullcheck,  short nullvalue,  Addressable ngoodpix,  Addressable minvalue,  Addressable maxvalue,  Addressable mean,  Addressable sigma,  Addressable noise1,  Addressable noise2,  Addressable noise3,  Addressable noise5,  Addressable status) {
        var mh$ = fits_img_stats_short$MH();
        try {
            return (int)mh$.invokeExact(array, nx, ny, nullcheck, nullvalue, ngoodpix, minvalue, maxvalue, mean, sigma, noise1, noise2, noise3, noise5, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_img_stats_int$MH() {
        return RuntimeHelper.requireNonNull(constants$221.fits_img_stats_int$MH,"fits_img_stats_int");
    }
    public static int fits_img_stats_int ( Addressable array,  int nx,  int ny,  int nullcheck,  int nullvalue,  Addressable ngoodpix,  Addressable minvalue,  Addressable maxvalue,  Addressable mean,  Addressable sigma,  Addressable noise1,  Addressable noise2,  Addressable noise3,  Addressable noise5,  Addressable status) {
        var mh$ = fits_img_stats_int$MH();
        try {
            return (int)mh$.invokeExact(array, nx, ny, nullcheck, nullvalue, ngoodpix, minvalue, maxvalue, mean, sigma, noise1, noise2, noise3, noise5, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_img_stats_float$MH() {
        return RuntimeHelper.requireNonNull(constants$222.fits_img_stats_float$MH,"fits_img_stats_float");
    }
    public static int fits_img_stats_float ( Addressable array,  int nx,  int ny,  int nullcheck,  float nullvalue,  Addressable ngoodpix,  Addressable minvalue,  Addressable maxvalue,  Addressable mean,  Addressable sigma,  Addressable noise1,  Addressable noise2,  Addressable noise3,  Addressable noise5,  Addressable status) {
        var mh$ = fits_img_stats_float$MH();
        try {
            return (int)mh$.invokeExact(array, nx, ny, nullcheck, nullvalue, ngoodpix, minvalue, maxvalue, mean, sigma, noise1, noise2, noise3, noise5, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_compression_type$MH() {
        return RuntimeHelper.requireNonNull(constants$222.fits_set_compression_type$MH,"fits_set_compression_type");
    }
    public static int fits_set_compression_type ( Addressable fptr,  int ctype,  Addressable status) {
        var mh$ = fits_set_compression_type$MH();
        try {
            return (int)mh$.invokeExact(fptr, ctype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_tile_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$222.fits_set_tile_dim$MH,"fits_set_tile_dim");
    }
    public static int fits_set_tile_dim ( Addressable fptr,  int ndim,  Addressable dims,  Addressable status) {
        var mh$ = fits_set_tile_dim$MH();
        try {
            return (int)mh$.invokeExact(fptr, ndim, dims, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_noise_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$222.fits_set_noise_bits$MH,"fits_set_noise_bits");
    }
    public static int fits_set_noise_bits ( Addressable fptr,  int noisebits,  Addressable status) {
        var mh$ = fits_set_noise_bits$MH();
        try {
            return (int)mh$.invokeExact(fptr, noisebits, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_quantize_level$MH() {
        return RuntimeHelper.requireNonNull(constants$222.fits_set_quantize_level$MH,"fits_set_quantize_level");
    }
    public static int fits_set_quantize_level ( Addressable fptr,  float qlevel,  Addressable status) {
        var mh$ = fits_set_quantize_level$MH();
        try {
            return (int)mh$.invokeExact(fptr, qlevel, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_hcomp_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$222.fits_set_hcomp_scale$MH,"fits_set_hcomp_scale");
    }
    public static int fits_set_hcomp_scale ( Addressable fptr,  float scale,  Addressable status) {
        var mh$ = fits_set_hcomp_scale$MH();
        try {
            return (int)mh$.invokeExact(fptr, scale, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_hcomp_smooth$MH() {
        return RuntimeHelper.requireNonNull(constants$223.fits_set_hcomp_smooth$MH,"fits_set_hcomp_smooth");
    }
    public static int fits_set_hcomp_smooth ( Addressable fptr,  int smooth,  Addressable status) {
        var mh$ = fits_set_hcomp_smooth$MH();
        try {
            return (int)mh$.invokeExact(fptr, smooth, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_quantize_method$MH() {
        return RuntimeHelper.requireNonNull(constants$223.fits_set_quantize_method$MH,"fits_set_quantize_method");
    }
    public static int fits_set_quantize_method ( Addressable fptr,  int method,  Addressable status) {
        var mh$ = fits_set_quantize_method$MH();
        try {
            return (int)mh$.invokeExact(fptr, method, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_quantize_dither$MH() {
        return RuntimeHelper.requireNonNull(constants$223.fits_set_quantize_dither$MH,"fits_set_quantize_dither");
    }
    public static int fits_set_quantize_dither ( Addressable fptr,  int dither,  Addressable status) {
        var mh$ = fits_set_quantize_dither$MH();
        try {
            return (int)mh$.invokeExact(fptr, dither, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_dither_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$223.fits_set_dither_seed$MH,"fits_set_dither_seed");
    }
    public static int fits_set_dither_seed ( Addressable fptr,  int seed,  Addressable status) {
        var mh$ = fits_set_dither_seed$MH();
        try {
            return (int)mh$.invokeExact(fptr, seed, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_dither_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$223.fits_set_dither_offset$MH,"fits_set_dither_offset");
    }
    public static int fits_set_dither_offset ( Addressable fptr,  int offset,  Addressable status) {
        var mh$ = fits_set_dither_offset$MH();
        try {
            return (int)mh$.invokeExact(fptr, offset, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_lossy_int$MH() {
        return RuntimeHelper.requireNonNull(constants$223.fits_set_lossy_int$MH,"fits_set_lossy_int");
    }
    public static int fits_set_lossy_int ( Addressable fptr,  int lossy_int,  Addressable status) {
        var mh$ = fits_set_lossy_int$MH();
        try {
            return (int)mh$.invokeExact(fptr, lossy_int, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_huge_hdu$MH() {
        return RuntimeHelper.requireNonNull(constants$224.fits_set_huge_hdu$MH,"fits_set_huge_hdu");
    }
    public static int fits_set_huge_hdu ( Addressable fptr,  int huge,  Addressable status) {
        var mh$ = fits_set_huge_hdu$MH();
        try {
            return (int)mh$.invokeExact(fptr, huge, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_set_compression_pref$MH() {
        return RuntimeHelper.requireNonNull(constants$224.fits_set_compression_pref$MH,"fits_set_compression_pref");
    }
    public static int fits_set_compression_pref ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = fits_set_compression_pref$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_compression_type$MH() {
        return RuntimeHelper.requireNonNull(constants$224.fits_get_compression_type$MH,"fits_get_compression_type");
    }
    public static int fits_get_compression_type ( Addressable fptr,  Addressable ctype,  Addressable status) {
        var mh$ = fits_get_compression_type$MH();
        try {
            return (int)mh$.invokeExact(fptr, ctype, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_tile_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$224.fits_get_tile_dim$MH,"fits_get_tile_dim");
    }
    public static int fits_get_tile_dim ( Addressable fptr,  int ndim,  Addressable dims,  Addressable status) {
        var mh$ = fits_get_tile_dim$MH();
        try {
            return (int)mh$.invokeExact(fptr, ndim, dims, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_quantize_level$MH() {
        return RuntimeHelper.requireNonNull(constants$224.fits_get_quantize_level$MH,"fits_get_quantize_level");
    }
    public static int fits_get_quantize_level ( Addressable fptr,  Addressable qlevel,  Addressable status) {
        var mh$ = fits_get_quantize_level$MH();
        try {
            return (int)mh$.invokeExact(fptr, qlevel, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_noise_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$224.fits_get_noise_bits$MH,"fits_get_noise_bits");
    }
    public static int fits_get_noise_bits ( Addressable fptr,  Addressable noisebits,  Addressable status) {
        var mh$ = fits_get_noise_bits$MH();
        try {
            return (int)mh$.invokeExact(fptr, noisebits, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_hcomp_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$225.fits_get_hcomp_scale$MH,"fits_get_hcomp_scale");
    }
    public static int fits_get_hcomp_scale ( Addressable fptr,  Addressable scale,  Addressable status) {
        var mh$ = fits_get_hcomp_scale$MH();
        try {
            return (int)mh$.invokeExact(fptr, scale, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_hcomp_smooth$MH() {
        return RuntimeHelper.requireNonNull(constants$225.fits_get_hcomp_smooth$MH,"fits_get_hcomp_smooth");
    }
    public static int fits_get_hcomp_smooth ( Addressable fptr,  Addressable smooth,  Addressable status) {
        var mh$ = fits_get_hcomp_smooth$MH();
        try {
            return (int)mh$.invokeExact(fptr, smooth, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_get_dither_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$225.fits_get_dither_seed$MH,"fits_get_dither_seed");
    }
    public static int fits_get_dither_seed ( Addressable fptr,  Addressable seed,  Addressable status) {
        var mh$ = fits_get_dither_seed$MH();
        try {
            return (int)mh$.invokeExact(fptr, seed, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_img_compress$MH() {
        return RuntimeHelper.requireNonNull(constants$225.fits_img_compress$MH,"fits_img_compress");
    }
    public static int fits_img_compress ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = fits_img_compress$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_comp_img$MH() {
        return RuntimeHelper.requireNonNull(constants$225.fits_comp_img$MH,"fits_comp_img");
    }
    public static int fits_comp_img ( Addressable infptr,  Addressable outfptr,  int compress_type,  Addressable tilesize,  int parm1,  int parm2,  Addressable status) {
        var mh$ = fits_comp_img$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, compress_type, tilesize, parm1, parm2, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_is_compressed_image$MH() {
        return RuntimeHelper.requireNonNull(constants$225.fits_is_compressed_image$MH,"fits_is_compressed_image");
    }
    public static int fits_is_compressed_image ( Addressable fptr,  Addressable status) {
        var mh$ = fits_is_compressed_image$MH();
        try {
            return (int)mh$.invokeExact(fptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_is_reentrant$MH() {
        return RuntimeHelper.requireNonNull(constants$226.fits_is_reentrant$MH,"fits_is_reentrant");
    }
    public static int fits_is_reentrant () {
        var mh$ = fits_is_reentrant$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_decomp_img$MH() {
        return RuntimeHelper.requireNonNull(constants$226.fits_decomp_img$MH,"fits_decomp_img");
    }
    public static int fits_decomp_img ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = fits_decomp_img$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_img_decompress_header$MH() {
        return RuntimeHelper.requireNonNull(constants$226.fits_img_decompress_header$MH,"fits_img_decompress_header");
    }
    public static int fits_img_decompress_header ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = fits_img_decompress_header$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_img_decompress$MH() {
        return RuntimeHelper.requireNonNull(constants$226.fits_img_decompress$MH,"fits_img_decompress");
    }
    public static int fits_img_decompress ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = fits_img_decompress$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_hcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$226.fits_hcompress$MH,"fits_hcompress");
    }
    public static int fits_hcompress ( Addressable a,  int nx,  int ny,  int scale,  Addressable output,  Addressable nbytes,  Addressable status) {
        var mh$ = fits_hcompress$MH();
        try {
            return (int)mh$.invokeExact(a, nx, ny, scale, output, nbytes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_hcompress64$MH() {
        return RuntimeHelper.requireNonNull(constants$226.fits_hcompress64$MH,"fits_hcompress64");
    }
    public static int fits_hcompress64 ( Addressable a,  int nx,  int ny,  int scale,  Addressable output,  Addressable nbytes,  Addressable status) {
        var mh$ = fits_hcompress64$MH();
        try {
            return (int)mh$.invokeExact(a, nx, ny, scale, output, nbytes, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_hdecompress$MH() {
        return RuntimeHelper.requireNonNull(constants$227.fits_hdecompress$MH,"fits_hdecompress");
    }
    public static int fits_hdecompress ( Addressable input,  int smooth,  Addressable a,  Addressable nx,  Addressable ny,  Addressable scale,  Addressable status) {
        var mh$ = fits_hdecompress$MH();
        try {
            return (int)mh$.invokeExact(input, smooth, a, nx, ny, scale, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_hdecompress64$MH() {
        return RuntimeHelper.requireNonNull(constants$227.fits_hdecompress64$MH,"fits_hdecompress64");
    }
    public static int fits_hdecompress64 ( Addressable input,  int smooth,  Addressable a,  Addressable nx,  Addressable ny,  Addressable scale,  Addressable status) {
        var mh$ = fits_hdecompress64$MH();
        try {
            return (int)mh$.invokeExact(input, smooth, a, nx, ny, scale, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_compress_table$MH() {
        return RuntimeHelper.requireNonNull(constants$227.fits_compress_table$MH,"fits_compress_table");
    }
    public static int fits_compress_table ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = fits_compress_table$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_uncompress_table$MH() {
        return RuntimeHelper.requireNonNull(constants$227.fits_uncompress_table$MH,"fits_uncompress_table");
    }
    public static int fits_uncompress_table ( Addressable infptr,  Addressable outfptr,  Addressable status) {
        var mh$ = fits_uncompress_table$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffihtps$MH() {
        return RuntimeHelper.requireNonNull(constants$227.ffihtps$MH,"ffihtps");
    }
    public static int ffihtps () {
        var mh$ = ffihtps$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffchtps$MH() {
        return RuntimeHelper.requireNonNull(constants$227.ffchtps$MH,"ffchtps");
    }
    public static int ffchtps () {
        var mh$ = ffchtps$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffvhtps$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ffvhtps$MH,"ffvhtps");
    }
    public static void ffvhtps ( int flag) {
        var mh$ = ffvhtps$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffshdwn$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ffshdwn$MH,"ffshdwn");
    }
    public static void ffshdwn ( int flag) {
        var mh$ = ffshdwn$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffgtmo$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ffgtmo$MH,"ffgtmo");
    }
    public static int ffgtmo () {
        var mh$ = ffgtmo$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffstmo$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ffstmo$MH,"ffstmo");
    }
    public static int ffstmo ( int sec,  Addressable status) {
        var mh$ = ffstmo$MH();
        try {
            return (int)mh$.invokeExact(sec, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_get_param$MH() {
        return RuntimeHelper.requireNonNull(constants$228.fp_get_param$MH,"fp_get_param");
    }
    public static int fp_get_param ( int argc,  Addressable argv,  Addressable fpptr) {
        var mh$ = fp_get_param$MH();
        try {
            return (int)mh$.invokeExact(argc, argv, fpptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort_fpack$MH() {
        return RuntimeHelper.requireNonNull(constants$228.abort_fpack$MH,"abort_fpack");
    }
    public static void abort_fpack ( int sig) {
        var mh$ = abort_fpack$MH();
        try {
            mh$.invokeExact(sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_abort_output$MH() {
        return RuntimeHelper.requireNonNull(constants$229.fp_abort_output$MH,"fp_abort_output");
    }
    public static void fp_abort_output ( Addressable infptr,  Addressable outfptr,  int stat) {
        var mh$ = fp_abort_output$MH();
        try {
            mh$.invokeExact(infptr, outfptr, stat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$229.fp_usage$MH,"fp_usage");
    }
    public static int fp_usage () {
        var mh$ = fp_usage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_help$MH() {
        return RuntimeHelper.requireNonNull(constants$229.fp_help$MH,"fp_help");
    }
    public static int fp_help () {
        var mh$ = fp_help$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_hint$MH() {
        return RuntimeHelper.requireNonNull(constants$229.fp_hint$MH,"fp_hint");
    }
    public static int fp_hint () {
        var mh$ = fp_hint$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_init$MH() {
        return RuntimeHelper.requireNonNull(constants$229.fp_init$MH,"fp_init");
    }
    public static int fp_init ( Addressable fpptr) {
        var mh$ = fp_init$MH();
        try {
            return (int)mh$.invokeExact(fpptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_list$MH() {
        return RuntimeHelper.requireNonNull(constants$229.fp_list$MH,"fp_list");
    }
    public static int fp_list ( int argc,  Addressable argv,  MemorySegment fpvar) {
        var mh$ = fp_list$MH();
        try {
            return (int)mh$.invokeExact(argc, argv, fpvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_info$MH() {
        return RuntimeHelper.requireNonNull(constants$230.fp_info$MH,"fp_info");
    }
    public static int fp_info ( Addressable infits) {
        var mh$ = fp_info$MH();
        try {
            return (int)mh$.invokeExact(infits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_info_hdu$MH() {
        return RuntimeHelper.requireNonNull(constants$230.fp_info_hdu$MH,"fp_info_hdu");
    }
    public static int fp_info_hdu ( Addressable infptr) {
        var mh$ = fp_info_hdu$MH();
        try {
            return (int)mh$.invokeExact(infptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_preflight$MH() {
        return RuntimeHelper.requireNonNull(constants$230.fp_preflight$MH,"fp_preflight");
    }
    public static int fp_preflight ( int argc,  Addressable argv,  int unpack,  Addressable fpptr) {
        var mh$ = fp_preflight$MH();
        try {
            return (int)mh$.invokeExact(argc, argv, unpack, fpptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_loop$MH() {
        return RuntimeHelper.requireNonNull(constants$230.fp_loop$MH,"fp_loop");
    }
    public static int fp_loop ( int argc,  Addressable argv,  int unpack,  MemorySegment fpvar) {
        var mh$ = fp_loop$MH();
        try {
            return (int)mh$.invokeExact(argc, argv, unpack, fpvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_pack$MH() {
        return RuntimeHelper.requireNonNull(constants$230.fp_pack$MH,"fp_pack");
    }
    public static int fp_pack ( Addressable infits,  Addressable outfits,  MemorySegment fpvar,  Addressable islossless) {
        var mh$ = fp_pack$MH();
        try {
            return (int)mh$.invokeExact(infits, outfits, fpvar, islossless);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_unpack$MH() {
        return RuntimeHelper.requireNonNull(constants$230.fp_unpack$MH,"fp_unpack");
    }
    public static int fp_unpack ( Addressable infits,  Addressable outfits,  MemorySegment fpvar) {
        var mh$ = fp_unpack$MH();
        try {
            return (int)mh$.invokeExact(infits, outfits, fpvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_test$MH() {
        return RuntimeHelper.requireNonNull(constants$231.fp_test$MH,"fp_test");
    }
    public static int fp_test ( Addressable infits,  Addressable outfits,  Addressable outfits2,  MemorySegment fpvar) {
        var mh$ = fp_test$MH();
        try {
            return (int)mh$.invokeExact(infits, outfits, outfits2, fpvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_pack_hdu$MH() {
        return RuntimeHelper.requireNonNull(constants$231.fp_pack_hdu$MH,"fp_pack_hdu");
    }
    public static int fp_pack_hdu ( Addressable infptr,  Addressable outfptr,  MemorySegment fpvar,  Addressable islossless,  Addressable status) {
        var mh$ = fp_pack_hdu$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, fpvar, islossless, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_unpack_hdu$MH() {
        return RuntimeHelper.requireNonNull(constants$231.fp_unpack_hdu$MH,"fp_unpack_hdu");
    }
    public static int fp_unpack_hdu ( Addressable infptr,  Addressable outfptr,  MemorySegment fpvar,  Addressable status) {
        var mh$ = fp_unpack_hdu$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, fpvar, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fits_read_image_speed$MH() {
        return RuntimeHelper.requireNonNull(constants$231.fits_read_image_speed$MH,"fits_read_image_speed");
    }
    public static int fits_read_image_speed ( Addressable infptr,  Addressable whole_elapse,  Addressable whole_cpu,  Addressable row_elapse,  Addressable row_cpu,  Addressable status) {
        var mh$ = fits_read_image_speed$MH();
        try {
            return (int)mh$.invokeExact(infptr, whole_elapse, whole_cpu, row_elapse, row_cpu, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_test_hdu$MH() {
        return RuntimeHelper.requireNonNull(constants$231.fp_test_hdu$MH,"fp_test_hdu");
    }
    public static int fp_test_hdu ( Addressable infptr,  Addressable outfptr,  Addressable outfptr2,  MemorySegment fpvar,  Addressable status) {
        var mh$ = fp_test_hdu$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, outfptr2, fpvar, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_test_table$MH() {
        return RuntimeHelper.requireNonNull(constants$231.fp_test_table$MH,"fp_test_table");
    }
    public static int fp_test_table ( Addressable infptr,  Addressable outfptr,  Addressable outfptr2,  MemorySegment fpvar,  Addressable status) {
        var mh$ = fp_test_table$MH();
        try {
            return (int)mh$.invokeExact(infptr, outfptr, outfptr2, fpvar, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle marktime$MH() {
        return RuntimeHelper.requireNonNull(constants$232.marktime$MH,"marktime");
    }
    public static int marktime ( Addressable status) {
        var mh$ = marktime$MH();
        try {
            return (int)mh$.invokeExact(status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$232.gettime$MH,"gettime");
    }
    public static int gettime ( Addressable elapse,  Addressable elapscpu,  Addressable status) {
        var mh$ = gettime$MH();
        try {
            return (int)mh$.invokeExact(elapse, elapscpu, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_i2stat$MH() {
        return RuntimeHelper.requireNonNull(constants$232.fp_i2stat$MH,"fp_i2stat");
    }
    public static int fp_i2stat ( Addressable infptr,  int naxis,  Addressable naxes,  Addressable imagestats,  Addressable status) {
        var mh$ = fp_i2stat$MH();
        try {
            return (int)mh$.invokeExact(infptr, naxis, naxes, imagestats, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_i4stat$MH() {
        return RuntimeHelper.requireNonNull(constants$232.fp_i4stat$MH,"fp_i4stat");
    }
    public static int fp_i4stat ( Addressable infptr,  int naxis,  Addressable naxes,  Addressable imagestats,  Addressable status) {
        var mh$ = fp_i4stat$MH();
        try {
            return (int)mh$.invokeExact(infptr, naxis, naxes, imagestats, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_r4stat$MH() {
        return RuntimeHelper.requireNonNull(constants$232.fp_r4stat$MH,"fp_r4stat");
    }
    public static int fp_r4stat ( Addressable infptr,  int naxis,  Addressable naxes,  Addressable imagestats,  Addressable status) {
        var mh$ = fp_r4stat$MH();
        try {
            return (int)mh$.invokeExact(infptr, naxis, naxes, imagestats, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_i2rescale$MH() {
        return RuntimeHelper.requireNonNull(constants$232.fp_i2rescale$MH,"fp_i2rescale");
    }
    public static int fp_i2rescale ( Addressable infptr,  int naxis,  Addressable naxes,  double rescale,  Addressable outfptr,  Addressable status) {
        var mh$ = fp_i2rescale$MH();
        try {
            return (int)mh$.invokeExact(infptr, naxis, naxes, rescale, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_i4rescale$MH() {
        return RuntimeHelper.requireNonNull(constants$233.fp_i4rescale$MH,"fp_i4rescale");
    }
    public static int fp_i4rescale ( Addressable infptr,  int naxis,  Addressable naxes,  double rescale,  Addressable outfptr,  Addressable status) {
        var mh$ = fp_i4rescale$MH();
        try {
            return (int)mh$.invokeExact(infptr, naxis, naxes, rescale, outfptr, status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_msg$MH() {
        return RuntimeHelper.requireNonNull(constants$233.fp_msg$MH,"fp_msg");
    }
    public static int fp_msg ( Addressable msg) {
        var mh$ = fp_msg$MH();
        try {
            return (int)mh$.invokeExact(msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_version$MH() {
        return RuntimeHelper.requireNonNull(constants$233.fp_version$MH,"fp_version");
    }
    public static int fp_version () {
        var mh$ = fp_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fp_noop$MH() {
        return RuntimeHelper.requireNonNull(constants$233.fp_noop$MH,"fp_noop");
    }
    public static int fp_noop () {
        var mh$ = fp_noop$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fu_get_param$MH() {
        return RuntimeHelper.requireNonNull(constants$233.fu_get_param$MH,"fu_get_param");
    }
    public static int fu_get_param ( int argc,  Addressable argv,  Addressable fpptr) {
        var mh$ = fu_get_param$MH();
        try {
            return (int)mh$.invokeExact(argc, argv, fpptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fu_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$233.fu_usage$MH,"fu_usage");
    }
    public static int fu_usage () {
        var mh$ = fu_usage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fu_hint$MH() {
        return RuntimeHelper.requireNonNull(constants$234.fu_hint$MH,"fu_hint");
    }
    public static int fu_hint () {
        var mh$ = fu_hint$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fu_help$MH() {
        return RuntimeHelper.requireNonNull(constants$234.fu_help$MH,"fu_help");
    }
    public static int fu_help () {
        var mh$ = fu_help$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    public static MemoryAddress NULL() {
        return constants$234.NULL$ADDR;
    }
    public static long _TRUNCATE() {
        return -1L;
    }
    public static long _CRT_SIZE_MAX() {
        return -1L;
    }
    public static MemorySegment __FILEW__() {
        return constants$234.__FILEW__$SEGMENT;
    }
    public static int __STDC_SECURE_LIB__() {
        return (int)200411L;
    }
    public static int __GOT_SECURE_LIB__() {
        return (int)200411L;
    }
    public static int EDEADLOCK() {
        return (int)36L;
    }
    public static int _NLSCMPERROR() {
        return (int)2147483647L;
    }
    public static MemorySegment _CRT_INTERNAL_STDIO_SYMBOL_PREFIX() {
        return constants$234._CRT_INTERNAL_STDIO_SYMBOL_PREFIX$SEGMENT;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION() {
        return 1L;
    }
    public static long _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR() {
        return 2L;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS() {
        return 4L;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY() {
        return 8L;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS() {
        return 16L;
    }
    public static long _CRT_INTERNAL_SCANF_SECURECRT() {
        return 1L;
    }
    public static long _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS() {
        return 2L;
    }
    public static long _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY() {
        return 4L;
    }
    public static short WEOF() {
        return (short)65535L;
    }
    public static int _NFILE() {
        return (int)512L;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static int L_tmpnam_s() {
        return (int)260L;
    }
    public static int TMP_MAX() {
        return (int)2147483647L;
    }
    public static int TMP_MAX_S() {
        return (int)2147483647L;
    }
    public static int _TMP_MAX_S() {
        return (int)2147483647L;
    }
    public static int SYS_OPEN() {
        return (int)20L;
    }
    public static int _MAX_ITOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    public static int _MAX_ITOSTR_BASE10_COUNT() {
        return (int)12L;
    }
    public static int _MAX_ITOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    public static int _MAX_ITOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    public static int _MAX_LTOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    public static int _MAX_LTOSTR_BASE10_COUNT() {
        return (int)12L;
    }
    public static int _MAX_LTOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    public static int _MAX_LTOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    public static int _MAX_ULTOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    public static int _MAX_ULTOSTR_BASE10_COUNT() {
        return (int)11L;
    }
    public static int _MAX_ULTOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    public static int _MAX_ULTOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    public static int _MAX_I64TOSTR_BASE16_COUNT() {
        return (int)17L;
    }
    public static int _MAX_I64TOSTR_BASE10_COUNT() {
        return (int)21L;
    }
    public static int _MAX_I64TOSTR_BASE8_COUNT() {
        return (int)23L;
    }
    public static int _MAX_I64TOSTR_BASE2_COUNT() {
        return (int)65L;
    }
    public static int _MAX_U64TOSTR_BASE16_COUNT() {
        return (int)17L;
    }
    public static int _MAX_U64TOSTR_BASE10_COUNT() {
        return (int)21L;
    }
    public static int _MAX_U64TOSTR_BASE8_COUNT() {
        return (int)23L;
    }
    public static int _MAX_U64TOSTR_BASE2_COUNT() {
        return (int)65L;
    }
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MAX() {
        return (int)127L;
    }
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    public static int LONG_MIN() {
        return (int)-2147483648L;
    }
    public static int LONG_MAX() {
        return (int)2147483647L;
    }
    public static int ULONG_MAX() {
        return (int)4294967295L;
    }
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    public static long ULLONG_MAX() {
        return -1L;
    }
    public static int _I8_MIN() {
        return (int)-128L;
    }
    public static byte _I8_MAX() {
        return (byte)127L;
    }
    public static byte _UI8_MAX() {
        return (byte)255L;
    }
    public static int _I16_MIN() {
        return (int)-32768L;
    }
    public static short _I16_MAX() {
        return (short)32767L;
    }
    public static short _UI16_MAX() {
        return (short)65535L;
    }
    public static int _I32_MIN() {
        return (int)-2147483648L;
    }
    public static int _I32_MAX() {
        return (int)2147483647L;
    }
    public static int _UI32_MAX() {
        return (int)4294967295L;
    }
    public static long _I64_MIN() {
        return -9223372036854775808L;
    }
    public static long _I64_MAX() {
        return 9223372036854775807L;
    }
    public static long _UI64_MAX() {
        return -1L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static long LONG_LONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LONG_LONG_MIN() {
        return -9223372036854775808L;
    }
    public static long ULONG_LONG_MAX() {
        return -1L;
    }
    public static int _CVTBUFSIZE() {
        return (int)349L;
    }
    public static long LONGLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LONGLONG_MIN() {
        return -9223372036854775808L;
    }
    public static int FLOAT_IMG() {
        return (int)-32L;
    }
    public static int DOUBLE_IMG() {
        return (int)-64L;
    }
    public static int ANY_HDU() {
        return (int)-1L;
    }
    public static float FLOATNULLVALUE() {
        return -9.119119840596153E-36f;
    }
    public static double DOUBLENULLVALUE() {
        return -9.1191291391491E-36d;
    }
    public static int NO_DITHER() {
        return (int)-1L;
    }
    public static int NOCOMPRESS() {
        return (int)-1L;
    }
    public static int CREATE_DISK_FILE() {
        return (int)-106L;
    }
    public static int OPEN_DISK_FILE() {
        return (int)-105L;
    }
    public static int SKIP_TABLE() {
        return (int)-104L;
    }
    public static int SKIP_IMAGE() {
        return (int)-103L;
    }
    public static int SKIP_NULL_PRIMARY() {
        return (int)-102L;
    }
    public static int USE_MEM_BUFF() {
        return (int)-101L;
    }
    public static int OVERFLOW_ERR() {
        return (int)-11L;
    }
    public static int PREPEND_PRIMARY() {
        return (int)-9L;
    }
    public static int SHARED_ERRBASE() {
        return (int)150L;
    }
    public static int SHARED_BADARG() {
        return (int)151L;
    }
    public static int SHARED_NULPTR() {
        return (int)152L;
    }
    public static int SHARED_TABFULL() {
        return (int)153L;
    }
    public static int SHARED_NOTINIT() {
        return (int)154L;
    }
    public static int SHARED_IPCERR() {
        return (int)155L;
    }
    public static int SHARED_NOMEM() {
        return (int)156L;
    }
    public static int SHARED_AGAIN() {
        return (int)157L;
    }
    public static int SHARED_NOFILE() {
        return (int)158L;
    }
    public static int SHARED_NORESIZE() {
        return (int)159L;
    }
    public static int NGP_ERRBASE() {
        return (int)360L;
    }
    public static int NGP_OK() {
        return (int)0L;
    }
    public static int NGP_NO_MEMORY() {
        return (int)360L;
    }
    public static int NGP_READ_ERR() {
        return (int)361L;
    }
    public static int NGP_NUL_PTR() {
        return (int)362L;
    }
    public static int NGP_EMPTY_CURLINE() {
        return (int)363L;
    }
    public static int NGP_UNREAD_QUEUE_FULL() {
        return (int)364L;
    }
    public static int NGP_INC_NESTING() {
        return (int)365L;
    }
    public static int NGP_ERR_FOPEN() {
        return (int)366L;
    }
    public static int NGP_EOF() {
        return (int)367L;
    }
    public static int NGP_BAD_ARG() {
        return (int)368L;
    }
    public static int NGP_TOKEN_NOT_EXPECT() {
        return (int)369L;
    }
    public static MemorySegment FPACK_VERSION() {
        return constants$234.FPACK_VERSION$SEGMENT;
    }
    public static double DEF_QLEVEL() {
        return 4.0d;
    }
    public static double DEF_HCOMP_SCALE() {
        return 0.0d;
    }
}


