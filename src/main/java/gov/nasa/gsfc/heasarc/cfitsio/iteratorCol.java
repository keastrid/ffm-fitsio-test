// Generated by jextract

package gov.nasa.gsfc.heasarc.cfitsio;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class iteratorCol {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("fptr"),
        Constants$root.C_LONG$LAYOUT.withName("colnum"),
        MemoryLayout.sequenceLayout(70, Constants$root.C_CHAR$LAYOUT).withName("colname"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("datatype"),
        Constants$root.C_LONG$LAYOUT.withName("iotype"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("array"),
        Constants$root.C_LONG$LAYOUT.withName("repeat"),
        Constants$root.C_LONG$LAYOUT.withName("tlmin"),
        Constants$root.C_LONG$LAYOUT.withName("tlmax"),
        MemoryLayout.sequenceLayout(70, Constants$root.C_CHAR$LAYOUT).withName("tunit"),
        MemoryLayout.sequenceLayout(70, Constants$root.C_CHAR$LAYOUT).withName("tdisp")
    );
    public static MemoryLayout $LAYOUT() {
        return iteratorCol.$struct$LAYOUT;
    }
    static final VarHandle fptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fptr"));
    public static VarHandle fptr$VH() {
        return iteratorCol.fptr$VH;
    }
    public static MemoryAddress fptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)iteratorCol.fptr$VH.get(seg);
    }
    public static void fptr$set( MemorySegment seg, MemoryAddress x) {
        iteratorCol.fptr$VH.set(seg, x);
    }
    public static MemoryAddress fptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)iteratorCol.fptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fptr$set(MemorySegment seg, long index, MemoryAddress x) {
        iteratorCol.fptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle colnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("colnum"));
    public static VarHandle colnum$VH() {
        return iteratorCol.colnum$VH;
    }
    public static int colnum$get(MemorySegment seg) {
        return (int)iteratorCol.colnum$VH.get(seg);
    }
    public static void colnum$set( MemorySegment seg, int x) {
        iteratorCol.colnum$VH.set(seg, x);
    }
    public static int colnum$get(MemorySegment seg, long index) {
        return (int)iteratorCol.colnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colnum$set(MemorySegment seg, long index, int x) {
        iteratorCol.colnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment colname$slice(MemorySegment seg) {
        return seg.asSlice(12, 70);
    }
    static final VarHandle datatype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("datatype"));
    public static VarHandle datatype$VH() {
        return iteratorCol.datatype$VH;
    }
    public static int datatype$get(MemorySegment seg) {
        return (int)iteratorCol.datatype$VH.get(seg);
    }
    public static void datatype$set( MemorySegment seg, int x) {
        iteratorCol.datatype$VH.set(seg, x);
    }
    public static int datatype$get(MemorySegment seg, long index) {
        return (int)iteratorCol.datatype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void datatype$set(MemorySegment seg, long index, int x) {
        iteratorCol.datatype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iotype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iotype"));
    public static VarHandle iotype$VH() {
        return iteratorCol.iotype$VH;
    }
    public static int iotype$get(MemorySegment seg) {
        return (int)iteratorCol.iotype$VH.get(seg);
    }
    public static void iotype$set( MemorySegment seg, int x) {
        iteratorCol.iotype$VH.set(seg, x);
    }
    public static int iotype$get(MemorySegment seg, long index) {
        return (int)iteratorCol.iotype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iotype$set(MemorySegment seg, long index, int x) {
        iteratorCol.iotype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle array$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("array"));
    public static VarHandle array$VH() {
        return iteratorCol.array$VH;
    }
    public static MemoryAddress array$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)iteratorCol.array$VH.get(seg);
    }
    public static void array$set( MemorySegment seg, MemoryAddress x) {
        iteratorCol.array$VH.set(seg, x);
    }
    public static MemoryAddress array$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)iteratorCol.array$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void array$set(MemorySegment seg, long index, MemoryAddress x) {
        iteratorCol.array$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle repeat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("repeat"));
    public static VarHandle repeat$VH() {
        return iteratorCol.repeat$VH;
    }
    public static int repeat$get(MemorySegment seg) {
        return (int)iteratorCol.repeat$VH.get(seg);
    }
    public static void repeat$set( MemorySegment seg, int x) {
        iteratorCol.repeat$VH.set(seg, x);
    }
    public static int repeat$get(MemorySegment seg, long index) {
        return (int)iteratorCol.repeat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void repeat$set(MemorySegment seg, long index, int x) {
        iteratorCol.repeat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tlmin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tlmin"));
    public static VarHandle tlmin$VH() {
        return iteratorCol.tlmin$VH;
    }
    public static int tlmin$get(MemorySegment seg) {
        return (int)iteratorCol.tlmin$VH.get(seg);
    }
    public static void tlmin$set( MemorySegment seg, int x) {
        iteratorCol.tlmin$VH.set(seg, x);
    }
    public static int tlmin$get(MemorySegment seg, long index) {
        return (int)iteratorCol.tlmin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tlmin$set(MemorySegment seg, long index, int x) {
        iteratorCol.tlmin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tlmax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tlmax"));
    public static VarHandle tlmax$VH() {
        return iteratorCol.tlmax$VH;
    }
    public static int tlmax$get(MemorySegment seg) {
        return (int)iteratorCol.tlmax$VH.get(seg);
    }
    public static void tlmax$set( MemorySegment seg, int x) {
        iteratorCol.tlmax$VH.set(seg, x);
    }
    public static int tlmax$get(MemorySegment seg, long index) {
        return (int)iteratorCol.tlmax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tlmax$set(MemorySegment seg, long index, int x) {
        iteratorCol.tlmax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment tunit$slice(MemorySegment seg) {
        return seg.asSlice(116, 70);
    }
    public static MemorySegment tdisp$slice(MemorySegment seg) {
        return seg.asSlice(186, 70);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


