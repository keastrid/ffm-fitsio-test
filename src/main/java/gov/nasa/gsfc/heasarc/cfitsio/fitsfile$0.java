// Generated by jextract

package gov.nasa.gsfc.heasarc.cfitsio;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fitsfile$0 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("HDUposition"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("Fptr")
    );
    public static MemoryLayout $LAYOUT() {
        return fitsfile$0.$struct$LAYOUT;
    }
    static final VarHandle HDUposition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HDUposition"));
    public static VarHandle HDUposition$VH() {
        return fitsfile$0.HDUposition$VH;
    }
    public static int HDUposition$get(MemorySegment seg) {
        return (int)fitsfile$0.HDUposition$VH.get(seg);
    }
    public static void HDUposition$set( MemorySegment seg, int x) {
        fitsfile$0.HDUposition$VH.set(seg, x);
    }
    public static int HDUposition$get(MemorySegment seg, long index) {
        return (int)fitsfile$0.HDUposition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HDUposition$set(MemorySegment seg, long index, int x) {
        fitsfile$0.HDUposition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Fptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Fptr"));
    public static VarHandle Fptr$VH() {
        return fitsfile$0.Fptr$VH;
    }
    public static MemoryAddress Fptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fitsfile$0.Fptr$VH.get(seg);
    }
    public static void Fptr$set( MemorySegment seg, MemoryAddress x) {
        fitsfile$0.Fptr$VH.set(seg, x);
    }
    public static MemoryAddress Fptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fitsfile$0.Fptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Fptr$set(MemorySegment seg, long index, MemoryAddress x) {
        fitsfile$0.Fptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


