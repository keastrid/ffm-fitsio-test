// Generated by jextract

package gov.nasa.gsfc.heasarc.cfitsio;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class imgstats {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("n_nulls"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_DOUBLE$LAYOUT.withName("minval"),
        Constants$root.C_DOUBLE$LAYOUT.withName("maxval"),
        Constants$root.C_DOUBLE$LAYOUT.withName("mean"),
        Constants$root.C_DOUBLE$LAYOUT.withName("sigma"),
        Constants$root.C_DOUBLE$LAYOUT.withName("noise1"),
        Constants$root.C_DOUBLE$LAYOUT.withName("noise2"),
        Constants$root.C_DOUBLE$LAYOUT.withName("noise3"),
        Constants$root.C_DOUBLE$LAYOUT.withName("noise5")
    );
    public static MemoryLayout $LAYOUT() {
        return imgstats.$struct$LAYOUT;
    }
    static final VarHandle n_nulls$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_nulls"));
    public static VarHandle n_nulls$VH() {
        return imgstats.n_nulls$VH;
    }
    public static int n_nulls$get(MemorySegment seg) {
        return (int)imgstats.n_nulls$VH.get(seg);
    }
    public static void n_nulls$set( MemorySegment seg, int x) {
        imgstats.n_nulls$VH.set(seg, x);
    }
    public static int n_nulls$get(MemorySegment seg, long index) {
        return (int)imgstats.n_nulls$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_nulls$set(MemorySegment seg, long index, int x) {
        imgstats.n_nulls$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle minval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("minval"));
    public static VarHandle minval$VH() {
        return imgstats.minval$VH;
    }
    public static double minval$get(MemorySegment seg) {
        return (double)imgstats.minval$VH.get(seg);
    }
    public static void minval$set( MemorySegment seg, double x) {
        imgstats.minval$VH.set(seg, x);
    }
    public static double minval$get(MemorySegment seg, long index) {
        return (double)imgstats.minval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void minval$set(MemorySegment seg, long index, double x) {
        imgstats.minval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maxval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maxval"));
    public static VarHandle maxval$VH() {
        return imgstats.maxval$VH;
    }
    public static double maxval$get(MemorySegment seg) {
        return (double)imgstats.maxval$VH.get(seg);
    }
    public static void maxval$set( MemorySegment seg, double x) {
        imgstats.maxval$VH.set(seg, x);
    }
    public static double maxval$get(MemorySegment seg, long index) {
        return (double)imgstats.maxval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maxval$set(MemorySegment seg, long index, double x) {
        imgstats.maxval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mean$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mean"));
    public static VarHandle mean$VH() {
        return imgstats.mean$VH;
    }
    public static double mean$get(MemorySegment seg) {
        return (double)imgstats.mean$VH.get(seg);
    }
    public static void mean$set( MemorySegment seg, double x) {
        imgstats.mean$VH.set(seg, x);
    }
    public static double mean$get(MemorySegment seg, long index) {
        return (double)imgstats.mean$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mean$set(MemorySegment seg, long index, double x) {
        imgstats.mean$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sigma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sigma"));
    public static VarHandle sigma$VH() {
        return imgstats.sigma$VH;
    }
    public static double sigma$get(MemorySegment seg) {
        return (double)imgstats.sigma$VH.get(seg);
    }
    public static void sigma$set( MemorySegment seg, double x) {
        imgstats.sigma$VH.set(seg, x);
    }
    public static double sigma$get(MemorySegment seg, long index) {
        return (double)imgstats.sigma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sigma$set(MemorySegment seg, long index, double x) {
        imgstats.sigma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle noise1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("noise1"));
    public static VarHandle noise1$VH() {
        return imgstats.noise1$VH;
    }
    public static double noise1$get(MemorySegment seg) {
        return (double)imgstats.noise1$VH.get(seg);
    }
    public static void noise1$set( MemorySegment seg, double x) {
        imgstats.noise1$VH.set(seg, x);
    }
    public static double noise1$get(MemorySegment seg, long index) {
        return (double)imgstats.noise1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void noise1$set(MemorySegment seg, long index, double x) {
        imgstats.noise1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle noise2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("noise2"));
    public static VarHandle noise2$VH() {
        return imgstats.noise2$VH;
    }
    public static double noise2$get(MemorySegment seg) {
        return (double)imgstats.noise2$VH.get(seg);
    }
    public static void noise2$set( MemorySegment seg, double x) {
        imgstats.noise2$VH.set(seg, x);
    }
    public static double noise2$get(MemorySegment seg, long index) {
        return (double)imgstats.noise2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void noise2$set(MemorySegment seg, long index, double x) {
        imgstats.noise2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle noise3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("noise3"));
    public static VarHandle noise3$VH() {
        return imgstats.noise3$VH;
    }
    public static double noise3$get(MemorySegment seg) {
        return (double)imgstats.noise3$VH.get(seg);
    }
    public static void noise3$set( MemorySegment seg, double x) {
        imgstats.noise3$VH.set(seg, x);
    }
    public static double noise3$get(MemorySegment seg, long index) {
        return (double)imgstats.noise3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void noise3$set(MemorySegment seg, long index, double x) {
        imgstats.noise3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle noise5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("noise5"));
    public static VarHandle noise5$VH() {
        return imgstats.noise5$VH;
    }
    public static double noise5$get(MemorySegment seg) {
        return (double)imgstats.noise5$VH.get(seg);
    }
    public static void noise5$set( MemorySegment seg, double x) {
        imgstats.noise5$VH.set(seg, x);
    }
    public static double noise5$get(MemorySegment seg, long index) {
        return (double)imgstats.noise5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void noise5$set(MemorySegment seg, long index, double x) {
        imgstats.noise5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


